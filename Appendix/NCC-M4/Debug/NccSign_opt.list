
NccSign_opt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b250  08000200  08000200  00001200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800b450  0800b450  0000c450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5dc  0800b5dc  00011860  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5dc  0800b5dc  0000c5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e4  0800b5e4  00011860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e4  0800b5e4  0000c5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5e8  0800b5e8  0000c5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004860  20000000  0800b5ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20004860  0800fe4c  00011860  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005088  0800fe4c  00012088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e253  00000000  00000000  00011890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe1  00000000  00000000  0002fae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000f17d  00000000  00000000  00033ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00042c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018f3  00000000  00000000  00043df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b97c  00000000  00000000  000456eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f906  00000000  00000000  00071067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001022f3  00000000  00000000  0009096d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00192c60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000372c  00000000  00000000  00192ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  001963d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20004860 	.word	0x20004860
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b438 	.word	0x0800b438

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20004864 	.word	0x20004864
 800023c:	0800b438 	.word	0x0800b438

08000240 <asm_intt_1>:
// void asm_intt_1(int32_t * Out, int32_t* zeta);
.global asm_intt_1
.type asm_intt_1,%function
.align 2
asm_intt_1:
    push.w {r4-r11, r14}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	zeta2     .req R14
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14

    movw qinv, #:lower16:0x7a29f27f
 8000244:	f24f 227f 	movw	r2, #62079	@ 0xf27f
    movt qinv, #:upper16:0x7a29f27f
 8000248:	f6c7 2229 	movt	r2, #31273	@ 0x7a29
    movw q, #0x3281
 800024c:	f243 2381 	movw	r3, #12929	@ 0x3281
    movt q, #0x80
 8000250:	f2c0 0380 	movt	r3, #128	@ 0x80

vmov s0, ptr_zeta
 8000254:	ee00 1a10 	vmov	s0, r1

//stage 1 - 2
	.equ distance, 9	//9*4*4

	add.w temp_l, ptr_p, #4608 // 32 iterations
 8000258:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
  	vmov s9, temp_l
 800025c:	ee04 aa90 	vmov	s9, sl


  1:
	add.w temp_l, ptr_p, #9*strincr // 9 iterations
 8000260:	f100 0a24 	add.w	sl, r0, #36	@ 0x24
    vmov s10, temp_l
 8000264:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8000268:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 800026c:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8000270:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 8000274:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 8000278:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 3
		ldr.w pol0, [ptr_p]
 800027c:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000280:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000284:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000288:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c

    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 800028c:	4435      	add	r5, r6
 800028e:	4447      	add	r7, r8
 8000290:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000294:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000298:	fb86 960b 	smull	r9, r6, r6, fp
 800029c:	fb09 fa02 	mul.w	sl, r9, r2
 80002a0:	fbca 9603 	smlal	r9, r6, sl, r3
 80002a4:	fb88 980c 	smull	r9, r8, r8, ip
 80002a8:	fb09 fa02 	mul.w	sl, r9, r2
 80002ac:	fbca 9803 	smlal	r9, r8, sl, r3
 80002b0:	443d      	add	r5, r7
 80002b2:	4446      	add	r6, r8
 80002b4:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80002b8:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80002bc:	fb87 970e 	smull	r9, r7, r7, lr
 80002c0:	fb09 fa02 	mul.w	sl, r9, r2
 80002c4:	fbca 9703 	smlal	r9, r7, sl, r3
 80002c8:	fb88 980e 	smull	r9, r8, r8, lr
 80002cc:	fb09 fa02 	mul.w	sl, r9, r2
 80002d0:	fbca 9803 	smlal	r9, r8, sl, r3

		str.w pol1, [ptr_p, #1*distance*strincr]
 80002d4:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80002d8:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80002dc:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 80002e0:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 80002e4:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80002e8:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80002ec:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80002f0:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 80002f4:	4435      	add	r5, r6
 80002f6:	4447      	add	r7, r8
 80002f8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80002fc:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000300:	fb86 960b 	smull	r9, r6, r6, fp
 8000304:	fb09 fa02 	mul.w	sl, r9, r2
 8000308:	fbca 9603 	smlal	r9, r6, sl, r3
 800030c:	fb88 980c 	smull	r9, r8, r8, ip
 8000310:	fb09 fa02 	mul.w	sl, r9, r2
 8000314:	fbca 9803 	smlal	r9, r8, sl, r3
 8000318:	443d      	add	r5, r7
 800031a:	4446      	add	r6, r8
 800031c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000320:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000324:	fb87 970e 	smull	r9, r7, r7, lr
 8000328:	fb09 fa02 	mul.w	sl, r9, r2
 800032c:	fbca 9703 	smlal	r9, r7, sl, r3
 8000330:	fb88 980e 	smull	r9, r8, r8, lr
 8000334:	fb09 fa02 	mul.w	sl, r9, r2
 8000338:	fbca 9803 	smlal	r9, r8, sl, r3
		str.w pol1, [ptr_p, #1*distance*strincr]
 800033c:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8000340:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8000344:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8000348:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 800034c:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000350:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000354:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000358:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 800035c:	4435      	add	r5, r6
 800035e:	4447      	add	r7, r8
 8000360:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000364:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000368:	fb86 960b 	smull	r9, r6, r6, fp
 800036c:	fb09 fa02 	mul.w	sl, r9, r2
 8000370:	fbca 9603 	smlal	r9, r6, sl, r3
 8000374:	fb88 980c 	smull	r9, r8, r8, ip
 8000378:	fb09 fa02 	mul.w	sl, r9, r2
 800037c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000380:	443d      	add	r5, r7
 8000382:	4446      	add	r6, r8
 8000384:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000388:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800038c:	fb87 970e 	smull	r9, r7, r7, lr
 8000390:	fb09 fa02 	mul.w	sl, r9, r2
 8000394:	fbca 9703 	smlal	r9, r7, sl, r3
 8000398:	fb88 980e 	smull	r9, r8, r8, lr
 800039c:	fb09 fa02 	mul.w	sl, r9, r2
 80003a0:	fbca 9803 	smlal	r9, r8, sl, r3
		str.w pol1, [ptr_p, #1*distance*strincr]
 80003a4:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80003a8:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80003ac:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 80003b0:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 80003b4:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 80003b8:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 80003bc:	f47f af5e 	bne.w	800027c <asm_intt_1+0x3c>

	add.w ptr_p, #27*strincr //next ring index-0 : 9 + 27 = 36
 80003c0:	f100 006c 	add.w	r0, r0, #108	@ 0x6c
    vmov temp_l, s9
 80003c4:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 80003c8:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80003cc:	f47f af48 	bne.w	8000260 <asm_intt_1+0x20>

    sub ptr_p, #4608
 80003d0:	f5a0 5090 	sub.w	r0, r0, #4608	@ 0x1200

//stage 3 - 4
	.equ distance, 36	//36*4*4
	add.w temp_l, ptr_p, #4608 // 8 iterations
 80003d4:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
  	vmov s9, temp_l
 80003d8:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #36*strincr // 36 iterations
 80003dc:	f100 0a90 	add.w	sl, r0, #144	@ 0x90
    vmov s10, temp_l
 80003e0:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 80003e4:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 80003e8:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 80003ec:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 80003f0:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 80003f4:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 80003f8:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80003fc:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000400:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000404:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0

    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8000408:	4435      	add	r5, r6
 800040a:	4447      	add	r7, r8
 800040c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000410:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000414:	fb86 960b 	smull	r9, r6, r6, fp
 8000418:	fb09 fa02 	mul.w	sl, r9, r2
 800041c:	fbca 9603 	smlal	r9, r6, sl, r3
 8000420:	fb88 980c 	smull	r9, r8, r8, ip
 8000424:	fb09 fa02 	mul.w	sl, r9, r2
 8000428:	fbca 9803 	smlal	r9, r8, sl, r3
 800042c:	443d      	add	r5, r7
 800042e:	4446      	add	r6, r8
 8000430:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000434:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000438:	fb87 970e 	smull	r9, r7, r7, lr
 800043c:	fb09 fa02 	mul.w	sl, r9, r2
 8000440:	fbca 9703 	smlal	r9, r7, sl, r3
 8000444:	fb88 980e 	smull	r9, r8, r8, lr
 8000448:	fb09 fa02 	mul.w	sl, r9, r2
 800044c:	fbca 9803 	smlal	r9, r8, sl, r3

		str.w pol1, [ptr_p, #1*distance*strincr]
 8000450:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8000454:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8000458:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol0, [ptr_p], #strincr
 800045c:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8000460:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000464:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000468:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 800046c:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8000470:	4435      	add	r5, r6
 8000472:	4447      	add	r7, r8
 8000474:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000478:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800047c:	fb86 960b 	smull	r9, r6, r6, fp
 8000480:	fb09 fa02 	mul.w	sl, r9, r2
 8000484:	fbca 9603 	smlal	r9, r6, sl, r3
 8000488:	fb88 980c 	smull	r9, r8, r8, ip
 800048c:	fb09 fa02 	mul.w	sl, r9, r2
 8000490:	fbca 9803 	smlal	r9, r8, sl, r3
 8000494:	443d      	add	r5, r7
 8000496:	4446      	add	r6, r8
 8000498:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800049c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80004a0:	fb87 970e 	smull	r9, r7, r7, lr
 80004a4:	fb09 fa02 	mul.w	sl, r9, r2
 80004a8:	fbca 9703 	smlal	r9, r7, sl, r3
 80004ac:	fb88 980e 	smull	r9, r8, r8, lr
 80004b0:	fb09 fa02 	mul.w	sl, r9, r2
 80004b4:	fbca 9803 	smlal	r9, r8, sl, r3
		str.w pol1, [ptr_p, #1*distance*strincr]
 80004b8:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80004bc:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80004c0:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol0, [ptr_p], #strincr
 80004c4:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 80004c8:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 80004cc:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 80004d0:	d192      	bne.n	80003f8 <asm_intt_1+0x1b8>

	add.w ptr_p, #108*strincr //next ring index-0 : 36 + 108 = 144
 80004d2:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
    vmov temp_l, s9
 80004d6:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 80004da:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80004de:	f47f af7d 	bne.w	80003dc <asm_intt_1+0x19c>

    sub ptr_p, #4608
 80004e2:	f5a0 5090 	sub.w	r0, r0, #4608	@ 0x1200

//stage 5 - 7
	.equ distance, 144 //144*4*4
  	.equ strincr, 4

  	vldm ptr_zeta!, {s2-s8}
 80004e6:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 80004ea:	ee00 1a10 	vmov	s0, r1

  	add.w temp_l, ptr_p, #distance*strincr // 144 iterations : 8*144 = 1152
 80004ee:	f500 7a10 	add.w	sl, r0, #576	@ 0x240
  	vmov s9, temp_l
 80004f2:	ee04 aa90 	vmov	s9, sl

  	movw temp_l, #0x7d8a
 80004f6:	f647 5a8a 	movw	sl, #32138	@ 0x7d8a
    movt temp_l, #0x4e
 80004fa:	f2c0 0a4e 	movt	sl, #78	@ 0x4e
    vmov s11, temp_l //F1= 5143946
 80004fe:	ee05 aa90 	vmov	s11, sl
    movw temp_l, #0xc893
 8000502:	f64c 0a93 	movw	sl, #51347	@ 0xc893
    movt temp_l, #0x1c
 8000506:	f2c0 0a1c 	movt	sl, #28
    vmov s12, temp_l //F2= 1886355
 800050a:	ee06 aa10 	vmov	s12, sl

  1:
    .rept 2
    ldr.w pol0, [ptr_p]
 800050e:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000512:	f8d0 6240 	ldr.w	r6, [r0, #576]	@ 0x240
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000516:	f8d0 7480 	ldr.w	r7, [r0, #1152]	@ 0x480
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 800051a:	f8d0 86c0 	ldr.w	r8, [r0, #1728]	@ 0x6c0
    ldr.w pol4, [ptr_p, #4*distance*strincr]
 800051e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
    ldr.w pol5, [ptr_p, #5*distance*strincr]
 8000522:	f8d0 bb40 	ldr.w	fp, [r0, #2880]	@ 0xb40
    ldr.w pol6, [ptr_p, #6*distance*strincr]
 8000526:	f8d0 cd80 	ldr.w	ip, [r0, #3456]	@ 0xd80
    ldr.w pol7, [ptr_p, #7*distance*strincr]
 800052a:	f8d0 efc0 	ldr.w	lr, [r0, #4032]	@ 0xfc0

    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 800052e:	4435      	add	r5, r6
 8000530:	4447      	add	r7, r8
 8000532:	445c      	add	r4, fp
 8000534:	44f4      	add	ip, lr
 8000536:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 800053a:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800053e:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000542:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000546:	ee11 1a10 	vmov	r1, s2
 800054a:	fb86 9601 	smull	r9, r6, r6, r1
 800054e:	fb09 fa02 	mul.w	sl, r9, r2
 8000552:	fbca 9603 	smlal	r9, r6, sl, r3
 8000556:	ee11 1a90 	vmov	r1, s3
 800055a:	fb88 9801 	smull	r9, r8, r8, r1
 800055e:	fb09 fa02 	mul.w	sl, r9, r2
 8000562:	fbca 9803 	smlal	r9, r8, sl, r3
 8000566:	ee12 1a10 	vmov	r1, s4
 800056a:	fb8b 9b01 	smull	r9, fp, fp, r1
 800056e:	fb09 fa02 	mul.w	sl, r9, r2
 8000572:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000576:	ee12 1a90 	vmov	r1, s5
 800057a:	fb8e 9e01 	smull	r9, lr, lr, r1
 800057e:	fb09 fa02 	mul.w	sl, r9, r2
 8000582:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000586:	443d      	add	r5, r7
 8000588:	4446      	add	r6, r8
 800058a:	4464      	add	r4, ip
 800058c:	44f3      	add	fp, lr
 800058e:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000592:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000596:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 800059a:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 800059e:	ee13 1a10 	vmov	r1, s6
 80005a2:	fb87 9701 	smull	r9, r7, r7, r1
 80005a6:	fb09 fa02 	mul.w	sl, r9, r2
 80005aa:	fbca 9703 	smlal	r9, r7, sl, r3
 80005ae:	fb88 9801 	smull	r9, r8, r8, r1
 80005b2:	fb09 fa02 	mul.w	sl, r9, r2
 80005b6:	fbca 9803 	smlal	r9, r8, sl, r3
 80005ba:	ee13 1a90 	vmov	r1, s7
 80005be:	fb8c 9c01 	smull	r9, ip, ip, r1
 80005c2:	fb09 fa02 	mul.w	sl, r9, r2
 80005c6:	fbca 9c03 	smlal	r9, ip, sl, r3
 80005ca:	fb8e 9e01 	smull	r9, lr, lr, r1
 80005ce:	fb09 fa02 	mul.w	sl, r9, r2
 80005d2:	fbca 9e03 	smlal	r9, lr, sl, r3
 80005d6:	4425      	add	r5, r4
 80005d8:	445e      	add	r6, fp
 80005da:	4467      	add	r7, ip
 80005dc:	44f0      	add	r8, lr
 80005de:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80005e2:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80005e6:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80005ea:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80005ee:	ee14 1a10 	vmov	r1, s8
 80005f2:	fb84 9401 	smull	r9, r4, r4, r1
 80005f6:	fb09 fa02 	mul.w	sl, r9, r2
 80005fa:	fbca 9403 	smlal	r9, r4, sl, r3
 80005fe:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000602:	fb09 fa02 	mul.w	sl, r9, r2
 8000606:	fbca 9b03 	smlal	r9, fp, sl, r3
 800060a:	fb8c 9c01 	smull	r9, ip, ip, r1
 800060e:	fb09 fa02 	mul.w	sl, r9, r2
 8000612:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000616:	fb8e 9e01 	smull	r9, lr, lr, r1
 800061a:	fb09 fa02 	mul.w	sl, r9, r2
 800061e:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000622:	ee15 1a90 	vmov	r1, s11
 8000626:	eba5 0504 	sub.w	r5, r5, r4
 800062a:	eba6 060b 	sub.w	r6, r6, fp
 800062e:	eba7 070c 	sub.w	r7, r7, ip
 8000632:	eba8 080e 	sub.w	r8, r8, lr
 8000636:	fb85 9501 	smull	r9, r5, r5, r1
 800063a:	fb09 fa02 	mul.w	sl, r9, r2
 800063e:	fbca 9503 	smlal	r9, r5, sl, r3
 8000642:	fb86 9601 	smull	r9, r6, r6, r1
 8000646:	fb09 fa02 	mul.w	sl, r9, r2
 800064a:	fbca 9603 	smlal	r9, r6, sl, r3
 800064e:	fb87 9701 	smull	r9, r7, r7, r1
 8000652:	fb09 fa02 	mul.w	sl, r9, r2
 8000656:	fbca 9703 	smlal	r9, r7, sl, r3
 800065a:	fb88 9801 	smull	r9, r8, r8, r1
 800065e:	fb09 fa02 	mul.w	sl, r9, r2
 8000662:	fbca 9803 	smlal	r9, r8, sl, r3
 8000666:	ee16 1a10 	vmov	r1, s12
 800066a:	fb84 9401 	smull	r9, r4, r4, r1
 800066e:	fb09 fa02 	mul.w	sl, r9, r2
 8000672:	fbca 9403 	smlal	r9, r4, sl, r3
 8000676:	fb8b 9b01 	smull	r9, fp, fp, r1
 800067a:	fb09 fa02 	mul.w	sl, r9, r2
 800067e:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000682:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000686:	fb09 fa02 	mul.w	sl, r9, r2
 800068a:	fbca 9c03 	smlal	r9, ip, sl, r3
 800068e:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000692:	fb09 fa02 	mul.w	sl, r9, r2
 8000696:	fbca 9e03 	smlal	r9, lr, sl, r3


    str.w pol1, [ptr_p, #1*distance*strincr]
 800069a:	f8c0 6240 	str.w	r6, [r0, #576]	@ 0x240
    str.w pol2, [ptr_p, #2*distance*strincr]
 800069e:	f8c0 7480 	str.w	r7, [r0, #1152]	@ 0x480
    str.w pol3, [ptr_p, #3*distance*strincr]
 80006a2:	f8c0 86c0 	str.w	r8, [r0, #1728]	@ 0x6c0
    str.w pol4, [ptr_p, #4*distance*strincr]
 80006a6:	f8c0 4900 	str.w	r4, [r0, #2304]	@ 0x900
    str.w pol5, [ptr_p, #5*distance*strincr]
 80006aa:	f8c0 bb40 	str.w	fp, [r0, #2880]	@ 0xb40
    str.w pol6, [ptr_p, #6*distance*strincr]
 80006ae:	f8c0 cd80 	str.w	ip, [r0, #3456]	@ 0xd80
    str.w pol7, [ptr_p, #7*distance*strincr]
 80006b2:	f8c0 efc0 	str.w	lr, [r0, #4032]	@ 0xfc0
    str.w pol0, [ptr_p], #strincr
 80006b6:	f840 5b04 	str.w	r5, [r0], #4
    ldr.w pol0, [ptr_p]
 80006ba:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 80006be:	f8d0 6240 	ldr.w	r6, [r0, #576]	@ 0x240
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 80006c2:	f8d0 7480 	ldr.w	r7, [r0, #1152]	@ 0x480
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 80006c6:	f8d0 86c0 	ldr.w	r8, [r0, #1728]	@ 0x6c0
    ldr.w pol4, [ptr_p, #4*distance*strincr]
 80006ca:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
    ldr.w pol5, [ptr_p, #5*distance*strincr]
 80006ce:	f8d0 bb40 	ldr.w	fp, [r0, #2880]	@ 0xb40
    ldr.w pol6, [ptr_p, #6*distance*strincr]
 80006d2:	f8d0 cd80 	ldr.w	ip, [r0, #3456]	@ 0xd80
    ldr.w pol7, [ptr_p, #7*distance*strincr]
 80006d6:	f8d0 efc0 	ldr.w	lr, [r0, #4032]	@ 0xfc0
    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 80006da:	4435      	add	r5, r6
 80006dc:	4447      	add	r7, r8
 80006de:	445c      	add	r4, fp
 80006e0:	44f4      	add	ip, lr
 80006e2:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80006e6:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80006ea:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80006ee:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80006f2:	ee11 1a10 	vmov	r1, s2
 80006f6:	fb86 9601 	smull	r9, r6, r6, r1
 80006fa:	fb09 fa02 	mul.w	sl, r9, r2
 80006fe:	fbca 9603 	smlal	r9, r6, sl, r3
 8000702:	ee11 1a90 	vmov	r1, s3
 8000706:	fb88 9801 	smull	r9, r8, r8, r1
 800070a:	fb09 fa02 	mul.w	sl, r9, r2
 800070e:	fbca 9803 	smlal	r9, r8, sl, r3
 8000712:	ee12 1a10 	vmov	r1, s4
 8000716:	fb8b 9b01 	smull	r9, fp, fp, r1
 800071a:	fb09 fa02 	mul.w	sl, r9, r2
 800071e:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000722:	ee12 1a90 	vmov	r1, s5
 8000726:	fb8e 9e01 	smull	r9, lr, lr, r1
 800072a:	fb09 fa02 	mul.w	sl, r9, r2
 800072e:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000732:	443d      	add	r5, r7
 8000734:	4446      	add	r6, r8
 8000736:	4464      	add	r4, ip
 8000738:	44f3      	add	fp, lr
 800073a:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800073e:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000742:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000746:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 800074a:	ee13 1a10 	vmov	r1, s6
 800074e:	fb87 9701 	smull	r9, r7, r7, r1
 8000752:	fb09 fa02 	mul.w	sl, r9, r2
 8000756:	fbca 9703 	smlal	r9, r7, sl, r3
 800075a:	fb88 9801 	smull	r9, r8, r8, r1
 800075e:	fb09 fa02 	mul.w	sl, r9, r2
 8000762:	fbca 9803 	smlal	r9, r8, sl, r3
 8000766:	ee13 1a90 	vmov	r1, s7
 800076a:	fb8c 9c01 	smull	r9, ip, ip, r1
 800076e:	fb09 fa02 	mul.w	sl, r9, r2
 8000772:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000776:	fb8e 9e01 	smull	r9, lr, lr, r1
 800077a:	fb09 fa02 	mul.w	sl, r9, r2
 800077e:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000782:	4425      	add	r5, r4
 8000784:	445e      	add	r6, fp
 8000786:	4467      	add	r7, ip
 8000788:	44f0      	add	r8, lr
 800078a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800078e:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000792:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000796:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800079a:	ee14 1a10 	vmov	r1, s8
 800079e:	fb84 9401 	smull	r9, r4, r4, r1
 80007a2:	fb09 fa02 	mul.w	sl, r9, r2
 80007a6:	fbca 9403 	smlal	r9, r4, sl, r3
 80007aa:	fb8b 9b01 	smull	r9, fp, fp, r1
 80007ae:	fb09 fa02 	mul.w	sl, r9, r2
 80007b2:	fbca 9b03 	smlal	r9, fp, sl, r3
 80007b6:	fb8c 9c01 	smull	r9, ip, ip, r1
 80007ba:	fb09 fa02 	mul.w	sl, r9, r2
 80007be:	fbca 9c03 	smlal	r9, ip, sl, r3
 80007c2:	fb8e 9e01 	smull	r9, lr, lr, r1
 80007c6:	fb09 fa02 	mul.w	sl, r9, r2
 80007ca:	fbca 9e03 	smlal	r9, lr, sl, r3
 80007ce:	ee15 1a90 	vmov	r1, s11
 80007d2:	eba5 0504 	sub.w	r5, r5, r4
 80007d6:	eba6 060b 	sub.w	r6, r6, fp
 80007da:	eba7 070c 	sub.w	r7, r7, ip
 80007de:	eba8 080e 	sub.w	r8, r8, lr
 80007e2:	fb85 9501 	smull	r9, r5, r5, r1
 80007e6:	fb09 fa02 	mul.w	sl, r9, r2
 80007ea:	fbca 9503 	smlal	r9, r5, sl, r3
 80007ee:	fb86 9601 	smull	r9, r6, r6, r1
 80007f2:	fb09 fa02 	mul.w	sl, r9, r2
 80007f6:	fbca 9603 	smlal	r9, r6, sl, r3
 80007fa:	fb87 9701 	smull	r9, r7, r7, r1
 80007fe:	fb09 fa02 	mul.w	sl, r9, r2
 8000802:	fbca 9703 	smlal	r9, r7, sl, r3
 8000806:	fb88 9801 	smull	r9, r8, r8, r1
 800080a:	fb09 fa02 	mul.w	sl, r9, r2
 800080e:	fbca 9803 	smlal	r9, r8, sl, r3
 8000812:	ee16 1a10 	vmov	r1, s12
 8000816:	fb84 9401 	smull	r9, r4, r4, r1
 800081a:	fb09 fa02 	mul.w	sl, r9, r2
 800081e:	fbca 9403 	smlal	r9, r4, sl, r3
 8000822:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000826:	fb09 fa02 	mul.w	sl, r9, r2
 800082a:	fbca 9b03 	smlal	r9, fp, sl, r3
 800082e:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000832:	fb09 fa02 	mul.w	sl, r9, r2
 8000836:	fbca 9c03 	smlal	r9, ip, sl, r3
 800083a:	fb8e 9e01 	smull	r9, lr, lr, r1
 800083e:	fb09 fa02 	mul.w	sl, r9, r2
 8000842:	fbca 9e03 	smlal	r9, lr, sl, r3
    str.w pol1, [ptr_p, #1*distance*strincr]
 8000846:	f8c0 6240 	str.w	r6, [r0, #576]	@ 0x240
    str.w pol2, [ptr_p, #2*distance*strincr]
 800084a:	f8c0 7480 	str.w	r7, [r0, #1152]	@ 0x480
    str.w pol3, [ptr_p, #3*distance*strincr]
 800084e:	f8c0 86c0 	str.w	r8, [r0, #1728]	@ 0x6c0
    str.w pol4, [ptr_p, #4*distance*strincr]
 8000852:	f8c0 4900 	str.w	r4, [r0, #2304]	@ 0x900
    str.w pol5, [ptr_p, #5*distance*strincr]
 8000856:	f8c0 bb40 	str.w	fp, [r0, #2880]	@ 0xb40
    str.w pol6, [ptr_p, #6*distance*strincr]
 800085a:	f8c0 cd80 	str.w	ip, [r0, #3456]	@ 0xd80
    str.w pol7, [ptr_p, #7*distance*strincr]
 800085e:	f8c0 efc0 	str.w	lr, [r0, #4032]	@ 0xfc0
    str.w pol0, [ptr_p], #strincr
 8000862:	f840 5b04 	str.w	r5, [r0], #4
    .endr

	vmov temp_l, s9
 8000866:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 800086a:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 800086e:	f47f ae4e 	bne.w	800050e <asm_intt_1+0x2ce>

    pop.w {r4-r11, pc}
 8000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000876:	bf00      	nop

08000878 <asm_intt_1_radix3>:
//extern void asm_intt_1_radix3(int32_t * Out, int32_t* zeta);
.global asm_intt_1_radix3
.type asm_intt_1_radix3,%function
.align 2
asm_intt_1_radix3:
    push.w {r4-r11, r14}
 8000878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vpush.w {s16-s24}
 800087c:	ed2d 8a09 	vpush	{s16-s24}
  	zeta0     .req R11
  	zeta1     .req R12
  	wmont     .req R14


    movw qinv, #:lower16:0x7a29f27f
 8000880:	f24f 227f 	movw	r2, #62079	@ 0xf27f
    movt qinv, #:upper16:0x7a29f27f
 8000884:	f6c7 2229 	movt	r2, #31273	@ 0x7a29
    movw q, #0x3281
 8000888:	f243 2381 	movw	r3, #12929	@ 0x3281
    movt q, #0x80
 800088c:	f2c0 0380 	movt	r3, #128	@ 0x80
    movw wmont, #0x571f // 1857311
 8000890:	f245 7e1f 	movw	lr, #22303	@ 0x571f
    movt wmont, #0x1c // 1857311
 8000894:	f2c0 0e1c 	movt	lr, #28


	movw cntr, #128
 8000898:	f240 0480 	movw	r4, #128	@ 0x80
	vmov s17, ptr_zeta
 800089c:	ee08 1a90 	vmov	s17, r1

1:
	vldm ptr_p, {s0-s8} //2-8
 80008a0:	ec90 0a09 	vldmia	r0, {s0-s8}
	vmov ptr_zeta, s17
 80008a4:	ee18 1a90 	vmov	r1, s17
	vldm ptr_zeta!, {s9-s16}
 80008a8:	ecf1 4a08 	vldmia	r1!, {s9-s16}
	vmov s17, ptr_zeta
 80008ac:	ee08 1a90 	vmov	s17, r1

	_2_layer_GS_32_radix3 pol0, pol1, pol2, pol3, temp, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, zeta0, zeta1, qinv, q, wmont, temp_l, temp_h
 80008b0:	ee14 ba90 	vmov	fp, s9
 80008b4:	ee15 ca10 	vmov	ip, s10
 80008b8:	ee10 6a10 	vmov	r6, s0
 80008bc:	ee10 7a90 	vmov	r7, s1
 80008c0:	ee11 8a10 	vmov	r8, s2
 80008c4:	eba7 0506 	sub.w	r5, r7, r6
 80008c8:	eba8 0106 	sub.w	r1, r8, r6
 80008cc:	fb85 a50e 	smull	sl, r5, r5, lr
 80008d0:	fb0a f902 	mul.w	r9, sl, r2
 80008d4:	fbc9 a503 	smlal	sl, r5, r9, r3
 80008d8:	4429      	add	r1, r5
 80008da:	443e      	add	r6, r7
 80008dc:	4446      	add	r6, r8
 80008de:	eba8 0807 	sub.w	r8, r8, r7
 80008e2:	eba8 0805 	sub.w	r8, r8, r5
 80008e6:	fb81 a10b 	smull	sl, r1, r1, fp
 80008ea:	fb0a f902 	mul.w	r9, sl, r2
 80008ee:	fbc9 a103 	smlal	sl, r1, r9, r3
 80008f2:	fb88 a80c 	smull	sl, r8, r8, ip
 80008f6:	fb0a f902 	mul.w	r9, sl, r2
 80008fa:	fbc9 a803 	smlal	sl, r8, r9, r3
 80008fe:	ee00 6a10 	vmov	s0, r6
 8000902:	ee00 1a90 	vmov	s1, r1
 8000906:	ee01 8a10 	vmov	s2, r8
 800090a:	ee15 ba90 	vmov	fp, s11
 800090e:	ee16 ca10 	vmov	ip, s12
 8000912:	ee11 6a90 	vmov	r6, s3
 8000916:	ee12 7a10 	vmov	r7, s4
 800091a:	ee12 8a90 	vmov	r8, s5
 800091e:	eba7 0506 	sub.w	r5, r7, r6
 8000922:	eba8 0106 	sub.w	r1, r8, r6
 8000926:	fb85 a50e 	smull	sl, r5, r5, lr
 800092a:	fb0a f902 	mul.w	r9, sl, r2
 800092e:	fbc9 a503 	smlal	sl, r5, r9, r3
 8000932:	4429      	add	r1, r5
 8000934:	443e      	add	r6, r7
 8000936:	4446      	add	r6, r8
 8000938:	eba8 0807 	sub.w	r8, r8, r7
 800093c:	eba8 0805 	sub.w	r8, r8, r5
 8000940:	fb81 a10b 	smull	sl, r1, r1, fp
 8000944:	fb0a f902 	mul.w	r9, sl, r2
 8000948:	fbc9 a103 	smlal	sl, r1, r9, r3
 800094c:	fb88 a80c 	smull	sl, r8, r8, ip
 8000950:	fb0a f902 	mul.w	r9, sl, r2
 8000954:	fbc9 a803 	smlal	sl, r8, r9, r3
 8000958:	ee01 6a90 	vmov	s3, r6
 800095c:	ee02 1a10 	vmov	s4, r1
 8000960:	ee02 8a90 	vmov	s5, r8
 8000964:	ee16 ba90 	vmov	fp, s13
 8000968:	ee17 ca10 	vmov	ip, s14
 800096c:	ee13 6a10 	vmov	r6, s6
 8000970:	ee13 7a90 	vmov	r7, s7
 8000974:	ee14 8a10 	vmov	r8, s8
 8000978:	eba7 0506 	sub.w	r5, r7, r6
 800097c:	eba8 0106 	sub.w	r1, r8, r6
 8000980:	fb85 a50e 	smull	sl, r5, r5, lr
 8000984:	fb0a f902 	mul.w	r9, sl, r2
 8000988:	fbc9 a503 	smlal	sl, r5, r9, r3
 800098c:	4429      	add	r1, r5
 800098e:	443e      	add	r6, r7
 8000990:	4446      	add	r6, r8
 8000992:	eba8 0807 	sub.w	r8, r8, r7
 8000996:	eba8 0805 	sub.w	r8, r8, r5
 800099a:	fb81 a10b 	smull	sl, r1, r1, fp
 800099e:	fb0a f902 	mul.w	r9, sl, r2
 80009a2:	fbc9 a103 	smlal	sl, r1, r9, r3
 80009a6:	fb88 a80c 	smull	sl, r8, r8, ip
 80009aa:	fb0a f902 	mul.w	r9, sl, r2
 80009ae:	fbc9 a803 	smlal	sl, r8, r9, r3
 80009b2:	ee03 6a10 	vmov	s6, r6
 80009b6:	ee03 1a90 	vmov	s7, r1
 80009ba:	ee04 8a10 	vmov	s8, r8
 80009be:	ee17 ba90 	vmov	fp, s15
 80009c2:	ee18 ca10 	vmov	ip, s16
 80009c6:	ee10 6a10 	vmov	r6, s0
 80009ca:	ee11 7a90 	vmov	r7, s3
 80009ce:	ee13 8a10 	vmov	r8, s6
 80009d2:	eba7 0506 	sub.w	r5, r7, r6
 80009d6:	eba8 0106 	sub.w	r1, r8, r6
 80009da:	fb85 a50e 	smull	sl, r5, r5, lr
 80009de:	fb0a f902 	mul.w	r9, sl, r2
 80009e2:	fbc9 a503 	smlal	sl, r5, r9, r3
 80009e6:	4429      	add	r1, r5
 80009e8:	443e      	add	r6, r7
 80009ea:	4446      	add	r6, r8
 80009ec:	eba8 0807 	sub.w	r8, r8, r7
 80009f0:	eba8 0805 	sub.w	r8, r8, r5
 80009f4:	fb81 a10b 	smull	sl, r1, r1, fp
 80009f8:	fb0a f902 	mul.w	r9, sl, r2
 80009fc:	fbc9 a103 	smlal	sl, r1, r9, r3
 8000a00:	fb88 a80c 	smull	sl, r8, r8, ip
 8000a04:	fb0a f902 	mul.w	r9, sl, r2
 8000a08:	fbc9 a803 	smlal	sl, r8, r9, r3
 8000a0c:	ee00 6a10 	vmov	s0, r6
 8000a10:	ee01 1a90 	vmov	s3, r1
 8000a14:	ee03 8a10 	vmov	s6, r8
 8000a18:	ee10 6a90 	vmov	r6, s1
 8000a1c:	ee12 7a10 	vmov	r7, s4
 8000a20:	ee13 8a90 	vmov	r8, s7
 8000a24:	eba7 0506 	sub.w	r5, r7, r6
 8000a28:	eba8 0106 	sub.w	r1, r8, r6
 8000a2c:	fb85 a50e 	smull	sl, r5, r5, lr
 8000a30:	fb0a f902 	mul.w	r9, sl, r2
 8000a34:	fbc9 a503 	smlal	sl, r5, r9, r3
 8000a38:	4429      	add	r1, r5
 8000a3a:	443e      	add	r6, r7
 8000a3c:	4446      	add	r6, r8
 8000a3e:	eba8 0807 	sub.w	r8, r8, r7
 8000a42:	eba8 0805 	sub.w	r8, r8, r5
 8000a46:	fb81 a10b 	smull	sl, r1, r1, fp
 8000a4a:	fb0a f902 	mul.w	r9, sl, r2
 8000a4e:	fbc9 a103 	smlal	sl, r1, r9, r3
 8000a52:	fb88 a80c 	smull	sl, r8, r8, ip
 8000a56:	fb0a f902 	mul.w	r9, sl, r2
 8000a5a:	fbc9 a803 	smlal	sl, r8, r9, r3
 8000a5e:	ee00 6a90 	vmov	s1, r6
 8000a62:	ee02 1a10 	vmov	s4, r1
 8000a66:	ee03 8a90 	vmov	s7, r8
 8000a6a:	ee11 6a10 	vmov	r6, s2
 8000a6e:	ee12 7a90 	vmov	r7, s5
 8000a72:	ee14 8a10 	vmov	r8, s8
 8000a76:	eba7 0506 	sub.w	r5, r7, r6
 8000a7a:	eba8 0106 	sub.w	r1, r8, r6
 8000a7e:	fb85 a50e 	smull	sl, r5, r5, lr
 8000a82:	fb0a f902 	mul.w	r9, sl, r2
 8000a86:	fbc9 a503 	smlal	sl, r5, r9, r3
 8000a8a:	4429      	add	r1, r5
 8000a8c:	443e      	add	r6, r7
 8000a8e:	4446      	add	r6, r8
 8000a90:	eba8 0807 	sub.w	r8, r8, r7
 8000a94:	eba8 0805 	sub.w	r8, r8, r5
 8000a98:	fb81 a10b 	smull	sl, r1, r1, fp
 8000a9c:	fb0a f902 	mul.w	r9, sl, r2
 8000aa0:	fbc9 a103 	smlal	sl, r1, r9, r3
 8000aa4:	fb88 a80c 	smull	sl, r8, r8, ip
 8000aa8:	fb0a f902 	mul.w	r9, sl, r2
 8000aac:	fbc9 a803 	smlal	sl, r8, r9, r3
 8000ab0:	ee01 6a10 	vmov	s2, r6
 8000ab4:	ee02 1a90 	vmov	s5, r1
 8000ab8:	ee04 8a10 	vmov	s8, r8

	vmov.w pol0, s1
 8000abc:	ee10 5a90 	vmov	r5, s1
	vmov.w pol1, s2
 8000ac0:	ee11 6a10 	vmov	r6, s2
	vmov.w pol2, s3
 8000ac4:	ee11 7a90 	vmov	r7, s3
    str.w pol0, [ptr_p, #4]
 8000ac8:	f8c0 5004 	str.w	r5, [r0, #4]
    str.w pol1, [ptr_p, #8]
 8000acc:	f8c0 6008 	str.w	r6, [r0, #8]
    str.w pol2, [ptr_p, #12]
 8000ad0:	f8c0 700c 	str.w	r7, [r0, #12]

    vmov.w pol0, s4
 8000ad4:	ee12 5a10 	vmov	r5, s4
	vmov.w pol1, s5
 8000ad8:	ee12 6a90 	vmov	r6, s5
	vmov.w pol2, s6
 8000adc:	ee13 7a10 	vmov	r7, s6
    str.w pol0, [ptr_p, #16]
 8000ae0:	f8c0 5010 	str.w	r5, [r0, #16]
    str.w pol1, [ptr_p, #20]
 8000ae4:	f8c0 6014 	str.w	r6, [r0, #20]
    str.w pol2, [ptr_p, #24]
 8000ae8:	f8c0 7018 	str.w	r7, [r0, #24]

    vmov.w pol0, s7
 8000aec:	ee13 5a90 	vmov	r5, s7
	vmov.w pol1, s8
 8000af0:	ee14 6a10 	vmov	r6, s8
	vmov.w pol2, s0
 8000af4:	ee10 7a10 	vmov	r7, s0
    str.w pol0, [ptr_p, #28]
 8000af8:	f8c0 501c 	str.w	r5, [r0, #28]
    str.w pol1, [ptr_p, #32]
 8000afc:	f8c0 6020 	str.w	r6, [r0, #32]
    str.w pol2, [ptr_p], #36
 8000b00:	f840 7b24 	str.w	r7, [r0], #36

	subs cntr, #1
 8000b04:	3c01      	subs	r4, #1
    bne.w 1b
 8000b06:	f47f aecb 	bne.w	80008a0 <asm_intt_1_radix3+0x28>

	vpop.w {s16-s24}
 8000b0a:	ecbd 8a09 	vpop	{s16-s24}
    pop.w {r4-r11, pc}
 8000b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b12:	bf00      	nop

08000b14 <asm_intt_3>:
// void asm_intt_3(int32_t * Out, int32_t* zeta);
.global asm_intt_3
.type asm_intt_3,%function
.align 2
asm_intt_3:
    push.w {r4-r11, r14}
 8000b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14


    movw qinv, #:lower16:0x83fc21ff
 8000b18:	f242 12ff 	movw	r2, #8703	@ 0x21ff
    movt qinv, #:upper16:0x83fc21ff
 8000b1c:	f2c8 32fc 	movt	r2, #33788	@ 0x83fc
    movw q, #0x2201
 8000b20:	f242 2301 	movw	r3, #8705	@ 0x2201
    movt q, #0x80
 8000b24:	f2c0 0380 	movt	r3, #128	@ 0x80


	vmov s0, ptr_zeta
 8000b28:	ee00 1a10 	vmov	s0, r1
//stage 1 - 3
	.equ distance, 3	//3*8 = 24
	.equ strincr, 4	//3*8 = 24
	add.w temp_l, ptr_p, #6144 // 8 iterations
 8000b2c:	f500 5ac0 	add.w	sl, r0, #6144	@ 0x1800
  	vmov s9, temp_l
 8000b30:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr // 24 iterations
 8000b34:	f100 0a0c 	add.w	sl, r0, #12
    vmov s10, temp_l
 8000b38:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8000b3c:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 8000b40:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 8000b44:	ee00 1a10 	vmov	s0, r1

	  2:
		ldr.w pol0, [ptr_p]
 8000b48:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000b4c:	f8d0 600c 	ldr.w	r6, [r0, #12]
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000b50:	f8d0 7018 	ldr.w	r7, [r0, #24]
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000b54:	f8d0 8024 	ldr.w	r8, [r0, #36]	@ 0x24
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8000b58:	f8d0 4030 	ldr.w	r4, [r0, #48]	@ 0x30
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8000b5c:	f8d0 b03c 	ldr.w	fp, [r0, #60]	@ 0x3c
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8000b60:	f8d0 c048 	ldr.w	ip, [r0, #72]	@ 0x48
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8000b64:	f8d0 e054 	ldr.w	lr, [r0, #84]	@ 0x54

    	_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000b68:	4435      	add	r5, r6
 8000b6a:	4447      	add	r7, r8
 8000b6c:	445c      	add	r4, fp
 8000b6e:	44f4      	add	ip, lr
 8000b70:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000b74:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000b78:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000b7c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000b80:	ee11 1a10 	vmov	r1, s2
 8000b84:	fb86 9601 	smull	r9, r6, r6, r1
 8000b88:	fb09 fa02 	mul.w	sl, r9, r2
 8000b8c:	fbca 9603 	smlal	r9, r6, sl, r3
 8000b90:	ee11 1a90 	vmov	r1, s3
 8000b94:	fb88 9801 	smull	r9, r8, r8, r1
 8000b98:	fb09 fa02 	mul.w	sl, r9, r2
 8000b9c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000ba0:	ee12 1a10 	vmov	r1, s4
 8000ba4:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000ba8:	fb09 fa02 	mul.w	sl, r9, r2
 8000bac:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000bb0:	ee12 1a90 	vmov	r1, s5
 8000bb4:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000bb8:	fb09 fa02 	mul.w	sl, r9, r2
 8000bbc:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000bc0:	443d      	add	r5, r7
 8000bc2:	4446      	add	r6, r8
 8000bc4:	4464      	add	r4, ip
 8000bc6:	44f3      	add	fp, lr
 8000bc8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000bcc:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000bd0:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000bd4:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000bd8:	ee13 1a10 	vmov	r1, s6
 8000bdc:	fb87 9701 	smull	r9, r7, r7, r1
 8000be0:	fb09 fa02 	mul.w	sl, r9, r2
 8000be4:	fbca 9703 	smlal	r9, r7, sl, r3
 8000be8:	fb88 9801 	smull	r9, r8, r8, r1
 8000bec:	fb09 fa02 	mul.w	sl, r9, r2
 8000bf0:	fbca 9803 	smlal	r9, r8, sl, r3
 8000bf4:	ee13 1a90 	vmov	r1, s7
 8000bf8:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000bfc:	fb09 fa02 	mul.w	sl, r9, r2
 8000c00:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000c04:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000c08:	fb09 fa02 	mul.w	sl, r9, r2
 8000c0c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000c10:	4425      	add	r5, r4
 8000c12:	445e      	add	r6, fp
 8000c14:	4467      	add	r7, ip
 8000c16:	44f0      	add	r8, lr
 8000c18:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000c1c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000c20:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000c24:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000c28:	ee14 1a10 	vmov	r1, s8
 8000c2c:	fb84 9401 	smull	r9, r4, r4, r1
 8000c30:	fb09 fa02 	mul.w	sl, r9, r2
 8000c34:	fbca 9403 	smlal	r9, r4, sl, r3
 8000c38:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000c3c:	fb09 fa02 	mul.w	sl, r9, r2
 8000c40:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000c44:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000c48:	fb09 fa02 	mul.w	sl, r9, r2
 8000c4c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000c50:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000c54:	fb09 fa02 	mul.w	sl, r9, r2
 8000c58:	fbca 9e03 	smlal	r9, lr, sl, r3

    	str.w pol1, [ptr_p, #1*distance*strincr]
 8000c5c:	f8c0 600c 	str.w	r6, [r0, #12]
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8000c60:	f8c0 7018 	str.w	r7, [r0, #24]
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8000c64:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8000c68:	f8c0 4030 	str.w	r4, [r0, #48]	@ 0x30
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8000c6c:	f8c0 b03c 	str.w	fp, [r0, #60]	@ 0x3c
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8000c70:	f8c0 c048 	str.w	ip, [r0, #72]	@ 0x48
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8000c74:	f8c0 e054 	str.w	lr, [r0, #84]	@ 0x54
    	str.w pol0, [ptr_p], #strincr
 8000c78:	f840 5b04 	str.w	r5, [r0], #4

		vmov temp_l, s10
 8000c7c:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8000c80:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8000c84:	f47f af60 	bne.w	8000b48 <asm_intt_3+0x34>

	add.w ptr_p, #21*strincr //next ring index-0 : 3 + 21 = 24
 8000c88:	f100 0054 	add.w	r0, r0, #84	@ 0x54
    vmov temp_l, s9
 8000c8c:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8000c90:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8000c94:	f47f af4e 	bne.w	8000b34 <asm_intt_3+0x20>

    sub ptr_p, #6144
 8000c98:	f5a0 50c0 	sub.w	r0, r0, #6144	@ 0x1800


//stage 4 - 6
	.equ distance, 24	//24*8 = 192
	add.w temp_l, ptr_p, #6144 // 8 iterations
 8000c9c:	f500 5ac0 	add.w	sl, r0, #6144	@ 0x1800
  	vmov s9, temp_l
 8000ca0:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr // 24 iterations
 8000ca4:	f100 0a60 	add.w	sl, r0, #96	@ 0x60
    vmov s10, temp_l
 8000ca8:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8000cac:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 8000cb0:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 8000cb4:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 8000cb8:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000cbc:	f8d0 6060 	ldr.w	r6, [r0, #96]	@ 0x60
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000cc0:	f8d0 70c0 	ldr.w	r7, [r0, #192]	@ 0xc0
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000cc4:	f8d0 8120 	ldr.w	r8, [r0, #288]	@ 0x120
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8000cc8:	f8d0 4180 	ldr.w	r4, [r0, #384]	@ 0x180
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8000ccc:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	@ 0x1e0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8000cd0:	f8d0 c240 	ldr.w	ip, [r0, #576]	@ 0x240
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8000cd4:	f8d0 e2a0 	ldr.w	lr, [r0, #672]	@ 0x2a0

    	_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000cd8:	4435      	add	r5, r6
 8000cda:	4447      	add	r7, r8
 8000cdc:	445c      	add	r4, fp
 8000cde:	44f4      	add	ip, lr
 8000ce0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000ce4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000ce8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000cec:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000cf0:	ee11 1a10 	vmov	r1, s2
 8000cf4:	fb86 9601 	smull	r9, r6, r6, r1
 8000cf8:	fb09 fa02 	mul.w	sl, r9, r2
 8000cfc:	fbca 9603 	smlal	r9, r6, sl, r3
 8000d00:	ee11 1a90 	vmov	r1, s3
 8000d04:	fb88 9801 	smull	r9, r8, r8, r1
 8000d08:	fb09 fa02 	mul.w	sl, r9, r2
 8000d0c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000d10:	ee12 1a10 	vmov	r1, s4
 8000d14:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000d18:	fb09 fa02 	mul.w	sl, r9, r2
 8000d1c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000d20:	ee12 1a90 	vmov	r1, s5
 8000d24:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000d28:	fb09 fa02 	mul.w	sl, r9, r2
 8000d2c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000d30:	443d      	add	r5, r7
 8000d32:	4446      	add	r6, r8
 8000d34:	4464      	add	r4, ip
 8000d36:	44f3      	add	fp, lr
 8000d38:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000d3c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000d40:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000d44:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000d48:	ee13 1a10 	vmov	r1, s6
 8000d4c:	fb87 9701 	smull	r9, r7, r7, r1
 8000d50:	fb09 fa02 	mul.w	sl, r9, r2
 8000d54:	fbca 9703 	smlal	r9, r7, sl, r3
 8000d58:	fb88 9801 	smull	r9, r8, r8, r1
 8000d5c:	fb09 fa02 	mul.w	sl, r9, r2
 8000d60:	fbca 9803 	smlal	r9, r8, sl, r3
 8000d64:	ee13 1a90 	vmov	r1, s7
 8000d68:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000d6c:	fb09 fa02 	mul.w	sl, r9, r2
 8000d70:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000d74:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000d78:	fb09 fa02 	mul.w	sl, r9, r2
 8000d7c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000d80:	4425      	add	r5, r4
 8000d82:	445e      	add	r6, fp
 8000d84:	4467      	add	r7, ip
 8000d86:	44f0      	add	r8, lr
 8000d88:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000d8c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000d90:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000d94:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000d98:	ee14 1a10 	vmov	r1, s8
 8000d9c:	fb84 9401 	smull	r9, r4, r4, r1
 8000da0:	fb09 fa02 	mul.w	sl, r9, r2
 8000da4:	fbca 9403 	smlal	r9, r4, sl, r3
 8000da8:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000dac:	fb09 fa02 	mul.w	sl, r9, r2
 8000db0:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000db4:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000db8:	fb09 fa02 	mul.w	sl, r9, r2
 8000dbc:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000dc0:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000dc4:	fb09 fa02 	mul.w	sl, r9, r2
 8000dc8:	fbca 9e03 	smlal	r9, lr, sl, r3


    	str.w pol1, [ptr_p, #1*distance*strincr]
 8000dcc:	f8c0 6060 	str.w	r6, [r0, #96]	@ 0x60
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8000dd0:	f8c0 70c0 	str.w	r7, [r0, #192]	@ 0xc0
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8000dd4:	f8c0 8120 	str.w	r8, [r0, #288]	@ 0x120
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8000dd8:	f8c0 4180 	str.w	r4, [r0, #384]	@ 0x180
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8000ddc:	f8c0 b1e0 	str.w	fp, [r0, #480]	@ 0x1e0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8000de0:	f8c0 c240 	str.w	ip, [r0, #576]	@ 0x240
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8000de4:	f8c0 e2a0 	str.w	lr, [r0, #672]	@ 0x2a0
    	str.w pol0, [ptr_p], #strincr
 8000de8:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8000dec:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000df0:	f8d0 6060 	ldr.w	r6, [r0, #96]	@ 0x60
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000df4:	f8d0 70c0 	ldr.w	r7, [r0, #192]	@ 0xc0
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000df8:	f8d0 8120 	ldr.w	r8, [r0, #288]	@ 0x120
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8000dfc:	f8d0 4180 	ldr.w	r4, [r0, #384]	@ 0x180
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8000e00:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	@ 0x1e0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8000e04:	f8d0 c240 	ldr.w	ip, [r0, #576]	@ 0x240
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8000e08:	f8d0 e2a0 	ldr.w	lr, [r0, #672]	@ 0x2a0
    	_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8000e0c:	4435      	add	r5, r6
 8000e0e:	4447      	add	r7, r8
 8000e10:	445c      	add	r4, fp
 8000e12:	44f4      	add	ip, lr
 8000e14:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000e18:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000e1c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000e20:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000e24:	ee11 1a10 	vmov	r1, s2
 8000e28:	fb86 9601 	smull	r9, r6, r6, r1
 8000e2c:	fb09 fa02 	mul.w	sl, r9, r2
 8000e30:	fbca 9603 	smlal	r9, r6, sl, r3
 8000e34:	ee11 1a90 	vmov	r1, s3
 8000e38:	fb88 9801 	smull	r9, r8, r8, r1
 8000e3c:	fb09 fa02 	mul.w	sl, r9, r2
 8000e40:	fbca 9803 	smlal	r9, r8, sl, r3
 8000e44:	ee12 1a10 	vmov	r1, s4
 8000e48:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000e4c:	fb09 fa02 	mul.w	sl, r9, r2
 8000e50:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000e54:	ee12 1a90 	vmov	r1, s5
 8000e58:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000e5c:	fb09 fa02 	mul.w	sl, r9, r2
 8000e60:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000e64:	443d      	add	r5, r7
 8000e66:	4446      	add	r6, r8
 8000e68:	4464      	add	r4, ip
 8000e6a:	44f3      	add	fp, lr
 8000e6c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000e70:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000e74:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000e78:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000e7c:	ee13 1a10 	vmov	r1, s6
 8000e80:	fb87 9701 	smull	r9, r7, r7, r1
 8000e84:	fb09 fa02 	mul.w	sl, r9, r2
 8000e88:	fbca 9703 	smlal	r9, r7, sl, r3
 8000e8c:	fb88 9801 	smull	r9, r8, r8, r1
 8000e90:	fb09 fa02 	mul.w	sl, r9, r2
 8000e94:	fbca 9803 	smlal	r9, r8, sl, r3
 8000e98:	ee13 1a90 	vmov	r1, s7
 8000e9c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000ea0:	fb09 fa02 	mul.w	sl, r9, r2
 8000ea4:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000ea8:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000eac:	fb09 fa02 	mul.w	sl, r9, r2
 8000eb0:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000eb4:	4425      	add	r5, r4
 8000eb6:	445e      	add	r6, fp
 8000eb8:	4467      	add	r7, ip
 8000eba:	44f0      	add	r8, lr
 8000ebc:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000ec0:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000ec4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000ec8:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000ecc:	ee14 1a10 	vmov	r1, s8
 8000ed0:	fb84 9401 	smull	r9, r4, r4, r1
 8000ed4:	fb09 fa02 	mul.w	sl, r9, r2
 8000ed8:	fbca 9403 	smlal	r9, r4, sl, r3
 8000edc:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000ee0:	fb09 fa02 	mul.w	sl, r9, r2
 8000ee4:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000ee8:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000eec:	fb09 fa02 	mul.w	sl, r9, r2
 8000ef0:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000ef4:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000ef8:	fb09 fa02 	mul.w	sl, r9, r2
 8000efc:	fbca 9e03 	smlal	r9, lr, sl, r3
    	str.w pol1, [ptr_p, #1*distance*strincr]
 8000f00:	f8c0 6060 	str.w	r6, [r0, #96]	@ 0x60
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8000f04:	f8c0 70c0 	str.w	r7, [r0, #192]	@ 0xc0
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8000f08:	f8c0 8120 	str.w	r8, [r0, #288]	@ 0x120
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8000f0c:	f8c0 4180 	str.w	r4, [r0, #384]	@ 0x180
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8000f10:	f8c0 b1e0 	str.w	fp, [r0, #480]	@ 0x1e0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8000f14:	f8c0 c240 	str.w	ip, [r0, #576]	@ 0x240
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8000f18:	f8c0 e2a0 	str.w	lr, [r0, #672]	@ 0x2a0
    	str.w pol0, [ptr_p], #strincr
 8000f1c:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 8000f20:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8000f24:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8000f28:	f47f aec6 	bne.w	8000cb8 <asm_intt_3+0x1a4>

	add.w ptr_p, #168*strincr //next ring index-0 : 24 + 168 = 192
 8000f2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
    vmov temp_l, s9
 8000f30:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8000f34:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8000f38:	f47f aeb4 	bne.w	8000ca4 <asm_intt_3+0x190>

    sub ptr_p, #6144
 8000f3c:	f5a0 50c0 	sub.w	r0, r0, #6144	@ 0x1800

//stage 7 - 9
	.equ distance, 192 //1536/8
  	.equ strincr, 4

	vmov ptr_zeta, s0
 8000f40:	ee10 1a10 	vmov	r1, s0
  	vldm ptr_zeta!, {s2-s8}
 8000f44:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 8000f48:	ee00 1a10 	vmov	s0, r1

  	movw temp_l, #0x57f4
 8000f4c:	f245 7af4 	movw	sl, #22516	@ 0x57f4
    movt temp_l, #0x22
 8000f50:	f2c0 0a22 	movt	sl, #34	@ 0x22
    vmov s11, temp_l //F1= 2250740
 8000f54:	ee05 aa90 	vmov	s11, sl
    movw temp_l, #0xafe8
 8000f58:	f64a 7ae8 	movw	sl, #45032	@ 0xafe8
    movt temp_l, #0x44
 8000f5c:	f2c0 0a44 	movt	sl, #68	@ 0x44
    vmov s12, temp_l //F2= 4501480
 8000f60:	ee06 aa10 	vmov	s12, sl

  	add.w temp_l, ptr_p, #distance*strincr // 144 iterations : 8*192 = 1536
 8000f64:	f500 7a40 	add.w	sl, r0, #768	@ 0x300
  	vmov s9, temp_l
 8000f68:	ee04 aa90 	vmov	s9, sl

	add.w temp_l, ptr_p, #4*distance*strincr
 8000f6c:	f500 6a40 	add.w	sl, r0, #3072	@ 0xc00
	vmov s14, temp_l
 8000f70:	ee07 aa10 	vmov	s14, sl
  1:
    .rept 2
    vmov temp_l, s14
 8000f74:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8000f78:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8000f7c:	f8d0 6300 	ldr.w	r6, [r0, #768]	@ 0x300
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8000f80:	f8d0 7600 	ldr.w	r7, [r0, #1536]	@ 0x600
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8000f84:	f8d0 8900 	ldr.w	r8, [r0, #2304]	@ 0x900
    ldr.w pol4, [temp_l]
 8000f88:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8000f8c:	f8da b300 	ldr.w	fp, [sl, #768]	@ 0x300
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8000f90:	f8da c600 	ldr.w	ip, [sl, #1536]	@ 0x600
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8000f94:	f8da e900 	ldr.w	lr, [sl, #2304]	@ 0x900

    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 8000f98:	4435      	add	r5, r6
 8000f9a:	4447      	add	r7, r8
 8000f9c:	445c      	add	r4, fp
 8000f9e:	44f4      	add	ip, lr
 8000fa0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000fa4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000fa8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000fac:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000fb0:	ee11 1a10 	vmov	r1, s2
 8000fb4:	fb86 9601 	smull	r9, r6, r6, r1
 8000fb8:	fb09 fa02 	mul.w	sl, r9, r2
 8000fbc:	fbca 9603 	smlal	r9, r6, sl, r3
 8000fc0:	ee11 1a90 	vmov	r1, s3
 8000fc4:	fb88 9801 	smull	r9, r8, r8, r1
 8000fc8:	fb09 fa02 	mul.w	sl, r9, r2
 8000fcc:	fbca 9803 	smlal	r9, r8, sl, r3
 8000fd0:	ee12 1a10 	vmov	r1, s4
 8000fd4:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000fd8:	fb09 fa02 	mul.w	sl, r9, r2
 8000fdc:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000fe0:	ee12 1a90 	vmov	r1, s5
 8000fe4:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000fe8:	fb09 fa02 	mul.w	sl, r9, r2
 8000fec:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000ff0:	443d      	add	r5, r7
 8000ff2:	4446      	add	r6, r8
 8000ff4:	4464      	add	r4, ip
 8000ff6:	44f3      	add	fp, lr
 8000ff8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000ffc:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001000:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001004:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001008:	ee13 1a10 	vmov	r1, s6
 800100c:	fb87 9701 	smull	r9, r7, r7, r1
 8001010:	fb09 fa02 	mul.w	sl, r9, r2
 8001014:	fbca 9703 	smlal	r9, r7, sl, r3
 8001018:	fb88 9801 	smull	r9, r8, r8, r1
 800101c:	fb09 fa02 	mul.w	sl, r9, r2
 8001020:	fbca 9803 	smlal	r9, r8, sl, r3
 8001024:	ee13 1a90 	vmov	r1, s7
 8001028:	fb8c 9c01 	smull	r9, ip, ip, r1
 800102c:	fb09 fa02 	mul.w	sl, r9, r2
 8001030:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001034:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001038:	fb09 fa02 	mul.w	sl, r9, r2
 800103c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001040:	4425      	add	r5, r4
 8001042:	445e      	add	r6, fp
 8001044:	4467      	add	r7, ip
 8001046:	44f0      	add	r8, lr
 8001048:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800104c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001050:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001054:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001058:	ee14 1a10 	vmov	r1, s8
 800105c:	fb84 9401 	smull	r9, r4, r4, r1
 8001060:	fb09 fa02 	mul.w	sl, r9, r2
 8001064:	fbca 9403 	smlal	r9, r4, sl, r3
 8001068:	fb8b 9b01 	smull	r9, fp, fp, r1
 800106c:	fb09 fa02 	mul.w	sl, r9, r2
 8001070:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001074:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001078:	fb09 fa02 	mul.w	sl, r9, r2
 800107c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001080:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001084:	fb09 fa02 	mul.w	sl, r9, r2
 8001088:	fbca 9e03 	smlal	r9, lr, sl, r3
 800108c:	ee15 1a90 	vmov	r1, s11
 8001090:	eba5 0504 	sub.w	r5, r5, r4
 8001094:	eba6 060b 	sub.w	r6, r6, fp
 8001098:	eba7 070c 	sub.w	r7, r7, ip
 800109c:	eba8 080e 	sub.w	r8, r8, lr
 80010a0:	fb85 9501 	smull	r9, r5, r5, r1
 80010a4:	fb09 fa02 	mul.w	sl, r9, r2
 80010a8:	fbca 9503 	smlal	r9, r5, sl, r3
 80010ac:	fb86 9601 	smull	r9, r6, r6, r1
 80010b0:	fb09 fa02 	mul.w	sl, r9, r2
 80010b4:	fbca 9603 	smlal	r9, r6, sl, r3
 80010b8:	fb87 9701 	smull	r9, r7, r7, r1
 80010bc:	fb09 fa02 	mul.w	sl, r9, r2
 80010c0:	fbca 9703 	smlal	r9, r7, sl, r3
 80010c4:	fb88 9801 	smull	r9, r8, r8, r1
 80010c8:	fb09 fa02 	mul.w	sl, r9, r2
 80010cc:	fbca 9803 	smlal	r9, r8, sl, r3
 80010d0:	ee16 1a10 	vmov	r1, s12
 80010d4:	fb84 9401 	smull	r9, r4, r4, r1
 80010d8:	fb09 fa02 	mul.w	sl, r9, r2
 80010dc:	fbca 9403 	smlal	r9, r4, sl, r3
 80010e0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80010e4:	fb09 fa02 	mul.w	sl, r9, r2
 80010e8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80010ec:	fb8c 9c01 	smull	r9, ip, ip, r1
 80010f0:	fb09 fa02 	mul.w	sl, r9, r2
 80010f4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80010f8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80010fc:	fb09 fa02 	mul.w	sl, r9, r2
 8001100:	fbca 9e03 	smlal	r9, lr, sl, r3

	vmov temp_l, s14
 8001104:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 8001108:	f8c0 6300 	str.w	r6, [r0, #768]	@ 0x300
    str.w pol2, [ptr_p, #2*distance*strincr]
 800110c:	f8c0 7600 	str.w	r7, [r0, #1536]	@ 0x600
    str.w pol3, [ptr_p, #3*distance*strincr]
 8001110:	f8c0 8900 	str.w	r8, [r0, #2304]	@ 0x900
    str.w pol0, [ptr_p], #strincr
 8001114:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8001118:	f8ca b300 	str.w	fp, [sl, #768]	@ 0x300
    str.w pol6, [temp_l, #2*distance*strincr]
 800111c:	f8ca c600 	str.w	ip, [sl, #1536]	@ 0x600
    str.w pol7, [temp_l, #3*distance*strincr]
 8001120:	f8ca e900 	str.w	lr, [sl, #2304]	@ 0x900
    str.w pol4, [temp_l], #strincr
 8001124:	f84a 4b04 	str.w	r4, [sl], #4

	vmov s14, temp_l
 8001128:	ee07 aa10 	vmov	s14, sl
    vmov temp_l, s14
 800112c:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8001130:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8001134:	f8d0 6300 	ldr.w	r6, [r0, #768]	@ 0x300
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8001138:	f8d0 7600 	ldr.w	r7, [r0, #1536]	@ 0x600
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 800113c:	f8d0 8900 	ldr.w	r8, [r0, #2304]	@ 0x900
    ldr.w pol4, [temp_l]
 8001140:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8001144:	f8da b300 	ldr.w	fp, [sl, #768]	@ 0x300
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8001148:	f8da c600 	ldr.w	ip, [sl, #1536]	@ 0x600
    ldr.w pol7, [temp_l, #3*distance*strincr]
 800114c:	f8da e900 	ldr.w	lr, [sl, #2304]	@ 0x900
    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 8001150:	4435      	add	r5, r6
 8001152:	4447      	add	r7, r8
 8001154:	445c      	add	r4, fp
 8001156:	44f4      	add	ip, lr
 8001158:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 800115c:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001160:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001164:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001168:	ee11 1a10 	vmov	r1, s2
 800116c:	fb86 9601 	smull	r9, r6, r6, r1
 8001170:	fb09 fa02 	mul.w	sl, r9, r2
 8001174:	fbca 9603 	smlal	r9, r6, sl, r3
 8001178:	ee11 1a90 	vmov	r1, s3
 800117c:	fb88 9801 	smull	r9, r8, r8, r1
 8001180:	fb09 fa02 	mul.w	sl, r9, r2
 8001184:	fbca 9803 	smlal	r9, r8, sl, r3
 8001188:	ee12 1a10 	vmov	r1, s4
 800118c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001190:	fb09 fa02 	mul.w	sl, r9, r2
 8001194:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001198:	ee12 1a90 	vmov	r1, s5
 800119c:	fb8e 9e01 	smull	r9, lr, lr, r1
 80011a0:	fb09 fa02 	mul.w	sl, r9, r2
 80011a4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80011a8:	443d      	add	r5, r7
 80011aa:	4446      	add	r6, r8
 80011ac:	4464      	add	r4, ip
 80011ae:	44f3      	add	fp, lr
 80011b0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80011b4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80011b8:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80011bc:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80011c0:	ee13 1a10 	vmov	r1, s6
 80011c4:	fb87 9701 	smull	r9, r7, r7, r1
 80011c8:	fb09 fa02 	mul.w	sl, r9, r2
 80011cc:	fbca 9703 	smlal	r9, r7, sl, r3
 80011d0:	fb88 9801 	smull	r9, r8, r8, r1
 80011d4:	fb09 fa02 	mul.w	sl, r9, r2
 80011d8:	fbca 9803 	smlal	r9, r8, sl, r3
 80011dc:	ee13 1a90 	vmov	r1, s7
 80011e0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80011e4:	fb09 fa02 	mul.w	sl, r9, r2
 80011e8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80011ec:	fb8e 9e01 	smull	r9, lr, lr, r1
 80011f0:	fb09 fa02 	mul.w	sl, r9, r2
 80011f4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80011f8:	4425      	add	r5, r4
 80011fa:	445e      	add	r6, fp
 80011fc:	4467      	add	r7, ip
 80011fe:	44f0      	add	r8, lr
 8001200:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001204:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001208:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 800120c:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001210:	ee14 1a10 	vmov	r1, s8
 8001214:	fb84 9401 	smull	r9, r4, r4, r1
 8001218:	fb09 fa02 	mul.w	sl, r9, r2
 800121c:	fbca 9403 	smlal	r9, r4, sl, r3
 8001220:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001224:	fb09 fa02 	mul.w	sl, r9, r2
 8001228:	fbca 9b03 	smlal	r9, fp, sl, r3
 800122c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001230:	fb09 fa02 	mul.w	sl, r9, r2
 8001234:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001238:	fb8e 9e01 	smull	r9, lr, lr, r1
 800123c:	fb09 fa02 	mul.w	sl, r9, r2
 8001240:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001244:	ee15 1a90 	vmov	r1, s11
 8001248:	eba5 0504 	sub.w	r5, r5, r4
 800124c:	eba6 060b 	sub.w	r6, r6, fp
 8001250:	eba7 070c 	sub.w	r7, r7, ip
 8001254:	eba8 080e 	sub.w	r8, r8, lr
 8001258:	fb85 9501 	smull	r9, r5, r5, r1
 800125c:	fb09 fa02 	mul.w	sl, r9, r2
 8001260:	fbca 9503 	smlal	r9, r5, sl, r3
 8001264:	fb86 9601 	smull	r9, r6, r6, r1
 8001268:	fb09 fa02 	mul.w	sl, r9, r2
 800126c:	fbca 9603 	smlal	r9, r6, sl, r3
 8001270:	fb87 9701 	smull	r9, r7, r7, r1
 8001274:	fb09 fa02 	mul.w	sl, r9, r2
 8001278:	fbca 9703 	smlal	r9, r7, sl, r3
 800127c:	fb88 9801 	smull	r9, r8, r8, r1
 8001280:	fb09 fa02 	mul.w	sl, r9, r2
 8001284:	fbca 9803 	smlal	r9, r8, sl, r3
 8001288:	ee16 1a10 	vmov	r1, s12
 800128c:	fb84 9401 	smull	r9, r4, r4, r1
 8001290:	fb09 fa02 	mul.w	sl, r9, r2
 8001294:	fbca 9403 	smlal	r9, r4, sl, r3
 8001298:	fb8b 9b01 	smull	r9, fp, fp, r1
 800129c:	fb09 fa02 	mul.w	sl, r9, r2
 80012a0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80012a4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80012a8:	fb09 fa02 	mul.w	sl, r9, r2
 80012ac:	fbca 9c03 	smlal	r9, ip, sl, r3
 80012b0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80012b4:	fb09 fa02 	mul.w	sl, r9, r2
 80012b8:	fbca 9e03 	smlal	r9, lr, sl, r3
	vmov temp_l, s14
 80012bc:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 80012c0:	f8c0 6300 	str.w	r6, [r0, #768]	@ 0x300
    str.w pol2, [ptr_p, #2*distance*strincr]
 80012c4:	f8c0 7600 	str.w	r7, [r0, #1536]	@ 0x600
    str.w pol3, [ptr_p, #3*distance*strincr]
 80012c8:	f8c0 8900 	str.w	r8, [r0, #2304]	@ 0x900
    str.w pol0, [ptr_p], #strincr
 80012cc:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 80012d0:	f8ca b300 	str.w	fp, [sl, #768]	@ 0x300
    str.w pol6, [temp_l, #2*distance*strincr]
 80012d4:	f8ca c600 	str.w	ip, [sl, #1536]	@ 0x600
    str.w pol7, [temp_l, #3*distance*strincr]
 80012d8:	f8ca e900 	str.w	lr, [sl, #2304]	@ 0x900
    str.w pol4, [temp_l], #strincr
 80012dc:	f84a 4b04 	str.w	r4, [sl], #4
	vmov s14, temp_l
 80012e0:	ee07 aa10 	vmov	s14, sl
    .endr

	vmov temp_l, s9
 80012e4:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 80012e8:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80012ec:	f47f ae42 	bne.w	8000f74 <asm_intt_3+0x460>

    pop.w {r4-r11, pc}
 80012f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012f4 <asm_intt_5>:
// void asm_intt_5(int32_t * Out, int32_t* zeta);
.global asm_intt_5
.type asm_intt_5,%function
.align 2
asm_intt_5:
    push.w {r4-r11, r14}
 80012f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	zeta2     .req R14
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14

	movw qinv, #:lower16:0xf0803fff
 80012f8:	f643 72ff 	movw	r2, #16383	@ 0x3fff
    movt qinv, #:upper16:0xf0803fff
 80012fc:	f2cf 0280 	movt	r2, #61568	@ 0xf080
    movw q, #0x4001
 8001300:	f244 0301 	movw	r3, #16385	@ 0x4001
    movt q, #0x80
 8001304:	f2c0 0380 	movt	r3, #128	@ 0x80

vmov s0, ptr_zeta
 8001308:	ee00 1a10 	vmov	s0, r1

//stage 1 - 2
	.equ distance, 9	//36/4 = 9

	add.w temp_l, ptr_p, #9216 // 32 iterations
 800130c:	f500 5a10 	add.w	sl, r0, #9216	@ 0x2400
  	vmov s9, temp_l
 8001310:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr // 9 iterations
 8001314:	f100 0a24 	add.w	sl, r0, #36	@ 0x24
    vmov s10, temp_l
 8001318:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 800131c:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 8001320:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8001324:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 8001328:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 800132c:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 3
		ldr.w pol0, [ptr_p]
 8001330:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8001334:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8001338:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 800133c:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c

    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8001340:	4435      	add	r5, r6
 8001342:	4447      	add	r7, r8
 8001344:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001348:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800134c:	fb86 960b 	smull	r9, r6, r6, fp
 8001350:	fb09 fa02 	mul.w	sl, r9, r2
 8001354:	fbca 9603 	smlal	r9, r6, sl, r3
 8001358:	fb88 980c 	smull	r9, r8, r8, ip
 800135c:	fb09 fa02 	mul.w	sl, r9, r2
 8001360:	fbca 9803 	smlal	r9, r8, sl, r3
 8001364:	443d      	add	r5, r7
 8001366:	4446      	add	r6, r8
 8001368:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800136c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001370:	fb87 970e 	smull	r9, r7, r7, lr
 8001374:	fb09 fa02 	mul.w	sl, r9, r2
 8001378:	fbca 9703 	smlal	r9, r7, sl, r3
 800137c:	fb88 980e 	smull	r9, r8, r8, lr
 8001380:	fb09 fa02 	mul.w	sl, r9, r2
 8001384:	fbca 9803 	smlal	r9, r8, sl, r3

		str.w pol1, [ptr_p, #1*distance*strincr]
 8001388:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 800138c:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8001390:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8001394:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8001398:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 800139c:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80013a0:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80013a4:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 80013a8:	4435      	add	r5, r6
 80013aa:	4447      	add	r7, r8
 80013ac:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80013b0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80013b4:	fb86 960b 	smull	r9, r6, r6, fp
 80013b8:	fb09 fa02 	mul.w	sl, r9, r2
 80013bc:	fbca 9603 	smlal	r9, r6, sl, r3
 80013c0:	fb88 980c 	smull	r9, r8, r8, ip
 80013c4:	fb09 fa02 	mul.w	sl, r9, r2
 80013c8:	fbca 9803 	smlal	r9, r8, sl, r3
 80013cc:	443d      	add	r5, r7
 80013ce:	4446      	add	r6, r8
 80013d0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80013d4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80013d8:	fb87 970e 	smull	r9, r7, r7, lr
 80013dc:	fb09 fa02 	mul.w	sl, r9, r2
 80013e0:	fbca 9703 	smlal	r9, r7, sl, r3
 80013e4:	fb88 980e 	smull	r9, r8, r8, lr
 80013e8:	fb09 fa02 	mul.w	sl, r9, r2
 80013ec:	fbca 9803 	smlal	r9, r8, sl, r3
		str.w pol1, [ptr_p, #1*distance*strincr]
 80013f0:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80013f4:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80013f8:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 80013fc:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8001400:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8001404:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8001408:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 800140c:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_GS_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8001410:	4435      	add	r5, r6
 8001412:	4447      	add	r7, r8
 8001414:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001418:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800141c:	fb86 960b 	smull	r9, r6, r6, fp
 8001420:	fb09 fa02 	mul.w	sl, r9, r2
 8001424:	fbca 9603 	smlal	r9, r6, sl, r3
 8001428:	fb88 980c 	smull	r9, r8, r8, ip
 800142c:	fb09 fa02 	mul.w	sl, r9, r2
 8001430:	fbca 9803 	smlal	r9, r8, sl, r3
 8001434:	443d      	add	r5, r7
 8001436:	4446      	add	r6, r8
 8001438:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800143c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001440:	fb87 970e 	smull	r9, r7, r7, lr
 8001444:	fb09 fa02 	mul.w	sl, r9, r2
 8001448:	fbca 9703 	smlal	r9, r7, sl, r3
 800144c:	fb88 980e 	smull	r9, r8, r8, lr
 8001450:	fb09 fa02 	mul.w	sl, r9, r2
 8001454:	fbca 9803 	smlal	r9, r8, sl, r3
		str.w pol1, [ptr_p, #1*distance*strincr]
 8001458:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 800145c:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8001460:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8001464:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 8001468:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 800146c:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8001470:	f47f af5e 	bne.w	8001330 <asm_intt_5+0x3c>

	add.w ptr_p, #27*strincr //next ring index-0 : 9 + 27 = 36
 8001474:	f100 006c 	add.w	r0, r0, #108	@ 0x6c
    vmov temp_l, s9
 8001478:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 800147c:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8001480:	f47f af48 	bne.w	8001314 <asm_intt_5+0x20>


    sub ptr_p, #9216
 8001484:	f5a0 5010 	sub.w	r0, r0, #9216	@ 0x2400

//stage 3 - 5
	.equ distance, 36	//288/8 = 36
	add.w temp_l, ptr_p, #9216 // 1536*4 = 6144
 8001488:	f500 5a10 	add.w	sl, r0, #9216	@ 0x2400
  	vmov s9, temp_l
 800148c:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr // 24 iterations
 8001490:	f100 0a90 	add.w	sl, r0, #144	@ 0x90
    vmov s10, temp_l
 8001494:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8001498:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 800149c:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 80014a0:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 80014a4:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80014a8:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80014ac:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80014b0:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 80014b4:	f8d0 4240 	ldr.w	r4, [r0, #576]	@ 0x240
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 80014b8:	f8d0 b2d0 	ldr.w	fp, [r0, #720]	@ 0x2d0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 80014bc:	f8d0 c360 	ldr.w	ip, [r0, #864]	@ 0x360
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 80014c0:	f8d0 e3f0 	ldr.w	lr, [r0, #1008]	@ 0x3f0

    	_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80014c4:	4435      	add	r5, r6
 80014c6:	4447      	add	r7, r8
 80014c8:	445c      	add	r4, fp
 80014ca:	44f4      	add	ip, lr
 80014cc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80014d0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80014d4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80014d8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80014dc:	ee11 1a10 	vmov	r1, s2
 80014e0:	fb86 9601 	smull	r9, r6, r6, r1
 80014e4:	fb09 fa02 	mul.w	sl, r9, r2
 80014e8:	fbca 9603 	smlal	r9, r6, sl, r3
 80014ec:	ee11 1a90 	vmov	r1, s3
 80014f0:	fb88 9801 	smull	r9, r8, r8, r1
 80014f4:	fb09 fa02 	mul.w	sl, r9, r2
 80014f8:	fbca 9803 	smlal	r9, r8, sl, r3
 80014fc:	ee12 1a10 	vmov	r1, s4
 8001500:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001504:	fb09 fa02 	mul.w	sl, r9, r2
 8001508:	fbca 9b03 	smlal	r9, fp, sl, r3
 800150c:	ee12 1a90 	vmov	r1, s5
 8001510:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001514:	fb09 fa02 	mul.w	sl, r9, r2
 8001518:	fbca 9e03 	smlal	r9, lr, sl, r3
 800151c:	443d      	add	r5, r7
 800151e:	4446      	add	r6, r8
 8001520:	4464      	add	r4, ip
 8001522:	44f3      	add	fp, lr
 8001524:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001528:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800152c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001530:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001534:	ee13 1a10 	vmov	r1, s6
 8001538:	fb87 9701 	smull	r9, r7, r7, r1
 800153c:	fb09 fa02 	mul.w	sl, r9, r2
 8001540:	fbca 9703 	smlal	r9, r7, sl, r3
 8001544:	fb88 9801 	smull	r9, r8, r8, r1
 8001548:	fb09 fa02 	mul.w	sl, r9, r2
 800154c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001550:	ee13 1a90 	vmov	r1, s7
 8001554:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001558:	fb09 fa02 	mul.w	sl, r9, r2
 800155c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001560:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001564:	fb09 fa02 	mul.w	sl, r9, r2
 8001568:	fbca 9e03 	smlal	r9, lr, sl, r3
 800156c:	4425      	add	r5, r4
 800156e:	445e      	add	r6, fp
 8001570:	4467      	add	r7, ip
 8001572:	44f0      	add	r8, lr
 8001574:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001578:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800157c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001580:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001584:	ee14 1a10 	vmov	r1, s8
 8001588:	fb84 9401 	smull	r9, r4, r4, r1
 800158c:	fb09 fa02 	mul.w	sl, r9, r2
 8001590:	fbca 9403 	smlal	r9, r4, sl, r3
 8001594:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001598:	fb09 fa02 	mul.w	sl, r9, r2
 800159c:	fbca 9b03 	smlal	r9, fp, sl, r3
 80015a0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80015a4:	fb09 fa02 	mul.w	sl, r9, r2
 80015a8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80015ac:	fb8e 9e01 	smull	r9, lr, lr, r1
 80015b0:	fb09 fa02 	mul.w	sl, r9, r2
 80015b4:	fbca 9e03 	smlal	r9, lr, sl, r3


    	str.w pol1, [ptr_p, #1*distance*strincr]
 80015b8:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80015bc:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80015c0:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol4, [ptr_p, #4*distance*strincr]
 80015c4:	f8c0 4240 	str.w	r4, [r0, #576]	@ 0x240
    	str.w pol5, [ptr_p, #5*distance*strincr]
 80015c8:	f8c0 b2d0 	str.w	fp, [r0, #720]	@ 0x2d0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 80015cc:	f8c0 c360 	str.w	ip, [r0, #864]	@ 0x360
    	str.w pol7, [ptr_p, #7*distance*strincr]
 80015d0:	f8c0 e3f0 	str.w	lr, [r0, #1008]	@ 0x3f0
    	str.w pol0, [ptr_p], #strincr
 80015d4:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 80015d8:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80015dc:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80015e0:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80015e4:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 80015e8:	f8d0 4240 	ldr.w	r4, [r0, #576]	@ 0x240
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 80015ec:	f8d0 b2d0 	ldr.w	fp, [r0, #720]	@ 0x2d0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 80015f0:	f8d0 c360 	ldr.w	ip, [r0, #864]	@ 0x360
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 80015f4:	f8d0 e3f0 	ldr.w	lr, [r0, #1008]	@ 0x3f0
    	_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80015f8:	4435      	add	r5, r6
 80015fa:	4447      	add	r7, r8
 80015fc:	445c      	add	r4, fp
 80015fe:	44f4      	add	ip, lr
 8001600:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001604:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001608:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 800160c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001610:	ee11 1a10 	vmov	r1, s2
 8001614:	fb86 9601 	smull	r9, r6, r6, r1
 8001618:	fb09 fa02 	mul.w	sl, r9, r2
 800161c:	fbca 9603 	smlal	r9, r6, sl, r3
 8001620:	ee11 1a90 	vmov	r1, s3
 8001624:	fb88 9801 	smull	r9, r8, r8, r1
 8001628:	fb09 fa02 	mul.w	sl, r9, r2
 800162c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001630:	ee12 1a10 	vmov	r1, s4
 8001634:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001638:	fb09 fa02 	mul.w	sl, r9, r2
 800163c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001640:	ee12 1a90 	vmov	r1, s5
 8001644:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001648:	fb09 fa02 	mul.w	sl, r9, r2
 800164c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001650:	443d      	add	r5, r7
 8001652:	4446      	add	r6, r8
 8001654:	4464      	add	r4, ip
 8001656:	44f3      	add	fp, lr
 8001658:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800165c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001660:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001664:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001668:	ee13 1a10 	vmov	r1, s6
 800166c:	fb87 9701 	smull	r9, r7, r7, r1
 8001670:	fb09 fa02 	mul.w	sl, r9, r2
 8001674:	fbca 9703 	smlal	r9, r7, sl, r3
 8001678:	fb88 9801 	smull	r9, r8, r8, r1
 800167c:	fb09 fa02 	mul.w	sl, r9, r2
 8001680:	fbca 9803 	smlal	r9, r8, sl, r3
 8001684:	ee13 1a90 	vmov	r1, s7
 8001688:	fb8c 9c01 	smull	r9, ip, ip, r1
 800168c:	fb09 fa02 	mul.w	sl, r9, r2
 8001690:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001694:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001698:	fb09 fa02 	mul.w	sl, r9, r2
 800169c:	fbca 9e03 	smlal	r9, lr, sl, r3
 80016a0:	4425      	add	r5, r4
 80016a2:	445e      	add	r6, fp
 80016a4:	4467      	add	r7, ip
 80016a6:	44f0      	add	r8, lr
 80016a8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80016ac:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80016b0:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80016b4:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80016b8:	ee14 1a10 	vmov	r1, s8
 80016bc:	fb84 9401 	smull	r9, r4, r4, r1
 80016c0:	fb09 fa02 	mul.w	sl, r9, r2
 80016c4:	fbca 9403 	smlal	r9, r4, sl, r3
 80016c8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80016cc:	fb09 fa02 	mul.w	sl, r9, r2
 80016d0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80016d4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80016d8:	fb09 fa02 	mul.w	sl, r9, r2
 80016dc:	fbca 9c03 	smlal	r9, ip, sl, r3
 80016e0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80016e4:	fb09 fa02 	mul.w	sl, r9, r2
 80016e8:	fbca 9e03 	smlal	r9, lr, sl, r3
    	str.w pol1, [ptr_p, #1*distance*strincr]
 80016ec:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80016f0:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80016f4:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol4, [ptr_p, #4*distance*strincr]
 80016f8:	f8c0 4240 	str.w	r4, [r0, #576]	@ 0x240
    	str.w pol5, [ptr_p, #5*distance*strincr]
 80016fc:	f8c0 b2d0 	str.w	fp, [r0, #720]	@ 0x2d0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8001700:	f8c0 c360 	str.w	ip, [r0, #864]	@ 0x360
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8001704:	f8c0 e3f0 	str.w	lr, [r0, #1008]	@ 0x3f0
    	str.w pol0, [ptr_p], #strincr
 8001708:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 800170c:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8001710:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8001714:	f47f aec6 	bne.w	80014a4 <asm_intt_5+0x1b0>

	add.w ptr_p, #252*strincr //next ring index-0 : 36 + 252 = 288
 8001718:	f500 707c 	add.w	r0, r0, #1008	@ 0x3f0
    vmov temp_l, s9
 800171c:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8001720:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8001724:	f47f aeb4 	bne.w	8001490 <asm_intt_5+0x19c>

    sub ptr_p, #9216
 8001728:	f5a0 5010 	sub.w	r0, r0, #9216	@ 0x2400

//stage 6 - 8
	.equ distance, 288 //2304/8
  	.equ strincr, 4

	vmov ptr_zeta, s0
 800172c:	ee10 1a10 	vmov	r1, s0
  	vldm ptr_zeta!, {s2-s8}
 8001730:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 8001734:	ee00 1a10 	vmov	s0, r1

  	movw temp_l, #0x5ceb
 8001738:	f645 4aeb 	movw	sl, #23787	@ 0x5ceb
    movt temp_l, #0x65
 800173c:	f2c0 0a65 	movt	sl, #101	@ 0x65
    vmov s11, temp_l //F1= 6642923
 8001740:	ee05 aa90 	vmov	s11, sl
    movw temp_l, #0x79d5
 8001744:	f647 1ad5 	movw	sl, #31189	@ 0x79d5
    movt temp_l, #0x4a
 8001748:	f2c0 0a4a 	movt	sl, #74	@ 0x4a
    vmov s12, temp_l //F2= 4880853
 800174c:	ee06 aa10 	vmov	s12, sl

  	add.w temp_l, ptr_p, #distance*strincr // 144 iterations : 8*288 = 1536
 8001750:	f500 6a90 	add.w	sl, r0, #1152	@ 0x480
  	vmov s9, temp_l
 8001754:	ee04 aa90 	vmov	s9, sl

	add.w temp_l, ptr_p, #4*distance*strincr
 8001758:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
	vmov s14, temp_l
 800175c:	ee07 aa10 	vmov	s14, sl
  1:
    .rept 2
    vmov temp_l, s14
 8001760:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8001764:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8001768:	f8d0 6480 	ldr.w	r6, [r0, #1152]	@ 0x480
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 800176c:	f8d0 7900 	ldr.w	r7, [r0, #2304]	@ 0x900
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8001770:	f8d0 8d80 	ldr.w	r8, [r0, #3456]	@ 0xd80
    ldr.w pol4, [temp_l]
 8001774:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8001778:	f8da b480 	ldr.w	fp, [sl, #1152]	@ 0x480
    ldr.w pol6, [temp_l, #2*distance*strincr]
 800177c:	f8da c900 	ldr.w	ip, [sl, #2304]	@ 0x900
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8001780:	f8da ed80 	ldr.w	lr, [sl, #3456]	@ 0xd80

    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 8001784:	4435      	add	r5, r6
 8001786:	4447      	add	r7, r8
 8001788:	445c      	add	r4, fp
 800178a:	44f4      	add	ip, lr
 800178c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001790:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001794:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001798:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 800179c:	ee11 1a10 	vmov	r1, s2
 80017a0:	fb86 9601 	smull	r9, r6, r6, r1
 80017a4:	fb09 fa02 	mul.w	sl, r9, r2
 80017a8:	fbca 9603 	smlal	r9, r6, sl, r3
 80017ac:	ee11 1a90 	vmov	r1, s3
 80017b0:	fb88 9801 	smull	r9, r8, r8, r1
 80017b4:	fb09 fa02 	mul.w	sl, r9, r2
 80017b8:	fbca 9803 	smlal	r9, r8, sl, r3
 80017bc:	ee12 1a10 	vmov	r1, s4
 80017c0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80017c4:	fb09 fa02 	mul.w	sl, r9, r2
 80017c8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80017cc:	ee12 1a90 	vmov	r1, s5
 80017d0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80017d4:	fb09 fa02 	mul.w	sl, r9, r2
 80017d8:	fbca 9e03 	smlal	r9, lr, sl, r3
 80017dc:	443d      	add	r5, r7
 80017de:	4446      	add	r6, r8
 80017e0:	4464      	add	r4, ip
 80017e2:	44f3      	add	fp, lr
 80017e4:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80017e8:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80017ec:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80017f0:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80017f4:	ee13 1a10 	vmov	r1, s6
 80017f8:	fb87 9701 	smull	r9, r7, r7, r1
 80017fc:	fb09 fa02 	mul.w	sl, r9, r2
 8001800:	fbca 9703 	smlal	r9, r7, sl, r3
 8001804:	fb88 9801 	smull	r9, r8, r8, r1
 8001808:	fb09 fa02 	mul.w	sl, r9, r2
 800180c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001810:	ee13 1a90 	vmov	r1, s7
 8001814:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001818:	fb09 fa02 	mul.w	sl, r9, r2
 800181c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001820:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001824:	fb09 fa02 	mul.w	sl, r9, r2
 8001828:	fbca 9e03 	smlal	r9, lr, sl, r3
 800182c:	4425      	add	r5, r4
 800182e:	445e      	add	r6, fp
 8001830:	4467      	add	r7, ip
 8001832:	44f0      	add	r8, lr
 8001834:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001838:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800183c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001840:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001844:	ee14 1a10 	vmov	r1, s8
 8001848:	fb84 9401 	smull	r9, r4, r4, r1
 800184c:	fb09 fa02 	mul.w	sl, r9, r2
 8001850:	fbca 9403 	smlal	r9, r4, sl, r3
 8001854:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001858:	fb09 fa02 	mul.w	sl, r9, r2
 800185c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001860:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001864:	fb09 fa02 	mul.w	sl, r9, r2
 8001868:	fbca 9c03 	smlal	r9, ip, sl, r3
 800186c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001870:	fb09 fa02 	mul.w	sl, r9, r2
 8001874:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001878:	ee15 1a90 	vmov	r1, s11
 800187c:	eba5 0504 	sub.w	r5, r5, r4
 8001880:	eba6 060b 	sub.w	r6, r6, fp
 8001884:	eba7 070c 	sub.w	r7, r7, ip
 8001888:	eba8 080e 	sub.w	r8, r8, lr
 800188c:	fb85 9501 	smull	r9, r5, r5, r1
 8001890:	fb09 fa02 	mul.w	sl, r9, r2
 8001894:	fbca 9503 	smlal	r9, r5, sl, r3
 8001898:	fb86 9601 	smull	r9, r6, r6, r1
 800189c:	fb09 fa02 	mul.w	sl, r9, r2
 80018a0:	fbca 9603 	smlal	r9, r6, sl, r3
 80018a4:	fb87 9701 	smull	r9, r7, r7, r1
 80018a8:	fb09 fa02 	mul.w	sl, r9, r2
 80018ac:	fbca 9703 	smlal	r9, r7, sl, r3
 80018b0:	fb88 9801 	smull	r9, r8, r8, r1
 80018b4:	fb09 fa02 	mul.w	sl, r9, r2
 80018b8:	fbca 9803 	smlal	r9, r8, sl, r3
 80018bc:	ee16 1a10 	vmov	r1, s12
 80018c0:	fb84 9401 	smull	r9, r4, r4, r1
 80018c4:	fb09 fa02 	mul.w	sl, r9, r2
 80018c8:	fbca 9403 	smlal	r9, r4, sl, r3
 80018cc:	fb8b 9b01 	smull	r9, fp, fp, r1
 80018d0:	fb09 fa02 	mul.w	sl, r9, r2
 80018d4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80018d8:	fb8c 9c01 	smull	r9, ip, ip, r1
 80018dc:	fb09 fa02 	mul.w	sl, r9, r2
 80018e0:	fbca 9c03 	smlal	r9, ip, sl, r3
 80018e4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80018e8:	fb09 fa02 	mul.w	sl, r9, r2
 80018ec:	fbca 9e03 	smlal	r9, lr, sl, r3

	vmov temp_l, s14
 80018f0:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 80018f4:	f8c0 6480 	str.w	r6, [r0, #1152]	@ 0x480
    str.w pol2, [ptr_p, #2*distance*strincr]
 80018f8:	f8c0 7900 	str.w	r7, [r0, #2304]	@ 0x900
    str.w pol3, [ptr_p, #3*distance*strincr]
 80018fc:	f8c0 8d80 	str.w	r8, [r0, #3456]	@ 0xd80
    str.w pol0, [ptr_p], #strincr
 8001900:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8001904:	f8ca b480 	str.w	fp, [sl, #1152]	@ 0x480
    str.w pol6, [temp_l, #2*distance*strincr]
 8001908:	f8ca c900 	str.w	ip, [sl, #2304]	@ 0x900
    str.w pol7, [temp_l, #3*distance*strincr]
 800190c:	f8ca ed80 	str.w	lr, [sl, #3456]	@ 0xd80
    str.w pol4, [temp_l], #strincr
 8001910:	f84a 4b04 	str.w	r4, [sl], #4

	vmov s14, temp_l
 8001914:	ee07 aa10 	vmov	s14, sl
    vmov temp_l, s14
 8001918:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 800191c:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8001920:	f8d0 6480 	ldr.w	r6, [r0, #1152]	@ 0x480
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8001924:	f8d0 7900 	ldr.w	r7, [r0, #2304]	@ 0x900
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8001928:	f8d0 8d80 	ldr.w	r8, [r0, #3456]	@ 0xd80
    ldr.w pol4, [temp_l]
 800192c:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8001930:	f8da b480 	ldr.w	fp, [sl, #1152]	@ 0x480
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8001934:	f8da c900 	ldr.w	ip, [sl, #2304]	@ 0x900
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8001938:	f8da ed80 	ldr.w	lr, [sl, #3456]	@ 0xd80
    _last_3_layer_GS_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l, s11, s12
 800193c:	4435      	add	r5, r6
 800193e:	4447      	add	r7, r8
 8001940:	445c      	add	r4, fp
 8001942:	44f4      	add	ip, lr
 8001944:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001948:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800194c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001950:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001954:	ee11 1a10 	vmov	r1, s2
 8001958:	fb86 9601 	smull	r9, r6, r6, r1
 800195c:	fb09 fa02 	mul.w	sl, r9, r2
 8001960:	fbca 9603 	smlal	r9, r6, sl, r3
 8001964:	ee11 1a90 	vmov	r1, s3
 8001968:	fb88 9801 	smull	r9, r8, r8, r1
 800196c:	fb09 fa02 	mul.w	sl, r9, r2
 8001970:	fbca 9803 	smlal	r9, r8, sl, r3
 8001974:	ee12 1a10 	vmov	r1, s4
 8001978:	fb8b 9b01 	smull	r9, fp, fp, r1
 800197c:	fb09 fa02 	mul.w	sl, r9, r2
 8001980:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001984:	ee12 1a90 	vmov	r1, s5
 8001988:	fb8e 9e01 	smull	r9, lr, lr, r1
 800198c:	fb09 fa02 	mul.w	sl, r9, r2
 8001990:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001994:	443d      	add	r5, r7
 8001996:	4446      	add	r6, r8
 8001998:	4464      	add	r4, ip
 800199a:	44f3      	add	fp, lr
 800199c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80019a0:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80019a4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80019a8:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80019ac:	ee13 1a10 	vmov	r1, s6
 80019b0:	fb87 9701 	smull	r9, r7, r7, r1
 80019b4:	fb09 fa02 	mul.w	sl, r9, r2
 80019b8:	fbca 9703 	smlal	r9, r7, sl, r3
 80019bc:	fb88 9801 	smull	r9, r8, r8, r1
 80019c0:	fb09 fa02 	mul.w	sl, r9, r2
 80019c4:	fbca 9803 	smlal	r9, r8, sl, r3
 80019c8:	ee13 1a90 	vmov	r1, s7
 80019cc:	fb8c 9c01 	smull	r9, ip, ip, r1
 80019d0:	fb09 fa02 	mul.w	sl, r9, r2
 80019d4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80019d8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80019dc:	fb09 fa02 	mul.w	sl, r9, r2
 80019e0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80019e4:	4425      	add	r5, r4
 80019e6:	445e      	add	r6, fp
 80019e8:	4467      	add	r7, ip
 80019ea:	44f0      	add	r8, lr
 80019ec:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80019f0:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80019f4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80019f8:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80019fc:	ee14 1a10 	vmov	r1, s8
 8001a00:	fb84 9401 	smull	r9, r4, r4, r1
 8001a04:	fb09 fa02 	mul.w	sl, r9, r2
 8001a08:	fbca 9403 	smlal	r9, r4, sl, r3
 8001a0c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001a10:	fb09 fa02 	mul.w	sl, r9, r2
 8001a14:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001a18:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001a1c:	fb09 fa02 	mul.w	sl, r9, r2
 8001a20:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001a24:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001a28:	fb09 fa02 	mul.w	sl, r9, r2
 8001a2c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001a30:	ee15 1a90 	vmov	r1, s11
 8001a34:	eba5 0504 	sub.w	r5, r5, r4
 8001a38:	eba6 060b 	sub.w	r6, r6, fp
 8001a3c:	eba7 070c 	sub.w	r7, r7, ip
 8001a40:	eba8 080e 	sub.w	r8, r8, lr
 8001a44:	fb85 9501 	smull	r9, r5, r5, r1
 8001a48:	fb09 fa02 	mul.w	sl, r9, r2
 8001a4c:	fbca 9503 	smlal	r9, r5, sl, r3
 8001a50:	fb86 9601 	smull	r9, r6, r6, r1
 8001a54:	fb09 fa02 	mul.w	sl, r9, r2
 8001a58:	fbca 9603 	smlal	r9, r6, sl, r3
 8001a5c:	fb87 9701 	smull	r9, r7, r7, r1
 8001a60:	fb09 fa02 	mul.w	sl, r9, r2
 8001a64:	fbca 9703 	smlal	r9, r7, sl, r3
 8001a68:	fb88 9801 	smull	r9, r8, r8, r1
 8001a6c:	fb09 fa02 	mul.w	sl, r9, r2
 8001a70:	fbca 9803 	smlal	r9, r8, sl, r3
 8001a74:	ee16 1a10 	vmov	r1, s12
 8001a78:	fb84 9401 	smull	r9, r4, r4, r1
 8001a7c:	fb09 fa02 	mul.w	sl, r9, r2
 8001a80:	fbca 9403 	smlal	r9, r4, sl, r3
 8001a84:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001a88:	fb09 fa02 	mul.w	sl, r9, r2
 8001a8c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001a90:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001a94:	fb09 fa02 	mul.w	sl, r9, r2
 8001a98:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001a9c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001aa0:	fb09 fa02 	mul.w	sl, r9, r2
 8001aa4:	fbca 9e03 	smlal	r9, lr, sl, r3
	vmov temp_l, s14
 8001aa8:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 8001aac:	f8c0 6480 	str.w	r6, [r0, #1152]	@ 0x480
    str.w pol2, [ptr_p, #2*distance*strincr]
 8001ab0:	f8c0 7900 	str.w	r7, [r0, #2304]	@ 0x900
    str.w pol3, [ptr_p, #3*distance*strincr]
 8001ab4:	f8c0 8d80 	str.w	r8, [r0, #3456]	@ 0xd80
    str.w pol0, [ptr_p], #strincr
 8001ab8:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8001abc:	f8ca b480 	str.w	fp, [sl, #1152]	@ 0x480
    str.w pol6, [temp_l, #2*distance*strincr]
 8001ac0:	f8ca c900 	str.w	ip, [sl, #2304]	@ 0x900
    str.w pol7, [temp_l, #3*distance*strincr]
 8001ac4:	f8ca ed80 	str.w	lr, [sl, #3456]	@ 0xd80
    str.w pol4, [temp_l], #strincr
 8001ac8:	f84a 4b04 	str.w	r4, [sl], #4
	vmov s14, temp_l
 8001acc:	ee07 aa10 	vmov	s14, sl
    .endr

	vmov temp_l, s9
 8001ad0:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 8001ad4:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8001ad8:	f47f ae42 	bne.w	8001760 <asm_intt_5+0x46c>

    pop.w {r4-r11, pc}
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ae0 <asm_intt_5_radix3>:
//extern void asm_intt_5_radix3(int32_t * Out, int32_t* zeta);
.global asm_intt_5_radix3
.type asm_intt_5_radix3,%function
.align 2
asm_intt_5_radix3:
    push.w {r4-r11, r14}
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vpush.w {s16-s24}
 8001ae4:	ed2d 8a09 	vpush	{s16-s24}
  	zeta0     .req R11
  	zeta1     .req R12
  	wmont     .req R14


    movw qinv, #:lower16:0xf0803fff
 8001ae8:	f643 72ff 	movw	r2, #16383	@ 0x3fff
    movt qinv, #:upper16:0xf0803fff
 8001aec:	f2cf 0280 	movt	r2, #61568	@ 0xf080
    movw q, #0x4001
 8001af0:	f244 0301 	movw	r3, #16385	@ 0x4001
    movt q, #0x80
 8001af4:	f2c0 0380 	movt	r3, #128	@ 0x80
    movw wmont, #0xdc5d // 6675549
 8001af8:	f64d 4e5d 	movw	lr, #56413	@ 0xdc5d
    movt wmont, #0x65 // 6675549
 8001afc:	f2c0 0e65 	movt	lr, #101	@ 0x65


	movw cntr, #256
 8001b00:	f240 1400 	movw	r4, #256	@ 0x100
	vmov s17, ptr_zeta
 8001b04:	ee08 1a90 	vmov	s17, r1

1:
	vldm ptr_p, {s0-s8} //2-8
 8001b08:	ec90 0a09 	vldmia	r0, {s0-s8}
	vmov ptr_zeta, s17
 8001b0c:	ee18 1a90 	vmov	r1, s17
	vldm ptr_zeta!, {s9-s16}
 8001b10:	ecf1 4a08 	vldmia	r1!, {s9-s16}
	vmov s17, ptr_zeta
 8001b14:	ee08 1a90 	vmov	s17, r1

	_2_layer_GS_32_radix3 pol0, pol1, pol2, pol3, temp, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, zeta0, zeta1, qinv, q, wmont, temp_l, temp_h
 8001b18:	ee14 ba90 	vmov	fp, s9
 8001b1c:	ee15 ca10 	vmov	ip, s10
 8001b20:	ee10 6a10 	vmov	r6, s0
 8001b24:	ee10 7a90 	vmov	r7, s1
 8001b28:	ee11 8a10 	vmov	r8, s2
 8001b2c:	eba7 0506 	sub.w	r5, r7, r6
 8001b30:	eba8 0106 	sub.w	r1, r8, r6
 8001b34:	fb85 a50e 	smull	sl, r5, r5, lr
 8001b38:	fb0a f902 	mul.w	r9, sl, r2
 8001b3c:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001b40:	4429      	add	r1, r5
 8001b42:	443e      	add	r6, r7
 8001b44:	4446      	add	r6, r8
 8001b46:	eba8 0807 	sub.w	r8, r8, r7
 8001b4a:	eba8 0805 	sub.w	r8, r8, r5
 8001b4e:	fb81 a10b 	smull	sl, r1, r1, fp
 8001b52:	fb0a f902 	mul.w	r9, sl, r2
 8001b56:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001b5a:	fb88 a80c 	smull	sl, r8, r8, ip
 8001b5e:	fb0a f902 	mul.w	r9, sl, r2
 8001b62:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001b66:	ee00 6a10 	vmov	s0, r6
 8001b6a:	ee00 1a90 	vmov	s1, r1
 8001b6e:	ee01 8a10 	vmov	s2, r8
 8001b72:	ee15 ba90 	vmov	fp, s11
 8001b76:	ee16 ca10 	vmov	ip, s12
 8001b7a:	ee11 6a90 	vmov	r6, s3
 8001b7e:	ee12 7a10 	vmov	r7, s4
 8001b82:	ee12 8a90 	vmov	r8, s5
 8001b86:	eba7 0506 	sub.w	r5, r7, r6
 8001b8a:	eba8 0106 	sub.w	r1, r8, r6
 8001b8e:	fb85 a50e 	smull	sl, r5, r5, lr
 8001b92:	fb0a f902 	mul.w	r9, sl, r2
 8001b96:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001b9a:	4429      	add	r1, r5
 8001b9c:	443e      	add	r6, r7
 8001b9e:	4446      	add	r6, r8
 8001ba0:	eba8 0807 	sub.w	r8, r8, r7
 8001ba4:	eba8 0805 	sub.w	r8, r8, r5
 8001ba8:	fb81 a10b 	smull	sl, r1, r1, fp
 8001bac:	fb0a f902 	mul.w	r9, sl, r2
 8001bb0:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001bb4:	fb88 a80c 	smull	sl, r8, r8, ip
 8001bb8:	fb0a f902 	mul.w	r9, sl, r2
 8001bbc:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001bc0:	ee01 6a90 	vmov	s3, r6
 8001bc4:	ee02 1a10 	vmov	s4, r1
 8001bc8:	ee02 8a90 	vmov	s5, r8
 8001bcc:	ee16 ba90 	vmov	fp, s13
 8001bd0:	ee17 ca10 	vmov	ip, s14
 8001bd4:	ee13 6a10 	vmov	r6, s6
 8001bd8:	ee13 7a90 	vmov	r7, s7
 8001bdc:	ee14 8a10 	vmov	r8, s8
 8001be0:	eba7 0506 	sub.w	r5, r7, r6
 8001be4:	eba8 0106 	sub.w	r1, r8, r6
 8001be8:	fb85 a50e 	smull	sl, r5, r5, lr
 8001bec:	fb0a f902 	mul.w	r9, sl, r2
 8001bf0:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001bf4:	4429      	add	r1, r5
 8001bf6:	443e      	add	r6, r7
 8001bf8:	4446      	add	r6, r8
 8001bfa:	eba8 0807 	sub.w	r8, r8, r7
 8001bfe:	eba8 0805 	sub.w	r8, r8, r5
 8001c02:	fb81 a10b 	smull	sl, r1, r1, fp
 8001c06:	fb0a f902 	mul.w	r9, sl, r2
 8001c0a:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001c0e:	fb88 a80c 	smull	sl, r8, r8, ip
 8001c12:	fb0a f902 	mul.w	r9, sl, r2
 8001c16:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001c1a:	ee03 6a10 	vmov	s6, r6
 8001c1e:	ee03 1a90 	vmov	s7, r1
 8001c22:	ee04 8a10 	vmov	s8, r8
 8001c26:	ee17 ba90 	vmov	fp, s15
 8001c2a:	ee18 ca10 	vmov	ip, s16
 8001c2e:	ee10 6a10 	vmov	r6, s0
 8001c32:	ee11 7a90 	vmov	r7, s3
 8001c36:	ee13 8a10 	vmov	r8, s6
 8001c3a:	eba7 0506 	sub.w	r5, r7, r6
 8001c3e:	eba8 0106 	sub.w	r1, r8, r6
 8001c42:	fb85 a50e 	smull	sl, r5, r5, lr
 8001c46:	fb0a f902 	mul.w	r9, sl, r2
 8001c4a:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001c4e:	4429      	add	r1, r5
 8001c50:	443e      	add	r6, r7
 8001c52:	4446      	add	r6, r8
 8001c54:	eba8 0807 	sub.w	r8, r8, r7
 8001c58:	eba8 0805 	sub.w	r8, r8, r5
 8001c5c:	fb81 a10b 	smull	sl, r1, r1, fp
 8001c60:	fb0a f902 	mul.w	r9, sl, r2
 8001c64:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001c68:	fb88 a80c 	smull	sl, r8, r8, ip
 8001c6c:	fb0a f902 	mul.w	r9, sl, r2
 8001c70:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001c74:	ee00 6a10 	vmov	s0, r6
 8001c78:	ee01 1a90 	vmov	s3, r1
 8001c7c:	ee03 8a10 	vmov	s6, r8
 8001c80:	ee10 6a90 	vmov	r6, s1
 8001c84:	ee12 7a10 	vmov	r7, s4
 8001c88:	ee13 8a90 	vmov	r8, s7
 8001c8c:	eba7 0506 	sub.w	r5, r7, r6
 8001c90:	eba8 0106 	sub.w	r1, r8, r6
 8001c94:	fb85 a50e 	smull	sl, r5, r5, lr
 8001c98:	fb0a f902 	mul.w	r9, sl, r2
 8001c9c:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001ca0:	4429      	add	r1, r5
 8001ca2:	443e      	add	r6, r7
 8001ca4:	4446      	add	r6, r8
 8001ca6:	eba8 0807 	sub.w	r8, r8, r7
 8001caa:	eba8 0805 	sub.w	r8, r8, r5
 8001cae:	fb81 a10b 	smull	sl, r1, r1, fp
 8001cb2:	fb0a f902 	mul.w	r9, sl, r2
 8001cb6:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001cba:	fb88 a80c 	smull	sl, r8, r8, ip
 8001cbe:	fb0a f902 	mul.w	r9, sl, r2
 8001cc2:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001cc6:	ee00 6a90 	vmov	s1, r6
 8001cca:	ee02 1a10 	vmov	s4, r1
 8001cce:	ee03 8a90 	vmov	s7, r8
 8001cd2:	ee11 6a10 	vmov	r6, s2
 8001cd6:	ee12 7a90 	vmov	r7, s5
 8001cda:	ee14 8a10 	vmov	r8, s8
 8001cde:	eba7 0506 	sub.w	r5, r7, r6
 8001ce2:	eba8 0106 	sub.w	r1, r8, r6
 8001ce6:	fb85 a50e 	smull	sl, r5, r5, lr
 8001cea:	fb0a f902 	mul.w	r9, sl, r2
 8001cee:	fbc9 a503 	smlal	sl, r5, r9, r3
 8001cf2:	4429      	add	r1, r5
 8001cf4:	443e      	add	r6, r7
 8001cf6:	4446      	add	r6, r8
 8001cf8:	eba8 0807 	sub.w	r8, r8, r7
 8001cfc:	eba8 0805 	sub.w	r8, r8, r5
 8001d00:	fb81 a10b 	smull	sl, r1, r1, fp
 8001d04:	fb0a f902 	mul.w	r9, sl, r2
 8001d08:	fbc9 a103 	smlal	sl, r1, r9, r3
 8001d0c:	fb88 a80c 	smull	sl, r8, r8, ip
 8001d10:	fb0a f902 	mul.w	r9, sl, r2
 8001d14:	fbc9 a803 	smlal	sl, r8, r9, r3
 8001d18:	ee01 6a10 	vmov	s2, r6
 8001d1c:	ee02 1a90 	vmov	s5, r1
 8001d20:	ee04 8a10 	vmov	s8, r8

	vmov.w pol0, s1
 8001d24:	ee10 5a90 	vmov	r5, s1
	vmov.w pol1, s2
 8001d28:	ee11 6a10 	vmov	r6, s2
	vmov.w pol2, s3
 8001d2c:	ee11 7a90 	vmov	r7, s3
    str.w pol0, [ptr_p, #4]
 8001d30:	f8c0 5004 	str.w	r5, [r0, #4]
    str.w pol1, [ptr_p, #8]
 8001d34:	f8c0 6008 	str.w	r6, [r0, #8]
    str.w pol2, [ptr_p, #12]
 8001d38:	f8c0 700c 	str.w	r7, [r0, #12]

    vmov.w pol0, s4
 8001d3c:	ee12 5a10 	vmov	r5, s4
	vmov.w pol1, s5
 8001d40:	ee12 6a90 	vmov	r6, s5
	vmov.w pol2, s6
 8001d44:	ee13 7a10 	vmov	r7, s6
    str.w pol0, [ptr_p, #16]
 8001d48:	f8c0 5010 	str.w	r5, [r0, #16]
    str.w pol1, [ptr_p, #20]
 8001d4c:	f8c0 6014 	str.w	r6, [r0, #20]
    str.w pol2, [ptr_p, #24]
 8001d50:	f8c0 7018 	str.w	r7, [r0, #24]

    vmov.w pol0, s7
 8001d54:	ee13 5a90 	vmov	r5, s7
	vmov.w pol1, s8
 8001d58:	ee14 6a10 	vmov	r6, s8
	vmov.w pol2, s0
 8001d5c:	ee10 7a10 	vmov	r7, s0
    str.w pol0, [ptr_p, #28]
 8001d60:	f8c0 501c 	str.w	r5, [r0, #28]
    str.w pol1, [ptr_p, #32]
 8001d64:	f8c0 6020 	str.w	r6, [r0, #32]
    str.w pol2, [ptr_p], #36
 8001d68:	f840 7b24 	str.w	r7, [r0], #36

	subs cntr, #1
 8001d6c:	3c01      	subs	r4, #1
    bne.w 1b
 8001d6e:	f47f aecb 	bne.w	8001b08 <asm_intt_5_radix3+0x28>

	vpop.w {s16-s24}
 8001d72:	ecbd 8a09 	vpop	{s16-s24}
    pop.w {r4-r11, pc}
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
	...

08001e00 <KeccakF1600_Initialize>:
@ void KeccakF1600_Initialize( void )
@
.align 8
.global   KeccakF1600_Initialize
KeccakF1600_Initialize:
	bx		lr
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	f3af 8000 	nop.w
 8001e0c:	f3af 8000 	nop.w
 8001e10:	f3af 8000 	nop.w
 8001e14:	f3af 8000 	nop.w
 8001e18:	f3af 8000 	nop.w
 8001e1c:	f3af 8000 	nop.w
 8001e20:	f3af 8000 	nop.w
 8001e24:	f3af 8000 	nop.w
 8001e28:	f3af 8000 	nop.w
 8001e2c:	f3af 8000 	nop.w
 8001e30:	f3af 8000 	nop.w
 8001e34:	f3af 8000 	nop.w
 8001e38:	f3af 8000 	nop.w
 8001e3c:	f3af 8000 	nop.w
	...

08001f00 <KeccakF1600_StateXORBytes>:
@ void KeccakF1600_StateXORBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateXORBytes
KeccakF1600_StateXORBytes:
	cbz		r3, KeccakF1600_StateXORBytes_Exit1
 8001f00:	b303      	cbz	r3, 8001f44 <KeccakF1600_StateXORBytes_Exit1>
	push	{r4 - r8, lr}							@ then
 8001f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bic		r4, r2, #7								@ offset &= ~7
 8001f06:	f022 0407 	bic.w	r4, r2, #7
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 8001f0a:	1900      	adds	r0, r0, r4
	ands	r2, r2, #7								@ offset &= 7 (part not lane aligned)
 8001f0c:	f012 0207 	ands.w	r2, r2, #7
	beq		KeccakF1600_StateXORBytes_CheckLanes	@ .if offset != 0
 8001f10:	d00b      	beq.n	8001f2a <KeccakF1600_StateXORBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 8001f12:	001c      	movs	r4, r3
	rsb		r5, r2, #8								@ max size in lane = 8 - offset
 8001f14:	f1c2 0508 	rsb	r5, r2, #8
	cmp		r4, r5
 8001f18:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateXORBytes_BytesAlign
 8001f1a:	dd00      	ble.n	8001f1e <KeccakF1600_StateXORBytes_BytesAlign>
	movs	r4, r5
 8001f1c:	002c      	movs	r4, r5

08001f1e <KeccakF1600_StateXORBytes_BytesAlign>:
KeccakF1600_StateXORBytes_BytesAlign:
	sub		r8, r3, r4								@ size left
 8001f1e:	eba3 0804 	sub.w	r8, r3, r4
	movs	r3, r4
 8001f22:	0023      	movs	r3, r4
	bl		__KeccakF1600_StateXORBytesInLane
 8001f24:	f000 f8ec 	bl	8002100 <__KeccakF1600_StateXORBytesInLane>
	mov		r3, r8
 8001f28:	4643      	mov	r3, r8

08001f2a <KeccakF1600_StateXORBytes_CheckLanes>:
KeccakF1600_StateXORBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 8001f2a:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateXORBytes_Bytes
 8001f2c:	d004      	beq.n	8001f38 <KeccakF1600_StateXORBytes_Bytes>
	mov		r8, r3
 8001f2e:	4698      	mov	r8, r3
	bl		__KeccakF1600_StateXORLanes
 8001f30:	f000 f866 	bl	8002000 <__KeccakF1600_StateXORLanes>
	and		r3, r8, #7
 8001f34:	f008 0307 	and.w	r3, r8, #7

08001f38 <KeccakF1600_StateXORBytes_Bytes>:
KeccakF1600_StateXORBytes_Bytes:
	cbz		r3, KeccakF1600_StateXORBytes_Exit
 8001f38:	b113      	cbz	r3, 8001f40 <KeccakF1600_StateXORBytes_Exit>
	movs	r2, #0
 8001f3a:	2200      	movs	r2, #0
	bl		__KeccakF1600_StateXORBytesInLane
 8001f3c:	f000 f8e0 	bl	8002100 <__KeccakF1600_StateXORBytesInLane>

08001f40 <KeccakF1600_StateXORBytes_Exit>:
KeccakF1600_StateXORBytes_Exit:
	pop		{r4 - r8, pc}
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f44 <KeccakF1600_StateXORBytes_Exit1>:
KeccakF1600_StateXORBytes_Exit1:
	bx		lr
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	f3af 8000 	nop.w
 8001f4c:	f3af 8000 	nop.w
 8001f50:	f3af 8000 	nop.w
 8001f54:	f3af 8000 	nop.w
 8001f58:	f3af 8000 	nop.w
 8001f5c:	f3af 8000 	nop.w
 8001f60:	f3af 8000 	nop.w
 8001f64:	f3af 8000 	nop.w
 8001f68:	f3af 8000 	nop.w
 8001f6c:	f3af 8000 	nop.w
 8001f70:	f3af 8000 	nop.w
 8001f74:	f3af 8000 	nop.w
 8001f78:	f3af 8000 	nop.w
 8001f7c:	f3af 8000 	nop.w
	...

08002000 <__KeccakF1600_StateXORLanes>:
@ Changed: r2-r7
@
.align 8
__KeccakF1600_StateXORLanes:
__KeccakF1600_StateXORLanes_LoopAligned:
	ldr		r4, [r1], #4
 8002000:	f851 4b04 	ldr.w	r4, [r1], #4
	ldr		r5, [r1], #4
 8002004:	f851 5b04 	ldr.w	r5, [r1], #4
	ldrd    r6, r7, [r0]
 8002008:	e9d0 6700 	ldrd	r6, r7, [r0]
	toBitInterleaving	r4, r5, r6, r7, r3, 0
 800200c:	f004 3355 	and.w	r3, r4, #1431655765	@ 0x55555555
 8002010:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
 8002014:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002018:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
 800201c:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002020:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8002024:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8002028:	f363 230f 	bfi	r3, r3, #8, #8
 800202c:	ea86 2613 	eor.w	r6, r6, r3, lsr #8
 8002030:	f005 3355 	and.w	r3, r5, #1431655765	@ 0x55555555
 8002034:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
 8002038:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800203c:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
 8002040:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002044:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8002048:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800204c:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
 8002050:	ea86 4603 	eor.w	r6, r6, r3, lsl #16
 8002054:	f004 33aa 	and.w	r3, r4, #2863311530	@ 0xaaaaaaaa
 8002058:	ea43 0343 	orr.w	r3, r3, r3, lsl #1
 800205c:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 8002060:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
 8002064:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002068:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 800206c:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8002070:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
 8002074:	ea87 4713 	eor.w	r7, r7, r3, lsr #16
 8002078:	f005 33aa 	and.w	r3, r5, #2863311530	@ 0xaaaaaaaa
 800207c:	ea43 0343 	orr.w	r3, r3, r3, lsl #1
 8002080:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 8002084:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
 8002088:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800208c:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 8002090:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8002094:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
 8002098:	f36f 030f 	bfc	r3, #0, #16
 800209c:	405f      	eors	r7, r3
	strd	r6, r7, [r0], #8
 800209e:	e8e0 6702 	strd	r6, r7, [r0], #8
	subs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopAligned
 80020a4:	d1ac      	bne.n	8002000 <__KeccakF1600_StateXORLanes>
	bx		lr
 80020a6:	4770      	bx	lr
 80020a8:	f3af 8000 	nop.w
 80020ac:	f3af 8000 	nop.w
 80020b0:	f3af 8000 	nop.w
 80020b4:	f3af 8000 	nop.w
 80020b8:	f3af 8000 	nop.w
 80020bc:	f3af 8000 	nop.w
	...

08002100 <__KeccakF1600_StateXORBytesInLane>:
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateXORBytesInLane:
	movs	r4, #0
 8002100:	2400      	movs	r4, #0
	movs	r5, #0
 8002102:	2500      	movs	r5, #0
	push	{ r4 - r5 }
 8002104:	b430      	push	{r4, r5}
	add		r2, r2, sp
 8002106:	446a      	add	r2, sp

08002108 <__KeccakF1600_StateXORBytesInLane_Loop>:
__KeccakF1600_StateXORBytesInLane_Loop:
	ldrb	r5, [r1], #1
 8002108:	f811 5b01 	ldrb.w	r5, [r1], #1
	strb	r5, [r2], #1
 800210c:	f802 5b01 	strb.w	r5, [r2], #1
	subs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
	bne		__KeccakF1600_StateXORBytesInLane_Loop
 8002112:	d1f9      	bne.n	8002108 <__KeccakF1600_StateXORBytesInLane_Loop>
	pop		{ r4 - r5 }
 8002114:	bc30      	pop	{r4, r5}
	ldrd    r6, r7, [r0]
 8002116:	e9d0 6700 	ldrd	r6, r7, [r0]
	toBitInterleaving	r4, r5, r6, r7, r3, 0
 800211a:	f004 3355 	and.w	r3, r4, #1431655765	@ 0x55555555
 800211e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
 8002122:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002126:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
 800212a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800212e:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8002132:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8002136:	f363 230f 	bfi	r3, r3, #8, #8
 800213a:	ea86 2613 	eor.w	r6, r6, r3, lsr #8
 800213e:	f005 3355 	and.w	r3, r5, #1431655765	@ 0x55555555
 8002142:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
 8002146:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800214a:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
 800214e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002152:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
 8002156:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800215a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
 800215e:	ea86 4603 	eor.w	r6, r6, r3, lsl #16
 8002162:	f004 33aa 	and.w	r3, r4, #2863311530	@ 0xaaaaaaaa
 8002166:	ea43 0343 	orr.w	r3, r3, r3, lsl #1
 800216a:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 800216e:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
 8002172:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002176:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 800217a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800217e:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
 8002182:	ea87 4713 	eor.w	r7, r7, r3, lsr #16
 8002186:	f005 33aa 	and.w	r3, r5, #2863311530	@ 0xaaaaaaaa
 800218a:	ea43 0343 	orr.w	r3, r3, r3, lsl #1
 800218e:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 8002192:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
 8002196:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800219a:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 800219e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80021a2:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
 80021a6:	f36f 030f 	bfc	r3, #0, #16
 80021aa:	405f      	eors	r7, r3
	strd	r6, r7, [r0], #8
 80021ac:	e8e0 6702 	strd	r6, r7, [r0], #8
	bx		lr
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	f3af 8000 	nop.w
 80021b8:	f3af 8000 	nop.w
 80021bc:	f3af 8000 	nop.w
	...

08002200 <KeccakF1600_StateExtractBytes>:
@ void KeccakF1600_StateExtractBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateExtractBytes
KeccakF1600_StateExtractBytes:
	cbz		r3, KeccakF1600_StateExtractBytes_Exit1	@ .if length != 0
 8002200:	b303      	cbz	r3, 8002244 <KeccakF1600_StateExtractBytes_Exit1>
	push	{r4 - r8, lr}							@ then
 8002202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bic		r4, r2, #7								@ offset &= ~7
 8002206:	f022 0407 	bic.w	r4, r2, #7
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 800220a:	1900      	adds	r0, r0, r4
	ands	r2, r2, #7								@ offset &= 7 (part not lane aligned)
 800220c:	f012 0207 	ands.w	r2, r2, #7
	beq		KeccakF1600_StateExtractBytes_CheckLanes	@ .if offset != 0
 8002210:	d00b      	beq.n	800222a <KeccakF1600_StateExtractBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 8002212:	001c      	movs	r4, r3
	rsb		r5, r2, #8								@ max size in lane = 8 - offset
 8002214:	f1c2 0508 	rsb	r5, r2, #8
	cmp		r4, r5
 8002218:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateExtractBytes_BytesAlign
 800221a:	dd00      	ble.n	800221e <KeccakF1600_StateExtractBytes_BytesAlign>
	movs	r4, r5
 800221c:	002c      	movs	r4, r5

0800221e <KeccakF1600_StateExtractBytes_BytesAlign>:
KeccakF1600_StateExtractBytes_BytesAlign:
	sub		r8, r3, r4								@ size left
 800221e:	eba3 0804 	sub.w	r8, r3, r4
	movs	r3, r4
 8002222:	0023      	movs	r3, r4
	bl		__KeccakF1600_StateExtractBytesInLane
 8002224:	f000 f8ec 	bl	8002400 <__KeccakF1600_StateExtractBytesInLane>
	mov		r3, r8
 8002228:	4643      	mov	r3, r8

0800222a <KeccakF1600_StateExtractBytes_CheckLanes>:
KeccakF1600_StateExtractBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 800222a:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateExtractBytes_Bytes
 800222c:	d004      	beq.n	8002238 <KeccakF1600_StateExtractBytes_Bytes>
	mov		r8, r3
 800222e:	4698      	mov	r8, r3
	bl		__KeccakF1600_StateExtractLanes
 8002230:	f000 f866 	bl	8002300 <__KeccakF1600_StateExtractLanes>
	and		r3, r8, #7
 8002234:	f008 0307 	and.w	r3, r8, #7

08002238 <KeccakF1600_StateExtractBytes_Bytes>:
KeccakF1600_StateExtractBytes_Bytes:
	cbz		r3, KeccakF1600_StateExtractBytes_Exit
 8002238:	b113      	cbz	r3, 8002240 <KeccakF1600_StateExtractBytes_Exit>
	movs	r2, #0
 800223a:	2200      	movs	r2, #0
	bl		__KeccakF1600_StateExtractBytesInLane
 800223c:	f000 f8e0 	bl	8002400 <__KeccakF1600_StateExtractBytesInLane>

08002240 <KeccakF1600_StateExtractBytes_Exit>:
KeccakF1600_StateExtractBytes_Exit:
	pop		{r4 - r8, pc}
 8002240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002244 <KeccakF1600_StateExtractBytes_Exit1>:
KeccakF1600_StateExtractBytes_Exit1:
	bx		lr
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	f3af 8000 	nop.w
 800224c:	f3af 8000 	nop.w
 8002250:	f3af 8000 	nop.w
 8002254:	f3af 8000 	nop.w
 8002258:	f3af 8000 	nop.w
 800225c:	f3af 8000 	nop.w
 8002260:	f3af 8000 	nop.w
 8002264:	f3af 8000 	nop.w
 8002268:	f3af 8000 	nop.w
 800226c:	f3af 8000 	nop.w
 8002270:	f3af 8000 	nop.w
 8002274:	f3af 8000 	nop.w
 8002278:	f3af 8000 	nop.w
 800227c:	f3af 8000 	nop.w
	...

08002300 <__KeccakF1600_StateExtractLanes>:
@ Changed: r2-r5
@
.align 8
__KeccakF1600_StateExtractLanes:
__KeccakF1600_StateExtractLanes_LoopAligned:
	ldrd	r4, r5, [r0], #8
 8002300:	e8f0 4502 	ldrd	r4, r5, [r0], #8
	fromBitInterleaving	r4, r5, r3
 8002304:	0023      	movs	r3, r4
 8002306:	f365 441f 	bfi	r4, r5, #16, #16
 800230a:	f36f 050f 	bfc	r5, #0, #16
 800230e:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 8002312:	ea84 2314 	eor.w	r3, r4, r4, lsr #8
 8002316:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800231a:	405c      	eors	r4, r3
 800231c:	ea84 2403 	eor.w	r4, r4, r3, lsl #8
 8002320:	ea84 1314 	eor.w	r3, r4, r4, lsr #4
 8002324:	f003 13f0 	and.w	r3, r3, #15728880	@ 0xf000f0
 8002328:	405c      	eors	r4, r3
 800232a:	ea84 1403 	eor.w	r4, r4, r3, lsl #4
 800232e:	ea84 0394 	eor.w	r3, r4, r4, lsr #2
 8002332:	f003 330c 	and.w	r3, r3, #202116108	@ 0xc0c0c0c
 8002336:	405c      	eors	r4, r3
 8002338:	ea84 0483 	eor.w	r4, r4, r3, lsl #2
 800233c:	ea84 0354 	eor.w	r3, r4, r4, lsr #1
 8002340:	f003 3322 	and.w	r3, r3, #572662306	@ 0x22222222
 8002344:	405c      	eors	r4, r3
 8002346:	ea84 0443 	eor.w	r4, r4, r3, lsl #1
 800234a:	ea85 2315 	eor.w	r3, r5, r5, lsr #8
 800234e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002352:	405d      	eors	r5, r3
 8002354:	ea85 2503 	eor.w	r5, r5, r3, lsl #8
 8002358:	ea85 1315 	eor.w	r3, r5, r5, lsr #4
 800235c:	f003 13f0 	and.w	r3, r3, #15728880	@ 0xf000f0
 8002360:	405d      	eors	r5, r3
 8002362:	ea85 1503 	eor.w	r5, r5, r3, lsl #4
 8002366:	ea85 0395 	eor.w	r3, r5, r5, lsr #2
 800236a:	f003 330c 	and.w	r3, r3, #202116108	@ 0xc0c0c0c
 800236e:	405d      	eors	r5, r3
 8002370:	ea85 0583 	eor.w	r5, r5, r3, lsl #2
 8002374:	ea85 0355 	eor.w	r3, r5, r5, lsr #1
 8002378:	f003 3322 	and.w	r3, r3, #572662306	@ 0x22222222
 800237c:	405d      	eors	r5, r3
 800237e:	ea85 0543 	eor.w	r5, r5, r3, lsl #1
	str		r4, [r1], #4
 8002382:	f841 4b04 	str.w	r4, [r1], #4
	subs	r2, r2, #1
 8002386:	3a01      	subs	r2, #1
	str		r5, [r1], #4
 8002388:	f841 5b04 	str.w	r5, [r1], #4
	bne		__KeccakF1600_StateExtractLanes_LoopAligned
 800238c:	d1b8      	bne.n	8002300 <__KeccakF1600_StateExtractLanes>
	bx		lr
 800238e:	4770      	bx	lr
 8002390:	f3af 8000 	nop.w
 8002394:	f3af 8000 	nop.w
 8002398:	f3af 8000 	nop.w
 800239c:	f3af 8000 	nop.w
 80023a0:	f3af 8000 	nop.w
 80023a4:	f3af 8000 	nop.w
 80023a8:	f3af 8000 	nop.w
 80023ac:	f3af 8000 	nop.w
 80023b0:	f3af 8000 	nop.w
 80023b4:	f3af 8000 	nop.w
 80023b8:	f3af 8000 	nop.w
 80023bc:	f3af 8000 	nop.w
	...

08002400 <__KeccakF1600_StateExtractBytesInLane>:
@
@  Changed: r2-r6
@
.align 8
__KeccakF1600_StateExtractBytesInLane:
	ldrd	r4, r5, [r0], #8
 8002400:	e8f0 4502 	ldrd	r4, r5, [r0], #8
	fromBitInterleaving	r4, r5, r6
 8002404:	0026      	movs	r6, r4
 8002406:	f365 441f 	bfi	r4, r5, #16, #16
 800240a:	f36f 050f 	bfc	r5, #0, #16
 800240e:	ea45 4516 	orr.w	r5, r5, r6, lsr #16
 8002412:	ea84 2614 	eor.w	r6, r4, r4, lsr #8
 8002416:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 800241a:	4074      	eors	r4, r6
 800241c:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
 8002420:	ea84 1614 	eor.w	r6, r4, r4, lsr #4
 8002424:	f006 16f0 	and.w	r6, r6, #15728880	@ 0xf000f0
 8002428:	4074      	eors	r4, r6
 800242a:	ea84 1406 	eor.w	r4, r4, r6, lsl #4
 800242e:	ea84 0694 	eor.w	r6, r4, r4, lsr #2
 8002432:	f006 360c 	and.w	r6, r6, #202116108	@ 0xc0c0c0c
 8002436:	4074      	eors	r4, r6
 8002438:	ea84 0486 	eor.w	r4, r4, r6, lsl #2
 800243c:	ea84 0654 	eor.w	r6, r4, r4, lsr #1
 8002440:	f006 3622 	and.w	r6, r6, #572662306	@ 0x22222222
 8002444:	4074      	eors	r4, r6
 8002446:	ea84 0446 	eor.w	r4, r4, r6, lsl #1
 800244a:	ea85 2615 	eor.w	r6, r5, r5, lsr #8
 800244e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8002452:	4075      	eors	r5, r6
 8002454:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
 8002458:	ea85 1615 	eor.w	r6, r5, r5, lsr #4
 800245c:	f006 16f0 	and.w	r6, r6, #15728880	@ 0xf000f0
 8002460:	4075      	eors	r5, r6
 8002462:	ea85 1506 	eor.w	r5, r5, r6, lsl #4
 8002466:	ea85 0695 	eor.w	r6, r5, r5, lsr #2
 800246a:	f006 360c 	and.w	r6, r6, #202116108	@ 0xc0c0c0c
 800246e:	4075      	eors	r5, r6
 8002470:	ea85 0586 	eor.w	r5, r5, r6, lsl #2
 8002474:	ea85 0655 	eor.w	r6, r5, r5, lsr #1
 8002478:	f006 3622 	and.w	r6, r6, #572662306	@ 0x22222222
 800247c:	4075      	eors	r5, r6
 800247e:	ea85 0546 	eor.w	r5, r5, r6, lsl #1
	push	{r4, r5}
 8002482:	b430      	push	{r4, r5}
	add		r2, sp, r2
 8002484:	446a      	add	r2, sp

08002486 <__KeccakF1600_StateExtractBytesInLane_Loop>:
__KeccakF1600_StateExtractBytesInLane_Loop:
	ldrb	r4, [r2], #1
 8002486:	f812 4b01 	ldrb.w	r4, [r2], #1
	subs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
	strb	r4, [r1], #1
 800248c:	f801 4b01 	strb.w	r4, [r1], #1
	bne		__KeccakF1600_StateExtractBytesInLane_Loop
 8002490:	d1f9      	bne.n	8002486 <__KeccakF1600_StateExtractBytesInLane_Loop>
	add		sp, #8
 8002492:	b002      	add	sp, #8
	bx		lr
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	f3af 8000 	nop.w
 800249c:	f3af 8000 	nop.w
 80024a0:	f3af 8000 	nop.w
 80024a4:	f3af 8000 	nop.w
 80024a8:	f3af 8000 	nop.w
 80024ac:	f3af 8000 	nop.w
 80024b0:	f3af 8000 	nop.w
 80024b4:	f3af 8000 	nop.w
 80024b8:	f3af 8000 	nop.w
 80024bc:	f3af 8000 	nop.w
	...

08002500 <KeccakF1600_StatePermute_RoundConstantsWithTerminator>:
 8002500:	00000001 	.word	0x00000001
	...
 800250c:	00000089 	.word	0x00000089
 8002510:	00000000 	.word	0x00000000
 8002514:	8000008b 	.word	0x8000008b
 8002518:	00000000 	.word	0x00000000
 800251c:	80008080 	.word	0x80008080
 8002520:	00000001 	.word	0x00000001
 8002524:	0000008b 	.word	0x0000008b
 8002528:	00000001 	.word	0x00000001
 800252c:	00008000 	.word	0x00008000
 8002530:	00000001 	.word	0x00000001
 8002534:	80008088 	.word	0x80008088
 8002538:	00000001 	.word	0x00000001
 800253c:	80000082 	.word	0x80000082
 8002540:	00000000 	.word	0x00000000
 8002544:	0000000b 	.word	0x0000000b
 8002548:	00000000 	.word	0x00000000
 800254c:	0000000a 	.word	0x0000000a
 8002550:	00000001 	.word	0x00000001
 8002554:	00008082 	.word	0x00008082
 8002558:	00000000 	.word	0x00000000
 800255c:	00008003 	.word	0x00008003
 8002560:	00000001 	.word	0x00000001
 8002564:	0000808b 	.word	0x0000808b
 8002568:	00000001 	.word	0x00000001
 800256c:	8000000b 	.word	0x8000000b
 8002570:	00000001 	.word	0x00000001
 8002574:	8000008a 	.word	0x8000008a
 8002578:	00000001 	.word	0x00000001
 800257c:	80000081 	.word	0x80000081
 8002580:	00000000 	.word	0x00000000
 8002584:	80000081 	.word	0x80000081
 8002588:	00000000 	.word	0x00000000
 800258c:	80000008 	.word	0x80000008
 8002590:	00000000 	.word	0x00000000
 8002594:	00000083 	.word	0x00000083
 8002598:	00000000 	.word	0x00000000
 800259c:	80008003 	.word	0x80008003
 80025a0:	00000001 	.word	0x00000001
 80025a4:	80008088 	.word	0x80008088
 80025a8:	00000000 	.word	0x00000000
 80025ac:	80000088 	.word	0x80000088
 80025b0:	00000001 	.word	0x00000001
 80025b4:	00008000 	.word	0x00008000
 80025b8:	00000000 	.word	0x00000000
 80025bc:	80008082 	.word	0x80008082
 80025c0:	000000ff 	.word	0x000000ff
 80025c4:	f3af 8000 	nop.w
 80025c8:	f3af 8000 	nop.w
 80025cc:	f3af 8000 	nop.w
 80025d0:	f3af 8000 	nop.w
 80025d4:	f3af 8000 	nop.w
 80025d8:	f3af 8000 	nop.w
 80025dc:	f3af 8000 	nop.w
 80025e0:	f3af 8000 	nop.w
 80025e4:	f3af 8000 	nop.w
 80025e8:	f3af 8000 	nop.w
 80025ec:	f3af 8000 	nop.w
 80025f0:	f3af 8000 	nop.w
 80025f4:	f3af 8000 	nop.w
 80025f8:	f3af 8000 	nop.w
 80025fc:	f3af 8000 	nop.w

08002600 <KeccakF1600_StatePermute>:
@ void KeccakF1600_StatePermute( void *state )
@
.align 8
.global   KeccakF1600_StatePermute
KeccakF1600_StatePermute:
	adr		r1, KeccakF1600_StatePermute_RoundConstantsWithTerminator
 8002600:	f2af 1104 	subw	r1, pc, #260	@ 0x104
	push	{ r4 - r12, lr }
 8002604:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	sub		sp, #mSize
 8002608:	b086      	sub	sp, #24
	str		r1, [sp, #mRC]
 800260a:	9105      	str	r1, [sp, #20]

0800260c <KeccakF1600_StatePermute_RoundLoop>:
KeccakF1600_StatePermute_RoundLoop:
	KeccakRound0
 800260c:	f8d0 3020 	ldr.w	r3, [r0, #32]
 8002610:	f8d0 1048 	ldr.w	r1, [r0, #72]	@ 0x48
 8002614:	f8d0 5070 	ldr.w	r5, [r0, #112]	@ 0x70
 8002618:	f8d0 b098 	ldr.w	fp, [r0, #152]	@ 0x98
 800261c:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	@ 0xc0
 8002620:	ea83 0301 	eor.w	r3, r3, r1
 8002624:	ea83 0305 	eor.w	r3, r3, r5
 8002628:	ea83 030b 	eor.w	r3, r3, fp
 800262c:	ea83 030c 	eor.w	r3, r3, ip
 8002630:	f8d0 700c 	ldr.w	r7, [r0, #12]
 8002634:	f8d0 1034 	ldr.w	r1, [r0, #52]	@ 0x34
 8002638:	f8d0 505c 	ldr.w	r5, [r0, #92]	@ 0x5c
 800263c:	f8d0 b084 	ldr.w	fp, [r0, #132]	@ 0x84
 8002640:	f8d0 c0ac 	ldr.w	ip, [r0, #172]	@ 0xac
 8002644:	ea87 0701 	eor.w	r7, r7, r1
 8002648:	ea87 0705 	eor.w	r7, r7, r5
 800264c:	ea87 070b 	eor.w	r7, r7, fp
 8002650:	ea87 070c 	eor.w	r7, r7, ip
 8002654:	ea83 76f7 	eor.w	r6, r3, r7, ror #31
 8002658:	f8d0 4014 	ldr.w	r4, [r0, #20]
 800265c:	f8d0 103c 	ldr.w	r1, [r0, #60]	@ 0x3c
 8002660:	f8d0 5064 	ldr.w	r5, [r0, #100]	@ 0x64
 8002664:	f8d0 b08c 	ldr.w	fp, [r0, #140]	@ 0x8c
 8002668:	f8d0 c0b4 	ldr.w	ip, [r0, #180]	@ 0xb4
 800266c:	f8cd 6000 	str.w	r6, [sp]
 8002670:	ea84 0401 	eor.w	r4, r4, r1
 8002674:	ea84 0405 	eor.w	r4, r4, r5
 8002678:	ea84 040b 	eor.w	r4, r4, fp
 800267c:	ea84 040c 	eor.w	r4, r4, ip
 8002680:	ea83 0604 	eor.w	r6, r3, r4
 8002684:	f8d0 3018 	ldr.w	r3, [r0, #24]
 8002688:	f8d0 1040 	ldr.w	r1, [r0, #64]	@ 0x40
 800268c:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8002690:	f8d0 b090 	ldr.w	fp, [r0, #144]	@ 0x90
 8002694:	f8d0 c0b8 	ldr.w	ip, [r0, #184]	@ 0xb8
 8002698:	f8cd 600c 	str.w	r6, [sp, #12]
 800269c:	ea83 0301 	eor.w	r3, r3, r1
 80026a0:	ea83 0305 	eor.w	r3, r3, r5
 80026a4:	ea83 030b 	eor.w	r3, r3, fp
 80026a8:	ea83 030c 	eor.w	r3, r3, ip
 80026ac:	ea87 0203 	eor.w	r2, r7, r3
 80026b0:	f8d0 7000 	ldr.w	r7, [r0]
 80026b4:	f8d0 1028 	ldr.w	r1, [r0, #40]	@ 0x28
 80026b8:	f8d0 5050 	ldr.w	r5, [r0, #80]	@ 0x50
 80026bc:	f8d0 b078 	ldr.w	fp, [r0, #120]	@ 0x78
 80026c0:	f8d0 c0a0 	ldr.w	ip, [r0, #160]	@ 0xa0
 80026c4:	ea87 0701 	eor.w	r7, r7, r1
 80026c8:	ea87 0705 	eor.w	r7, r7, r5
 80026cc:	ea87 070b 	eor.w	r7, r7, fp
 80026d0:	ea87 070c 	eor.w	r7, r7, ip
 80026d4:	ea87 7af4 	eor.w	sl, r7, r4, ror #31
 80026d8:	f8d0 401c 	ldr.w	r4, [r0, #28]
 80026dc:	f8d0 1044 	ldr.w	r1, [r0, #68]	@ 0x44
 80026e0:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 80026e4:	f8d0 b094 	ldr.w	fp, [r0, #148]	@ 0x94
 80026e8:	f8d0 c0bc 	ldr.w	ip, [r0, #188]	@ 0xbc
 80026ec:	ea84 0401 	eor.w	r4, r4, r1
 80026f0:	ea84 0405 	eor.w	r4, r4, r5
 80026f4:	ea84 040b 	eor.w	r4, r4, fp
 80026f8:	ea84 040c 	eor.w	r4, r4, ip
 80026fc:	ea84 0e07 	eor.w	lr, r4, r7
 8002700:	f8d0 7008 	ldr.w	r7, [r0, #8]
 8002704:	f8d0 1030 	ldr.w	r1, [r0, #48]	@ 0x30
 8002708:	f8d0 5058 	ldr.w	r5, [r0, #88]	@ 0x58
 800270c:	f8d0 b080 	ldr.w	fp, [r0, #128]	@ 0x80
 8002710:	f8d0 c0a8 	ldr.w	ip, [r0, #168]	@ 0xa8
 8002714:	ea87 0701 	eor.w	r7, r7, r1
 8002718:	ea87 0705 	eor.w	r7, r7, r5
 800271c:	ea87 070b 	eor.w	r7, r7, fp
 8002720:	ea87 070c 	eor.w	r7, r7, ip
 8002724:	ea87 76f4 	eor.w	r6, r7, r4, ror #31
 8002728:	f8d0 4024 	ldr.w	r4, [r0, #36]	@ 0x24
 800272c:	f8d0 104c 	ldr.w	r1, [r0, #76]	@ 0x4c
 8002730:	f8d0 5074 	ldr.w	r5, [r0, #116]	@ 0x74
 8002734:	f8d0 b09c 	ldr.w	fp, [r0, #156]	@ 0x9c
 8002738:	f8d0 c0c4 	ldr.w	ip, [r0, #196]	@ 0xc4
 800273c:	f8cd 6010 	str.w	r6, [sp, #16]
 8002740:	ea84 0401 	eor.w	r4, r4, r1
 8002744:	ea84 0405 	eor.w	r4, r4, r5
 8002748:	ea84 040b 	eor.w	r4, r4, fp
 800274c:	ea84 040c 	eor.w	r4, r4, ip
 8002750:	ea84 0807 	eor.w	r8, r4, r7
 8002754:	f8d0 7010 	ldr.w	r7, [r0, #16]
 8002758:	f8d0 1038 	ldr.w	r1, [r0, #56]	@ 0x38
 800275c:	f8d0 5060 	ldr.w	r5, [r0, #96]	@ 0x60
 8002760:	f8d0 b088 	ldr.w	fp, [r0, #136]	@ 0x88
 8002764:	f8d0 c0b0 	ldr.w	ip, [r0, #176]	@ 0xb0
 8002768:	f8cd 8004 	str.w	r8, [sp, #4]
 800276c:	ea87 0701 	eor.w	r7, r7, r1
 8002770:	ea87 0705 	eor.w	r7, r7, r5
 8002774:	ea87 070b 	eor.w	r7, r7, fp
 8002778:	ea87 070c 	eor.w	r7, r7, ip
 800277c:	ea87 79f4 	eor.w	r9, r7, r4, ror #31
 8002780:	f8d0 4004 	ldr.w	r4, [r0, #4]
 8002784:	f8d0 102c 	ldr.w	r1, [r0, #44]	@ 0x2c
 8002788:	f8d0 5054 	ldr.w	r5, [r0, #84]	@ 0x54
 800278c:	f8d0 b07c 	ldr.w	fp, [r0, #124]	@ 0x7c
 8002790:	f8d0 c0a4 	ldr.w	ip, [r0, #164]	@ 0xa4
 8002794:	f8cd 9008 	str.w	r9, [sp, #8]
 8002798:	ea84 0401 	eor.w	r4, r4, r1
 800279c:	ea84 0405 	eor.w	r4, r4, r5
 80027a0:	ea84 040b 	eor.w	r4, r4, fp
 80027a4:	ea84 040c 	eor.w	r4, r4, ip
 80027a8:	ea84 0b07 	eor.w	fp, r4, r7
 80027ac:	ea83 7cf4 	eor.w	ip, r3, r4, ror #31
 80027b0:	f8d0 3018 	ldr.w	r3, [r0, #24]
 80027b4:	f8d0 4048 	ldr.w	r4, [r0, #72]	@ 0x48
 80027b8:	f8d0 5054 	ldr.w	r5, [r0, #84]	@ 0x54
 80027bc:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 80027c0:	f8d0 70b4 	ldr.w	r7, [r0, #180]	@ 0xb4
 80027c4:	f8c0 1054 	str.w	r1, [r0, #84]	@ 0x54
 80027c8:	ea89 0303 	eor.w	r3, r9, r3
 80027cc:	ea8c 0404 	eor.w	r4, ip, r4
 80027d0:	ea88 0505 	eor.w	r5, r8, r5
 80027d4:	ea8b 0606 	eor.w	r6, fp, r6
 80027d8:	ea82 0707 	eor.w	r7, r2, r7
 80027dc:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 80027e0:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 80027e4:	f8c0 1054 	str.w	r1, [r0, #84]	@ 0x54
 80027e8:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 80027ec:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 80027f0:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 80027f4:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 80027f8:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 80027fc:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 8002800:	ea23 31f7 	bic.w	r1, r3, r7, ror #15
 8002804:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 8002808:	f8c0 1018 	str.w	r1, [r0, #24]
 800280c:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002810:	ea81 21f7 	eor.w	r1, r1, r7, ror #11
 8002814:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8002818:	f8d0 403c 	ldr.w	r4, [r0, #60]	@ 0x3c
 800281c:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8002820:	f8d0 609c 	ldr.w	r6, [r0, #156]	@ 0x9c
 8002824:	f8d0 70a4 	ldr.w	r7, [r0, #164]	@ 0xa4
 8002828:	f8c0 1048 	str.w	r1, [r0, #72]	@ 0x48
 800282c:	ea8a 0303 	eor.w	r3, sl, r3
 8002830:	ea82 0404 	eor.w	r4, r2, r4
 8002834:	ea89 0505 	eor.w	r5, r9, r5
 8002838:	ea8e 0606 	eor.w	r6, lr, r6
 800283c:	ea88 0707 	eor.w	r7, r8, r7
 8002840:	ea25 2174 	bic.w	r1, r5, r4, ror #9
 8002844:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8002848:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 800284c:	ea26 6135 	bic.w	r1, r6, r5, ror #24
 8002850:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8002854:	f8c0 1008 	str.w	r1, [r0, #8]
 8002858:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 800285c:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8002860:	f8c0 103c 	str.w	r1, [r0, #60]	@ 0x3c
 8002864:	ea23 51f7 	bic.w	r1, r3, r7, ror #23
 8002868:	ea81 7136 	eor.w	r1, r1, r6, ror #28
 800286c:	f8c0 1068 	str.w	r1, [r0, #104]	@ 0x68
 8002870:	ea24 01f3 	bic.w	r1, r4, r3, ror #3
 8002874:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8002878:	f8dd 8000 	ldr.w	r8, [sp]
 800287c:	f8d0 3024 	ldr.w	r3, [r0, #36]	@ 0x24
 8002880:	f8d0 4028 	ldr.w	r4, [r0, #40]	@ 0x28
 8002884:	f8d0 5058 	ldr.w	r5, [r0, #88]	@ 0x58
 8002888:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 800288c:	f8d0 70b8 	ldr.w	r7, [r0, #184]	@ 0xb8
 8002890:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8002894:	ea8e 0303 	eor.w	r3, lr, r3
 8002898:	ea88 0404 	eor.w	r4, r8, r4
 800289c:	ea8a 0505 	eor.w	r5, sl, r5
 80028a0:	ea82 0606 	eor.w	r6, r2, r6
 80028a4:	ea89 0707 	eor.w	r7, r9, r7
 80028a8:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 80028ac:	ea81 51f3 	eor.w	r1, r1, r3, ror #23
 80028b0:	f8c0 1028 	str.w	r1, [r0, #40]	@ 0x28
 80028b4:	ea26 01f5 	bic.w	r1, r6, r5, ror #3
 80028b8:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 80028bc:	f8c0 1058 	str.w	r1, [r0, #88]	@ 0x58
 80028c0:	ea27 5136 	bic.w	r1, r7, r6, ror #20
 80028c4:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 80028c8:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80028cc:	ea23 41b7 	bic.w	r1, r3, r7, ror #18
 80028d0:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 80028d4:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
 80028d8:	ea24 1133 	bic.w	r1, r4, r3, ror #4
 80028dc:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 80028e0:	f8d0 3014 	ldr.w	r3, [r0, #20]
 80028e4:	f8d0 4040 	ldr.w	r4, [r0, #64]	@ 0x40
 80028e8:	f8d0 5070 	ldr.w	r5, [r0, #112]	@ 0x70
 80028ec:	f8d0 6078 	ldr.w	r6, [r0, #120]	@ 0x78
 80028f0:	f8d0 70ac 	ldr.w	r7, [r0, #172]	@ 0xac
 80028f4:	f8c0 1024 	str.w	r1, [r0, #36]	@ 0x24
 80028f8:	ea82 0303 	eor.w	r3, r2, r3
 80028fc:	ea89 0404 	eor.w	r4, r9, r4
 8002900:	ea8c 0505 	eor.w	r5, ip, r5
 8002904:	ea88 0606 	eor.w	r6, r8, r6
 8002908:	ea8b 0707 	eor.w	r7, fp, r7
 800290c:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8002910:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8002914:	f8c0 1078 	str.w	r1, [r0, #120]	@ 0x78
 8002918:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 800291c:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8002920:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 8002924:	ea27 3176 	bic.w	r1, r7, r6, ror #13
 8002928:	ea81 31b5 	eor.w	r1, r1, r5, ror #14
 800292c:	f8c0 1014 	str.w	r1, [r0, #20]
 8002930:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 8002934:	ea81 21f6 	eor.w	r1, r1, r6, ror #11
 8002938:	f8c0 1040 	str.w	r1, [r0, #64]	@ 0x40
 800293c:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002940:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8002944:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002948:	f8d0 3000 	ldr.w	r3, [r0]
 800294c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800294e:	6e45      	ldr	r5, [r0, #100]	@ 0x64
 8002950:	f8d0 6094 	ldr.w	r6, [r0, #148]	@ 0x94
 8002954:	f8d0 70c0 	ldr.w	r7, [r0, #192]	@ 0xc0
 8002958:	f8c0 1070 	str.w	r1, [r0, #112]	@ 0x70
 800295c:	ea88 0303 	eor.w	r3, r8, r3
 8002960:	ea8a 0404 	eor.w	r4, sl, r4
 8002964:	ea82 0505 	eor.w	r5, r2, r5
 8002968:	ea89 0606 	eor.w	r6, r9, r6
 800296c:	ea8c 0707 	eor.w	r7, ip, r7
 8002970:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8002974:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8002978:	f8c0 1030 	str.w	r1, [r0, #48]	@ 0x30
 800297c:	ea27 7136 	bic.w	r1, r7, r6, ror #28
 8002980:	ea81 4175 	eor.w	r1, r1, r5, ror #17
 8002984:	f8c0 1064 	str.w	r1, [r0, #100]	@ 0x64
 8002988:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 800298c:	ea81 5176 	eor.w	r1, r1, r6, ror #21
 8002990:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8002994:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8002998:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 800299c:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 80029a0:	ea25 0504 	bic.w	r5, r5, r4
 80029a4:	9905      	ldr	r1, [sp, #20]
 80029a6:	680c      	ldr	r4, [r1, #0]
 80029a8:	ea83 23b5 	eor.w	r3, r3, r5, ror #10
 80029ac:	ea84 0103 	eor.w	r1, r4, r3
 80029b0:	f8dd 2010 	ldr.w	r2, [sp, #16]
 80029b4:	f8d0 301c 	ldr.w	r3, [r0, #28]
 80029b8:	f8d0 404c 	ldr.w	r4, [r0, #76]	@ 0x4c
 80029bc:	f8d0 5050 	ldr.w	r5, [r0, #80]	@ 0x50
 80029c0:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
 80029c4:	f8d0 70b0 	ldr.w	r7, [r0, #176]	@ 0xb0
 80029c8:	f8c0 1000 	str.w	r1, [r0]
 80029cc:	ea89 0303 	eor.w	r3, r9, r3
 80029d0:	ea8e 0404 	eor.w	r4, lr, r4
 80029d4:	ea88 0505 	eor.w	r5, r8, r5
 80029d8:	ea8a 0606 	eor.w	r6, sl, r6
 80029dc:	ea82 0707 	eor.w	r7, r2, r7
 80029e0:	ea25 51f4 	bic.w	r1, r5, r4, ror #23
 80029e4:	ea81 41f3 	eor.w	r1, r1, r3, ror #19
 80029e8:	f8c0 1050 	str.w	r1, [r0, #80]	@ 0x50
 80029ec:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 80029f0:	ea81 3134 	eor.w	r1, r1, r4, ror #12
 80029f4:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 80029f8:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 80029fc:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8002a00:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 8002a04:	ea23 4137 	bic.w	r1, r3, r7, ror #16
 8002a08:	ea81 6136 	eor.w	r1, r1, r6, ror #24
 8002a0c:	f8c0 101c 	str.w	r1, [r0, #28]
 8002a10:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002a14:	ea81 3137 	eor.w	r1, r1, r7, ror #12
 8002a18:	f8d0 300c 	ldr.w	r3, [r0, #12]
 8002a1c:	f8d0 4038 	ldr.w	r4, [r0, #56]	@ 0x38
 8002a20:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 8002a24:	f8d0 6098 	ldr.w	r6, [r0, #152]	@ 0x98
 8002a28:	f8d0 70a0 	ldr.w	r7, [r0, #160]	@ 0xa0
 8002a2c:	f8c0 104c 	str.w	r1, [r0, #76]	@ 0x4c
 8002a30:	ea8b 0303 	eor.w	r3, fp, r3
 8002a34:	ea82 0404 	eor.w	r4, r2, r4
 8002a38:	ea89 0505 	eor.w	r5, r9, r5
 8002a3c:	ea8c 0606 	eor.w	r6, ip, r6
 8002a40:	ea88 0707 	eor.w	r7, r8, r7
 8002a44:	ea25 21b4 	bic.w	r1, r5, r4, ror #10
 8002a48:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8002a4c:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
 8002a50:	ea26 51f5 	bic.w	r1, r6, r5, ror #23
 8002a54:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8002a58:	f8c0 100c 	str.w	r1, [r0, #12]
 8002a5c:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 8002a60:	ea81 7135 	eor.w	r1, r1, r5, ror #28
 8002a64:	f8c0 1038 	str.w	r1, [r0, #56]	@ 0x38
 8002a68:	ea23 6137 	bic.w	r1, r3, r7, ror #24
 8002a6c:	ea81 7176 	eor.w	r1, r1, r6, ror #29
 8002a70:	f8c0 106c 	str.w	r1, [r0, #108]	@ 0x6c
 8002a74:	ea24 01b3 	bic.w	r1, r4, r3, ror #2
 8002a78:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8002a7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002a80:	f8d0 3020 	ldr.w	r3, [r0, #32]
 8002a84:	f8d0 402c 	ldr.w	r4, [r0, #44]	@ 0x2c
 8002a88:	f8d0 505c 	ldr.w	r5, [r0, #92]	@ 0x5c
 8002a8c:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 8002a90:	f8d0 70bc 	ldr.w	r7, [r0, #188]	@ 0xbc
 8002a94:	f8c0 1098 	str.w	r1, [r0, #152]	@ 0x98
 8002a98:	ea8c 0303 	eor.w	r3, ip, r3
 8002a9c:	ea88 0404 	eor.w	r4, r8, r4
 8002aa0:	ea8b 0505 	eor.w	r5, fp, r5
 8002aa4:	ea82 0606 	eor.w	r6, r2, r6
 8002aa8:	ea89 0707 	eor.w	r7, r9, r7
 8002aac:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 8002ab0:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8002ab4:	f8c0 102c 	str.w	r1, [r0, #44]	@ 0x2c
 8002ab8:	ea26 01b5 	bic.w	r1, r6, r5, ror #2
 8002abc:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8002ac0:	f8c0 105c 	str.w	r1, [r0, #92]	@ 0x5c
 8002ac4:	ea27 5176 	bic.w	r1, r7, r6, ror #21
 8002ac8:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8002acc:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
 8002ad0:	ea23 4177 	bic.w	r1, r3, r7, ror #17
 8002ad4:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8002ad8:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
 8002adc:	ea24 1173 	bic.w	r1, r4, r3, ror #5
 8002ae0:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8002ae4:	f8d0 3010 	ldr.w	r3, [r0, #16]
 8002ae8:	f8d0 4044 	ldr.w	r4, [r0, #68]	@ 0x44
 8002aec:	f8d0 5074 	ldr.w	r5, [r0, #116]	@ 0x74
 8002af0:	f8d0 607c 	ldr.w	r6, [r0, #124]	@ 0x7c
 8002af4:	f8d0 70a8 	ldr.w	r7, [r0, #168]	@ 0xa8
 8002af8:	f8c0 1020 	str.w	r1, [r0, #32]
 8002afc:	ea82 0303 	eor.w	r3, r2, r3
 8002b00:	ea89 0404 	eor.w	r4, r9, r4
 8002b04:	ea8e 0505 	eor.w	r5, lr, r5
 8002b08:	ea88 0606 	eor.w	r6, r8, r6
 8002b0c:	ea8a 0707 	eor.w	r7, sl, r7
 8002b10:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8002b14:	ea81 5173 	eor.w	r1, r1, r3, ror #21
 8002b18:	f8c0 107c 	str.w	r1, [r0, #124]	@ 0x7c
 8002b1c:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 8002b20:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8002b24:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8002b28:	ea27 3136 	bic.w	r1, r7, r6, ror #12
 8002b2c:	ea81 3175 	eor.w	r1, r1, r5, ror #13
 8002b30:	f8c0 1010 	str.w	r1, [r0, #16]
 8002b34:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 8002b38:	ea81 21b6 	eor.w	r1, r1, r6, ror #10
 8002b3c:	f8c0 1044 	str.w	r1, [r0, #68]	@ 0x44
 8002b40:	ea24 7173 	bic.w	r1, r4, r3, ror #29
 8002b44:	ea81 61f7 	eor.w	r1, r1, r7, ror #27
 8002b48:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002b4c:	f8d0 3004 	ldr.w	r3, [r0, #4]
 8002b50:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002b52:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8002b54:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 8002b58:	f8d0 70c4 	ldr.w	r7, [r0, #196]	@ 0xc4
 8002b5c:	f8c0 1074 	str.w	r1, [r0, #116]	@ 0x74
 8002b60:	ea88 0303 	eor.w	r3, r8, r3
 8002b64:	ea8b 0404 	eor.w	r4, fp, r4
 8002b68:	ea82 0505 	eor.w	r5, r2, r5
 8002b6c:	ea89 0606 	eor.w	r6, r9, r6
 8002b70:	ea8e 0707 	eor.w	r7, lr, r7
 8002b74:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8002b78:	ea81 5134 	eor.w	r1, r1, r4, ror #20
 8002b7c:	f8c0 1034 	str.w	r1, [r0, #52]	@ 0x34
 8002b80:	ea27 7176 	bic.w	r1, r7, r6, ror #29
 8002b84:	ea81 41b5 	eor.w	r1, r1, r5, ror #18
 8002b88:	f8c0 1060 	str.w	r1, [r0, #96]	@ 0x60
 8002b8c:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8002b90:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 8002b94:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 8002b98:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8002b9c:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8002ba0:	f8c0 10c4 	str.w	r1, [r0, #196]	@ 0xc4
 8002ba4:	ea25 75f4 	bic.w	r5, r5, r4, ror #31
 8002ba8:	9905      	ldr	r1, [sp, #20]
 8002baa:	684c      	ldr	r4, [r1, #4]
 8002bac:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
 8002bb0:	ea84 0e03 	eor.w	lr, r4, r3
	KeccakRound1
 8002bb4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8002bb8:	f8d0 1048 	ldr.w	r1, [r0, #72]	@ 0x48
 8002bbc:	f8d0 5098 	ldr.w	r5, [r0, #152]	@ 0x98
 8002bc0:	f8d0 b024 	ldr.w	fp, [r0, #36]	@ 0x24
 8002bc4:	f8d0 c074 	ldr.w	ip, [r0, #116]	@ 0x74
 8002bc8:	f8c0 e004 	str.w	lr, [r0, #4]
 8002bcc:	ea83 3331 	eor.w	r3, r3, r1, ror #12
 8002bd0:	ea83 43f5 	eor.w	r3, r3, r5, ror #19
 8002bd4:	ea83 133b 	eor.w	r3, r3, fp, ror #4
 8002bd8:	ea83 63bc 	eor.w	r3, r3, ip, ror #26
 8002bdc:	f8d0 7034 	ldr.w	r7, [r0, #52]	@ 0x34
 8002be0:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 8002be4:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8002be8:	f8d0 b05c 	ldr.w	fp, [r0, #92]	@ 0x5c
 8002bec:	f8d0 c0ac 	ldr.w	ip, [r0, #172]	@ 0xac
 8002bf0:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 8002bf4:	ea87 17b5 	eor.w	r7, r7, r5, ror #6
 8002bf8:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 8002bfc:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 8002c00:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8002c04:	ea83 5677 	eor.w	r6, r3, r7, ror #21
 8002c08:	f8d0 4060 	ldr.w	r4, [r0, #96]	@ 0x60
 8002c0c:	f8d0 10b0 	ldr.w	r1, [r0, #176]	@ 0xb0
 8002c10:	f8d0 503c 	ldr.w	r5, [r0, #60]	@ 0x3c
 8002c14:	f8d0 b088 	ldr.w	fp, [r0, #136]	@ 0x88
 8002c18:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8002c1c:	f8cd 6000 	str.w	r6, [sp]
 8002c20:	ea84 2471 	eor.w	r4, r4, r1, ror #9
 8002c24:	ea84 74b5 	eor.w	r4, r4, r5, ror #30
 8002c28:	ea84 24fb 	eor.w	r4, r4, fp, ror #11
 8002c2c:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 8002c30:	ea83 6674 	eor.w	r6, r3, r4, ror #25
 8002c34:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8002c38:	f8d0 1018 	ldr.w	r1, [r0, #24]
 8002c3c:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 8002c40:	f8d0 b0b8 	ldr.w	fp, [r0, #184]	@ 0xb8
 8002c44:	f8d0 c044 	ldr.w	ip, [r0, #68]	@ 0x44
 8002c48:	f8cd 600c 	str.w	r6, [sp, #12]
 8002c4c:	ea83 43b1 	eor.w	r3, r3, r1, ror #18
 8002c50:	ea83 73f5 	eor.w	r3, r3, r5, ror #31
 8002c54:	ea83 43bb 	eor.w	r3, r3, fp, ror #18
 8002c58:	ea83 037c 	eor.w	r3, r3, ip, ror #1
 8002c5c:	ea83 52b7 	eor.w	r2, r3, r7, ror #22
 8002c60:	f8d0 7000 	ldr.w	r7, [r0]
 8002c64:	f8d0 1054 	ldr.w	r1, [r0, #84]	@ 0x54
 8002c68:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8002c6c:	f8d0 b028 	ldr.w	fp, [r0, #40]	@ 0x28
 8002c70:	f8d0 c07c 	ldr.w	ip, [r0, #124]	@ 0x7c
 8002c74:	ea87 77b1 	eor.w	r7, r7, r1, ror #30
 8002c78:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 8002c7c:	ea87 67fb 	eor.w	r7, r7, fp, ror #27
 8002c80:	ea87 373c 	eor.w	r7, r7, ip, ror #12
 8002c84:	ea87 6a34 	eor.w	sl, r7, r4, ror #24
 8002c88:	f8d0 4090 	ldr.w	r4, [r0, #144]	@ 0x90
 8002c8c:	f8d0 101c 	ldr.w	r1, [r0, #28]
 8002c90:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8002c94:	f8d0 b0bc 	ldr.w	fp, [r0, #188]	@ 0xbc
 8002c98:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8002c9c:	ea84 44b1 	eor.w	r4, r4, r1, ror #18
 8002ca0:	ea84 0405 	eor.w	r4, r4, r5
 8002ca4:	ea84 44fb 	eor.w	r4, r4, fp, ror #19
 8002ca8:	ea84 047c 	eor.w	r4, r4, ip, ror #1
 8002cac:	ea84 0e07 	eor.w	lr, r4, r7
 8002cb0:	f8d0 7030 	ldr.w	r7, [r0, #48]	@ 0x30
 8002cb4:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8002cb8:	f8d0 500c 	ldr.w	r5, [r0, #12]
 8002cbc:	f8d0 b058 	ldr.w	fp, [r0, #88]	@ 0x58
 8002cc0:	f8d0 c0a8 	ldr.w	ip, [r0, #168]	@ 0xa8
 8002cc4:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 8002cc8:	ea87 17f5 	eor.w	r7, r7, r5, ror #7
 8002ccc:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 8002cd0:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 8002cd4:	ea4f 5777 	mov.w	r7, r7, ror #21
 8002cd8:	ea87 76f4 	eor.w	r6, r7, r4, ror #31
 8002cdc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	@ 0xc4
 8002ce0:	f8d0 104c 	ldr.w	r1, [r0, #76]	@ 0x4c
 8002ce4:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
 8002ce8:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8002cec:	f8d0 c070 	ldr.w	ip, [r0, #112]	@ 0x70
 8002cf0:	f8cd 6010 	str.w	r6, [sp, #16]
 8002cf4:	ea84 3431 	eor.w	r4, r4, r1, ror #12
 8002cf8:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 8002cfc:	ea84 143b 	eor.w	r4, r4, fp, ror #4
 8002d00:	ea84 64fc 	eor.w	r4, r4, ip, ror #27
 8002d04:	ea87 28b4 	eor.w	r8, r7, r4, ror #10
 8002d08:	f8d0 7064 	ldr.w	r7, [r0, #100]	@ 0x64
 8002d0c:	f8d0 10b4 	ldr.w	r1, [r0, #180]	@ 0xb4
 8002d10:	f8d0 5038 	ldr.w	r5, [r0, #56]	@ 0x38
 8002d14:	f8d0 b08c 	ldr.w	fp, [r0, #140]	@ 0x8c
 8002d18:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8002d1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002d20:	ea87 2731 	eor.w	r7, r7, r1, ror #8
 8002d24:	ea87 77b5 	eor.w	r7, r7, r5, ror #30
 8002d28:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 8002d2c:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
 8002d30:	ea4f 6777 	mov.w	r7, r7, ror #25
 8002d34:	ea87 2974 	eor.w	r9, r7, r4, ror #9
 8002d38:	f8d0 4004 	ldr.w	r4, [r0, #4]
 8002d3c:	f8d0 1050 	ldr.w	r1, [r0, #80]	@ 0x50
 8002d40:	f8d0 50a4 	ldr.w	r5, [r0, #164]	@ 0xa4
 8002d44:	f8d0 b02c 	ldr.w	fp, [r0, #44]	@ 0x2c
 8002d48:	f8d0 c078 	ldr.w	ip, [r0, #120]	@ 0x78
 8002d4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8002d50:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 8002d54:	ea84 5435 	eor.w	r4, r4, r5, ror #20
 8002d58:	ea84 64fb 	eor.w	r4, r4, fp, ror #27
 8002d5c:	ea84 347c 	eor.w	r4, r4, ip, ror #13
 8002d60:	ea84 0b07 	eor.w	fp, r4, r7
 8002d64:	ea83 7cf4 	eor.w	ip, r3, r4, ror #31
 8002d68:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8002d6c:	f8d0 4048 	ldr.w	r4, [r0, #72]	@ 0x48
 8002d70:	f8d0 50a4 	ldr.w	r5, [r0, #164]	@ 0xa4
 8002d74:	f8d0 605c 	ldr.w	r6, [r0, #92]	@ 0x5c
 8002d78:	f8d0 7014 	ldr.w	r7, [r0, #20]
 8002d7c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8002d80:	ea89 0303 	eor.w	r3, r9, r3
 8002d84:	ea8c 54b4 	eor.w	r4, ip, r4, ror #22
 8002d88:	ea88 5535 	eor.w	r5, r8, r5, ror #20
 8002d8c:	ea8b 6676 	eor.w	r6, fp, r6, ror #25
 8002d90:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 8002d94:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8002d98:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8002d9c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8002da0:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8002da4:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 8002da8:	f8c0 105c 	str.w	r1, [r0, #92]	@ 0x5c
 8002dac:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 8002db0:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8002db4:	f8c0 1014 	str.w	r1, [r0, #20]
 8002db8:	ea23 31f7 	bic.w	r1, r3, r7, ror #15
 8002dbc:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 8002dc0:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8002dc4:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002dc8:	ea81 21f7 	eor.w	r1, r1, r7, ror #11
 8002dcc:	f8d0 3030 	ldr.w	r3, [r0, #48]	@ 0x30
 8002dd0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	@ 0xb0
 8002dd4:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 8002dd8:	f8d0 6020 	ldr.w	r6, [r0, #32]
 8002ddc:	f8d0 7078 	ldr.w	r7, [r0, #120]	@ 0x78
 8002de0:	f8c0 1048 	str.w	r1, [r0, #72]	@ 0x48
 8002de4:	ea8a 5373 	eor.w	r3, sl, r3, ror #21
 8002de8:	ea82 04b4 	eor.w	r4, r2, r4, ror #2
 8002dec:	ea89 75f5 	eor.w	r5, r9, r5, ror #31
 8002df0:	ea8e 36b6 	eor.w	r6, lr, r6, ror #14
 8002df4:	ea88 3777 	eor.w	r7, r8, r7, ror #13
 8002df8:	ea25 2174 	bic.w	r1, r5, r4, ror #9
 8002dfc:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8002e00:	f8c0 1078 	str.w	r1, [r0, #120]	@ 0x78
 8002e04:	ea26 6135 	bic.w	r1, r6, r5, ror #24
 8002e08:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8002e0c:	f8c0 1030 	str.w	r1, [r0, #48]	@ 0x30
 8002e10:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 8002e14:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8002e18:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 8002e1c:	ea23 51f7 	bic.w	r1, r3, r7, ror #23
 8002e20:	ea81 7136 	eor.w	r1, r1, r6, ror #28
 8002e24:	f8c0 106c 	str.w	r1, [r0, #108]	@ 0x6c
 8002e28:	ea24 01f3 	bic.w	r1, r4, r3, ror #3
 8002e2c:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8002e30:	f8dd 8000 	ldr.w	r8, [sp]
 8002e34:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
 8002e38:	f8d0 4054 	ldr.w	r4, [r0, #84]	@ 0x54
 8002e3c:	f8d0 500c 	ldr.w	r5, [r0, #12]
 8002e40:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 8002e44:	f8d0 7044 	ldr.w	r7, [r0, #68]	@ 0x44
 8002e48:	f8c0 1020 	str.w	r1, [r0, #32]
 8002e4c:	ea8e 23b3 	eor.w	r3, lr, r3, ror #10
 8002e50:	ea88 74b4 	eor.w	r4, r8, r4, ror #30
 8002e54:	ea8a 7535 	eor.w	r5, sl, r5, ror #28
 8002e58:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 8002e5c:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 8002e60:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 8002e64:	ea81 51f3 	eor.w	r1, r1, r3, ror #23
 8002e68:	f8c0 1054 	str.w	r1, [r0, #84]	@ 0x54
 8002e6c:	ea26 01f5 	bic.w	r1, r6, r5, ror #3
 8002e70:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 8002e74:	f8c0 100c 	str.w	r1, [r0, #12]
 8002e78:	ea27 5136 	bic.w	r1, r7, r6, ror #20
 8002e7c:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8002e80:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
 8002e84:	ea23 41b7 	bic.w	r1, r3, r7, ror #18
 8002e88:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8002e8c:	f8c0 1044 	str.w	r1, [r0, #68]	@ 0x44
 8002e90:	ea24 1133 	bic.w	r1, r4, r3, ror #4
 8002e94:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8002e98:	f8d0 3060 	ldr.w	r3, [r0, #96]	@ 0x60
 8002e9c:	f8d0 4018 	ldr.w	r4, [r0, #24]
 8002ea0:	f8d0 5098 	ldr.w	r5, [r0, #152]	@ 0x98
 8002ea4:	f8d0 6028 	ldr.w	r6, [r0, #40]	@ 0x28
 8002ea8:	f8d0 70ac 	ldr.w	r7, [r0, #172]	@ 0xac
 8002eac:	f8c0 10c4 	str.w	r1, [r0, #196]	@ 0xc4
 8002eb0:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 8002eb4:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 8002eb8:	ea8c 7575 	eor.w	r5, ip, r5, ror #29
 8002ebc:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 8002ec0:	ea8b 3737 	eor.w	r7, fp, r7, ror #12
 8002ec4:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8002ec8:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8002ecc:	f8c0 1028 	str.w	r1, [r0, #40]	@ 0x28
 8002ed0:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 8002ed4:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8002ed8:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 8002edc:	ea27 3176 	bic.w	r1, r7, r6, ror #13
 8002ee0:	ea81 31b5 	eor.w	r1, r1, r5, ror #14
 8002ee4:	f8c0 1060 	str.w	r1, [r0, #96]	@ 0x60
 8002ee8:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 8002eec:	ea81 21f6 	eor.w	r1, r1, r6, ror #11
 8002ef0:	f8c0 1018 	str.w	r1, [r0, #24]
 8002ef4:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002ef8:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8002efc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002f00:	f8d0 3000 	ldr.w	r3, [r0]
 8002f04:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8002f08:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8002f0a:	f8d0 60bc 	ldr.w	r6, [r0, #188]	@ 0xbc
 8002f0e:	6f47      	ldr	r7, [r0, #116]	@ 0x74
 8002f10:	f8c0 1098 	str.w	r1, [r0, #152]	@ 0x98
 8002f14:	ea88 0303 	eor.w	r3, r8, r3
 8002f18:	ea8a 2474 	eor.w	r4, sl, r4, ror #9
 8002f1c:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 8002f20:	ea89 46f6 	eor.w	r6, r9, r6, ror #19
 8002f24:	ea8c 1737 	eor.w	r7, ip, r7, ror #4
 8002f28:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8002f2c:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8002f30:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 8002f34:	ea27 7136 	bic.w	r1, r7, r6, ror #28
 8002f38:	ea81 4175 	eor.w	r1, r1, r5, ror #17
 8002f3c:	f8c0 103c 	str.w	r1, [r0, #60]	@ 0x3c
 8002f40:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8002f44:	ea81 5176 	eor.w	r1, r1, r6, ror #21
 8002f48:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
 8002f4c:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8002f50:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8002f54:	f8c0 1074 	str.w	r1, [r0, #116]	@ 0x74
 8002f58:	ea25 0504 	bic.w	r5, r5, r4
 8002f5c:	9905      	ldr	r1, [sp, #20]
 8002f5e:	688c      	ldr	r4, [r1, #8]
 8002f60:	ea83 23b5 	eor.w	r3, r3, r5, ror #10
 8002f64:	ea84 0103 	eor.w	r1, r4, r3
 8002f68:	f8dd 2010 	ldr.w	r2, [sp, #16]
 8002f6c:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8002f70:	f8d0 404c 	ldr.w	r4, [r0, #76]	@ 0x4c
 8002f74:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8002f78:	f8d0 6058 	ldr.w	r6, [r0, #88]	@ 0x58
 8002f7c:	f8d0 7010 	ldr.w	r7, [r0, #16]
 8002f80:	f8c0 1000 	str.w	r1, [r0]
 8002f84:	ea89 0303 	eor.w	r3, r9, r3
 8002f88:	ea8e 54b4 	eor.w	r4, lr, r4, ror #22
 8002f8c:	ea88 45f5 	eor.w	r5, r8, r5, ror #19
 8002f90:	ea8a 6636 	eor.w	r6, sl, r6, ror #24
 8002f94:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 8002f98:	ea25 51f4 	bic.w	r1, r5, r4, ror #23
 8002f9c:	ea81 41f3 	eor.w	r1, r1, r3, ror #19
 8002fa0:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
 8002fa4:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8002fa8:	ea81 3134 	eor.w	r1, r1, r4, ror #12
 8002fac:	f8c0 1058 	str.w	r1, [r0, #88]	@ 0x58
 8002fb0:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 8002fb4:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8002fb8:	f8c0 1010 	str.w	r1, [r0, #16]
 8002fbc:	ea23 4137 	bic.w	r1, r3, r7, ror #16
 8002fc0:	ea81 6136 	eor.w	r1, r1, r6, ror #24
 8002fc4:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 8002fc8:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8002fcc:	ea81 3137 	eor.w	r1, r1, r7, ror #12
 8002fd0:	f8d0 3034 	ldr.w	r3, [r0, #52]	@ 0x34
 8002fd4:	f8d0 40b4 	ldr.w	r4, [r0, #180]	@ 0xb4
 8002fd8:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8002fdc:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
 8002fe0:	f8d0 707c 	ldr.w	r7, [r0, #124]	@ 0x7c
 8002fe4:	f8c0 104c 	str.w	r1, [r0, #76]	@ 0x4c
 8002fe8:	ea8b 53b3 	eor.w	r3, fp, r3, ror #22
 8002fec:	ea82 0474 	eor.w	r4, r2, r4, ror #1
 8002ff0:	ea89 0505 	eor.w	r5, r9, r5
 8002ff4:	ea8c 36b6 	eor.w	r6, ip, r6, ror #14
 8002ff8:	ea88 3737 	eor.w	r7, r8, r7, ror #12
 8002ffc:	ea25 21b4 	bic.w	r1, r5, r4, ror #10
 8003000:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8003004:	f8c0 107c 	str.w	r1, [r0, #124]	@ 0x7c
 8003008:	ea26 51f5 	bic.w	r1, r6, r5, ror #23
 800300c:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8003010:	f8c0 1034 	str.w	r1, [r0, #52]	@ 0x34
 8003014:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 8003018:	ea81 7135 	eor.w	r1, r1, r5, ror #28
 800301c:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 8003020:	ea23 6137 	bic.w	r1, r3, r7, ror #24
 8003024:	ea81 7176 	eor.w	r1, r1, r6, ror #29
 8003028:	f8c0 1068 	str.w	r1, [r0, #104]	@ 0x68
 800302c:	ea24 01b3 	bic.w	r1, r4, r3, ror #2
 8003030:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8003034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003038:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800303c:	f8d0 4050 	ldr.w	r4, [r0, #80]	@ 0x50
 8003040:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8003044:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 8003048:	f8d0 7040 	ldr.w	r7, [r0, #64]	@ 0x40
 800304c:	f8c0 1024 	str.w	r1, [r0, #36]	@ 0x24
 8003050:	ea8c 23b3 	eor.w	r3, ip, r3, ror #10
 8003054:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
 8003058:	ea8b 7535 	eor.w	r5, fp, r5, ror #28
 800305c:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 8003060:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 8003064:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 8003068:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 800306c:	f8c0 1050 	str.w	r1, [r0, #80]	@ 0x50
 8003070:	ea26 01b5 	bic.w	r1, r6, r5, ror #2
 8003074:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8003078:	f8c0 1008 	str.w	r1, [r0, #8]
 800307c:	ea27 5176 	bic.w	r1, r7, r6, ror #21
 8003080:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8003084:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8003088:	ea23 4177 	bic.w	r1, r3, r7, ror #17
 800308c:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8003090:	f8c0 1040 	str.w	r1, [r0, #64]	@ 0x40
 8003094:	ea24 1173 	bic.w	r1, r4, r3, ror #5
 8003098:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 800309c:	f8d0 3064 	ldr.w	r3, [r0, #100]	@ 0x64
 80030a0:	f8d0 401c 	ldr.w	r4, [r0, #28]
 80030a4:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
 80030a8:	f8d0 602c 	ldr.w	r6, [r0, #44]	@ 0x2c
 80030ac:	f8d0 70a8 	ldr.w	r7, [r0, #168]	@ 0xa8
 80030b0:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 80030b4:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 80030b8:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 80030bc:	ea8e 7575 	eor.w	r5, lr, r5, ror #29
 80030c0:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 80030c4:	ea8a 27f7 	eor.w	r7, sl, r7, ror #11
 80030c8:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 80030cc:	ea81 5173 	eor.w	r1, r1, r3, ror #21
 80030d0:	f8c0 102c 	str.w	r1, [r0, #44]	@ 0x2c
 80030d4:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 80030d8:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80030dc:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 80030e0:	ea27 3136 	bic.w	r1, r7, r6, ror #12
 80030e4:	ea81 3175 	eor.w	r1, r1, r5, ror #13
 80030e8:	f8c0 1064 	str.w	r1, [r0, #100]	@ 0x64
 80030ec:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 80030f0:	ea81 21b6 	eor.w	r1, r1, r6, ror #10
 80030f4:	f8c0 101c 	str.w	r1, [r0, #28]
 80030f8:	ea24 7173 	bic.w	r1, r4, r3, ror #29
 80030fc:	ea81 61f7 	eor.w	r1, r1, r7, ror #27
 8003100:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003104:	f8d0 3004 	ldr.w	r3, [r0, #4]
 8003108:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
 800310c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800310e:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
 8003112:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8003114:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8003118:	ea88 0303 	eor.w	r3, r8, r3
 800311c:	ea8b 24b4 	eor.w	r4, fp, r4, ror #10
 8003120:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 8003124:	ea89 46b6 	eor.w	r6, r9, r6, ror #18
 8003128:	ea8e 1777 	eor.w	r7, lr, r7, ror #5
 800312c:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003130:	ea81 5134 	eor.w	r1, r1, r4, ror #20
 8003134:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 8003138:	ea27 7176 	bic.w	r1, r7, r6, ror #29
 800313c:	ea81 41b5 	eor.w	r1, r1, r5, ror #18
 8003140:	f8c0 1038 	str.w	r1, [r0, #56]	@ 0x38
 8003144:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8003148:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 800314c:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
 8003150:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8003154:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8003158:	f8c0 1070 	str.w	r1, [r0, #112]	@ 0x70
 800315c:	ea25 75f4 	bic.w	r5, r5, r4, ror #31
 8003160:	9905      	ldr	r1, [sp, #20]
 8003162:	68cc      	ldr	r4, [r1, #12]
 8003164:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
 8003168:	ea84 0e03 	eor.w	lr, r4, r3
	KeccakRound2
 800316c:	f8d0 3074 	ldr.w	r3, [r0, #116]	@ 0x74
 8003170:	f8d0 1048 	ldr.w	r1, [r0, #72]	@ 0x48
 8003174:	f8d0 5024 	ldr.w	r5, [r0, #36]	@ 0x24
 8003178:	f8d0 b0c4 	ldr.w	fp, [r0, #196]	@ 0xc4
 800317c:	f8d0 c09c 	ldr.w	ip, [r0, #156]	@ 0x9c
 8003180:	f8c0 e004 	str.w	lr, [r0, #4]
 8003184:	ea83 3331 	eor.w	r3, r3, r1, ror #12
 8003188:	ea83 43f5 	eor.w	r3, r3, r5, ror #19
 800318c:	ea83 133b 	eor.w	r3, r3, fp, ror #4
 8003190:	ea83 63bc 	eor.w	r3, r3, ip, ror #26
 8003194:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
 8003198:	f8d0 1058 	ldr.w	r1, [r0, #88]	@ 0x58
 800319c:	f8d0 5030 	ldr.w	r5, [r0, #48]	@ 0x30
 80031a0:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80031a4:	f8d0 c0ac 	ldr.w	ip, [r0, #172]	@ 0xac
 80031a8:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 80031ac:	ea87 17b5 	eor.w	r7, r7, r5, ror #6
 80031b0:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 80031b4:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 80031b8:	ea4f 23b3 	mov.w	r3, r3, ror #10
 80031bc:	ea83 5677 	eor.w	r6, r3, r7, ror #21
 80031c0:	f8d0 4038 	ldr.w	r4, [r0, #56]	@ 0x38
 80031c4:	f8d0 1010 	ldr.w	r1, [r0, #16]
 80031c8:	f8d0 50b0 	ldr.w	r5, [r0, #176]	@ 0xb0
 80031cc:	f8d0 b08c 	ldr.w	fp, [r0, #140]	@ 0x8c
 80031d0:	f8d0 c060 	ldr.w	ip, [r0, #96]	@ 0x60
 80031d4:	f8cd 6000 	str.w	r6, [sp]
 80031d8:	ea84 2471 	eor.w	r4, r4, r1, ror #9
 80031dc:	ea84 74b5 	eor.w	r4, r4, r5, ror #30
 80031e0:	ea84 24fb 	eor.w	r4, r4, fp, ror #11
 80031e4:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 80031e8:	ea83 6674 	eor.w	r6, r3, r4, ror #25
 80031ec:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 80031f0:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 80031f4:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 80031f8:	f8d0 b044 	ldr.w	fp, [r0, #68]	@ 0x44
 80031fc:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 8003200:	f8cd 600c 	str.w	r6, [sp, #12]
 8003204:	ea83 43b1 	eor.w	r3, r3, r1, ror #18
 8003208:	ea83 73f5 	eor.w	r3, r3, r5, ror #31
 800320c:	ea83 43bb 	eor.w	r3, r3, fp, ror #18
 8003210:	ea83 037c 	eor.w	r3, r3, ip, ror #1
 8003214:	ea83 52b7 	eor.w	r2, r3, r7, ror #22
 8003218:	f8d0 7000 	ldr.w	r7, [r0]
 800321c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	@ 0xa4
 8003220:	f8d0 507c 	ldr.w	r5, [r0, #124]	@ 0x7c
 8003224:	f8d0 b054 	ldr.w	fp, [r0, #84]	@ 0x54
 8003228:	f8d0 c02c 	ldr.w	ip, [r0, #44]	@ 0x2c
 800322c:	ea87 77b1 	eor.w	r7, r7, r1, ror #30
 8003230:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 8003234:	ea87 67fb 	eor.w	r7, r7, fp, ror #27
 8003238:	ea87 373c 	eor.w	r7, r7, ip, ror #12
 800323c:	ea87 6a34 	eor.w	sl, r7, r4, ror #24
 8003240:	f8d0 40b8 	ldr.w	r4, [r0, #184]	@ 0xb8
 8003244:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 8003248:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 800324c:	f8d0 b040 	ldr.w	fp, [r0, #64]	@ 0x40
 8003250:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8003254:	ea84 44b1 	eor.w	r4, r4, r1, ror #18
 8003258:	ea84 0405 	eor.w	r4, r4, r5
 800325c:	ea84 44fb 	eor.w	r4, r4, fp, ror #19
 8003260:	ea84 047c 	eor.w	r4, r4, ip, ror #1
 8003264:	ea84 0e07 	eor.w	lr, r4, r7
 8003268:	f8d0 7084 	ldr.w	r7, [r0, #132]	@ 0x84
 800326c:	f8d0 105c 	ldr.w	r1, [r0, #92]	@ 0x5c
 8003270:	f8d0 5034 	ldr.w	r5, [r0, #52]	@ 0x34
 8003274:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8003278:	f8d0 c0a8 	ldr.w	ip, [r0, #168]	@ 0xa8
 800327c:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 8003280:	ea87 17f5 	eor.w	r7, r7, r5, ror #7
 8003284:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 8003288:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 800328c:	ea4f 5777 	mov.w	r7, r7, ror #21
 8003290:	ea87 76f4 	eor.w	r6, r7, r4, ror #31
 8003294:	f8d0 4070 	ldr.w	r4, [r0, #112]	@ 0x70
 8003298:	f8d0 104c 	ldr.w	r1, [r0, #76]	@ 0x4c
 800329c:	f8d0 5020 	ldr.w	r5, [r0, #32]
 80032a0:	f8d0 b0c0 	ldr.w	fp, [r0, #192]	@ 0xc0
 80032a4:	f8d0 c098 	ldr.w	ip, [r0, #152]	@ 0x98
 80032a8:	f8cd 6010 	str.w	r6, [sp, #16]
 80032ac:	ea84 3431 	eor.w	r4, r4, r1, ror #12
 80032b0:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 80032b4:	ea84 143b 	eor.w	r4, r4, fp, ror #4
 80032b8:	ea84 64fc 	eor.w	r4, r4, ip, ror #27
 80032bc:	ea87 28b4 	eor.w	r8, r7, r4, ror #10
 80032c0:	f8d0 703c 	ldr.w	r7, [r0, #60]	@ 0x3c
 80032c4:	f8d0 1014 	ldr.w	r1, [r0, #20]
 80032c8:	f8d0 50b4 	ldr.w	r5, [r0, #180]	@ 0xb4
 80032cc:	f8d0 b088 	ldr.w	fp, [r0, #136]	@ 0x88
 80032d0:	f8d0 c064 	ldr.w	ip, [r0, #100]	@ 0x64
 80032d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80032d8:	ea87 2731 	eor.w	r7, r7, r1, ror #8
 80032dc:	ea87 77b5 	eor.w	r7, r7, r5, ror #30
 80032e0:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 80032e4:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
 80032e8:	ea4f 6777 	mov.w	r7, r7, ror #25
 80032ec:	ea87 2974 	eor.w	r9, r7, r4, ror #9
 80032f0:	f8d0 4004 	ldr.w	r4, [r0, #4]
 80032f4:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 80032f8:	f8d0 5078 	ldr.w	r5, [r0, #120]	@ 0x78
 80032fc:	f8d0 b050 	ldr.w	fp, [r0, #80]	@ 0x50
 8003300:	f8d0 c028 	ldr.w	ip, [r0, #40]	@ 0x28
 8003304:	f8cd 9008 	str.w	r9, [sp, #8]
 8003308:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 800330c:	ea84 5435 	eor.w	r4, r4, r5, ror #20
 8003310:	ea84 64fb 	eor.w	r4, r4, fp, ror #27
 8003314:	ea84 347c 	eor.w	r4, r4, ip, ror #13
 8003318:	ea84 0b07 	eor.w	fp, r4, r7
 800331c:	ea83 7cf4 	eor.w	ip, r3, r4, ror #31
 8003320:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 8003324:	f8d0 4048 	ldr.w	r4, [r0, #72]	@ 0x48
 8003328:	f8d0 5078 	ldr.w	r5, [r0, #120]	@ 0x78
 800332c:	f8d0 6008 	ldr.w	r6, [r0, #8]
 8003330:	f8d0 7060 	ldr.w	r7, [r0, #96]	@ 0x60
 8003334:	f8c0 1078 	str.w	r1, [r0, #120]	@ 0x78
 8003338:	ea89 0303 	eor.w	r3, r9, r3
 800333c:	ea8c 54b4 	eor.w	r4, ip, r4, ror #22
 8003340:	ea88 5535 	eor.w	r5, r8, r5, ror #20
 8003344:	ea8b 6676 	eor.w	r6, fp, r6, ror #25
 8003348:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 800334c:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003350:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8003354:	f8c0 1078 	str.w	r1, [r0, #120]	@ 0x78
 8003358:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 800335c:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 8003360:	f8c0 1008 	str.w	r1, [r0, #8]
 8003364:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 8003368:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 800336c:	f8c0 1060 	str.w	r1, [r0, #96]	@ 0x60
 8003370:	ea23 31f7 	bic.w	r1, r3, r7, ror #15
 8003374:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 8003378:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
 800337c:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8003380:	ea81 21f7 	eor.w	r1, r1, r7, ror #11
 8003384:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8003388:	f8d0 4010 	ldr.w	r4, [r0, #16]
 800338c:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8003390:	f8d0 60c0 	ldr.w	r6, [r0, #192]	@ 0xc0
 8003394:	f8d0 7028 	ldr.w	r7, [r0, #40]	@ 0x28
 8003398:	f8c0 1048 	str.w	r1, [r0, #72]	@ 0x48
 800339c:	ea8a 5373 	eor.w	r3, sl, r3, ror #21
 80033a0:	ea82 04b4 	eor.w	r4, r2, r4, ror #2
 80033a4:	ea89 75f5 	eor.w	r5, r9, r5, ror #31
 80033a8:	ea8e 36b6 	eor.w	r6, lr, r6, ror #14
 80033ac:	ea88 3777 	eor.w	r7, r8, r7, ror #13
 80033b0:	ea25 2174 	bic.w	r1, r5, r4, ror #9
 80033b4:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 80033b8:	f8c0 1028 	str.w	r1, [r0, #40]	@ 0x28
 80033bc:	ea26 6135 	bic.w	r1, r6, r5, ror #24
 80033c0:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 80033c4:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 80033c8:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 80033cc:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 80033d0:	f8c0 1010 	str.w	r1, [r0, #16]
 80033d4:	ea23 51f7 	bic.w	r1, r3, r7, ror #23
 80033d8:	ea81 7136 	eor.w	r1, r1, r6, ror #28
 80033dc:	f8c0 1068 	str.w	r1, [r0, #104]	@ 0x68
 80033e0:	ea24 01f3 	bic.w	r1, r4, r3, ror #3
 80033e4:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 80033e8:	f8dd 8000 	ldr.w	r8, [sp]
 80033ec:	f8d0 3070 	ldr.w	r3, [r0, #112]	@ 0x70
 80033f0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	@ 0xa4
 80033f4:	f8d0 5034 	ldr.w	r5, [r0, #52]	@ 0x34
 80033f8:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 80033fc:	f8d0 701c 	ldr.w	r7, [r0, #28]
 8003400:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 8003404:	ea8e 23b3 	eor.w	r3, lr, r3, ror #10
 8003408:	ea88 74b4 	eor.w	r4, r8, r4, ror #30
 800340c:	ea8a 7535 	eor.w	r5, sl, r5, ror #28
 8003410:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 8003414:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 8003418:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 800341c:	ea81 51f3 	eor.w	r1, r1, r3, ror #23
 8003420:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8003424:	ea26 01f5 	bic.w	r1, r6, r5, ror #3
 8003428:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 800342c:	f8c0 1034 	str.w	r1, [r0, #52]	@ 0x34
 8003430:	ea27 5136 	bic.w	r1, r7, r6, ror #20
 8003434:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8003438:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800343c:	ea23 41b7 	bic.w	r1, r3, r7, ror #18
 8003440:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8003444:	f8c0 101c 	str.w	r1, [r0, #28]
 8003448:	ea24 1133 	bic.w	r1, r4, r3, ror #4
 800344c:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8003450:	f8d0 3038 	ldr.w	r3, [r0, #56]	@ 0x38
 8003454:	f8d0 4094 	ldr.w	r4, [r0, #148]	@ 0x94
 8003458:	f8d0 5024 	ldr.w	r5, [r0, #36]	@ 0x24
 800345c:	f8d0 6054 	ldr.w	r6, [r0, #84]	@ 0x54
 8003460:	f8d0 70ac 	ldr.w	r7, [r0, #172]	@ 0xac
 8003464:	f8c0 1070 	str.w	r1, [r0, #112]	@ 0x70
 8003468:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 800346c:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 8003470:	ea8c 7575 	eor.w	r5, ip, r5, ror #29
 8003474:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 8003478:	ea8b 3737 	eor.w	r7, fp, r7, ror #12
 800347c:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003480:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8003484:	f8c0 1054 	str.w	r1, [r0, #84]	@ 0x54
 8003488:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 800348c:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003490:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 8003494:	ea27 3176 	bic.w	r1, r7, r6, ror #13
 8003498:	ea81 31b5 	eor.w	r1, r1, r5, ror #14
 800349c:	f8c0 1038 	str.w	r1, [r0, #56]	@ 0x38
 80034a0:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 80034a4:	ea81 21f6 	eor.w	r1, r1, r6, ror #11
 80034a8:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 80034ac:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 80034b0:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 80034b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80034b8:	f8d0 3000 	ldr.w	r3, [r0]
 80034bc:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80034be:	f8d0 50b0 	ldr.w	r5, [r0, #176]	@ 0xb0
 80034c2:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80034c4:	f8d0 709c 	ldr.w	r7, [r0, #156]	@ 0x9c
 80034c8:	f8c0 1024 	str.w	r1, [r0, #36]	@ 0x24
 80034cc:	ea88 0303 	eor.w	r3, r8, r3
 80034d0:	ea8a 2474 	eor.w	r4, sl, r4, ror #9
 80034d4:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 80034d8:	ea89 46f6 	eor.w	r6, r9, r6, ror #19
 80034dc:	ea8c 1737 	eor.w	r7, ip, r7, ror #4
 80034e0:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 80034e4:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 80034e8:	f8c0 105c 	str.w	r1, [r0, #92]	@ 0x5c
 80034ec:	ea27 7136 	bic.w	r1, r7, r6, ror #28
 80034f0:	ea81 4175 	eor.w	r1, r1, r5, ror #17
 80034f4:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 80034f8:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 80034fc:	ea81 5176 	eor.w	r1, r1, r6, ror #21
 8003500:	f8c0 1040 	str.w	r1, [r0, #64]	@ 0x40
 8003504:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8003508:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 800350c:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8003510:	ea25 0504 	bic.w	r5, r5, r4
 8003514:	9905      	ldr	r1, [sp, #20]
 8003516:	690c      	ldr	r4, [r1, #16]
 8003518:	ea83 23b5 	eor.w	r3, r3, r5, ror #10
 800351c:	ea84 0103 	eor.w	r1, r4, r3
 8003520:	f8dd 2010 	ldr.w	r2, [sp, #16]
 8003524:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 8003528:	f8d0 404c 	ldr.w	r4, [r0, #76]	@ 0x4c
 800352c:	f8d0 507c 	ldr.w	r5, [r0, #124]	@ 0x7c
 8003530:	f8d0 600c 	ldr.w	r6, [r0, #12]
 8003534:	f8d0 7064 	ldr.w	r7, [r0, #100]	@ 0x64
 8003538:	f8c0 1000 	str.w	r1, [r0]
 800353c:	ea89 0303 	eor.w	r3, r9, r3
 8003540:	ea8e 54b4 	eor.w	r4, lr, r4, ror #22
 8003544:	ea88 45f5 	eor.w	r5, r8, r5, ror #19
 8003548:	ea8a 6636 	eor.w	r6, sl, r6, ror #24
 800354c:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 8003550:	ea25 51f4 	bic.w	r1, r5, r4, ror #23
 8003554:	ea81 41f3 	eor.w	r1, r1, r3, ror #19
 8003558:	f8c0 107c 	str.w	r1, [r0, #124]	@ 0x7c
 800355c:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003560:	ea81 3134 	eor.w	r1, r1, r4, ror #12
 8003564:	f8c0 100c 	str.w	r1, [r0, #12]
 8003568:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 800356c:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8003570:	f8c0 1064 	str.w	r1, [r0, #100]	@ 0x64
 8003574:	ea23 4137 	bic.w	r1, r3, r7, ror #16
 8003578:	ea81 6136 	eor.w	r1, r1, r6, ror #24
 800357c:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
 8003580:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8003584:	ea81 3137 	eor.w	r1, r1, r7, ror #12
 8003588:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800358c:	f8d0 4014 	ldr.w	r4, [r0, #20]
 8003590:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 8003594:	f8d0 60c4 	ldr.w	r6, [r0, #196]	@ 0xc4
 8003598:	f8d0 702c 	ldr.w	r7, [r0, #44]	@ 0x2c
 800359c:	f8c0 104c 	str.w	r1, [r0, #76]	@ 0x4c
 80035a0:	ea8b 53b3 	eor.w	r3, fp, r3, ror #22
 80035a4:	ea82 0474 	eor.w	r4, r2, r4, ror #1
 80035a8:	ea89 0505 	eor.w	r5, r9, r5
 80035ac:	ea8c 36b6 	eor.w	r6, ip, r6, ror #14
 80035b0:	ea88 3737 	eor.w	r7, r8, r7, ror #12
 80035b4:	ea25 21b4 	bic.w	r1, r5, r4, ror #10
 80035b8:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 80035bc:	f8c0 102c 	str.w	r1, [r0, #44]	@ 0x2c
 80035c0:	ea26 51f5 	bic.w	r1, r6, r5, ror #23
 80035c4:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 80035c8:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 80035cc:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 80035d0:	ea81 7135 	eor.w	r1, r1, r5, ror #28
 80035d4:	f8c0 1014 	str.w	r1, [r0, #20]
 80035d8:	ea23 6137 	bic.w	r1, r3, r7, ror #24
 80035dc:	ea81 7176 	eor.w	r1, r1, r6, ror #29
 80035e0:	f8c0 106c 	str.w	r1, [r0, #108]	@ 0x6c
 80035e4:	ea24 01b3 	bic.w	r1, r4, r3, ror #2
 80035e8:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 80035ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80035f0:	f8d0 3074 	ldr.w	r3, [r0, #116]	@ 0x74
 80035f4:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
 80035f8:	f8d0 5030 	ldr.w	r5, [r0, #48]	@ 0x30
 80035fc:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 8003600:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8003604:	f8c0 10c4 	str.w	r1, [r0, #196]	@ 0xc4
 8003608:	ea8c 23b3 	eor.w	r3, ip, r3, ror #10
 800360c:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
 8003610:	ea8b 7535 	eor.w	r5, fp, r5, ror #28
 8003614:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 8003618:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 800361c:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 8003620:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8003624:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
 8003628:	ea26 01b5 	bic.w	r1, r6, r5, ror #2
 800362c:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8003630:	f8c0 1030 	str.w	r1, [r0, #48]	@ 0x30
 8003634:	ea27 5176 	bic.w	r1, r7, r6, ror #21
 8003638:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 800363c:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
 8003640:	ea23 4177 	bic.w	r1, r3, r7, ror #17
 8003644:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8003648:	f8c0 1018 	str.w	r1, [r0, #24]
 800364c:	ea24 1173 	bic.w	r1, r4, r3, ror #5
 8003650:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8003654:	f8d0 303c 	ldr.w	r3, [r0, #60]	@ 0x3c
 8003658:	f8d0 4090 	ldr.w	r4, [r0, #144]	@ 0x90
 800365c:	f8d0 5020 	ldr.w	r5, [r0, #32]
 8003660:	f8d0 6050 	ldr.w	r6, [r0, #80]	@ 0x50
 8003664:	f8d0 70a8 	ldr.w	r7, [r0, #168]	@ 0xa8
 8003668:	f8c0 1074 	str.w	r1, [r0, #116]	@ 0x74
 800366c:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 8003670:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 8003674:	ea8e 7575 	eor.w	r5, lr, r5, ror #29
 8003678:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 800367c:	ea8a 27f7 	eor.w	r7, sl, r7, ror #11
 8003680:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003684:	ea81 5173 	eor.w	r1, r1, r3, ror #21
 8003688:	f8c0 1050 	str.w	r1, [r0, #80]	@ 0x50
 800368c:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 8003690:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003694:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8003698:	ea27 3136 	bic.w	r1, r7, r6, ror #12
 800369c:	ea81 3175 	eor.w	r1, r1, r5, ror #13
 80036a0:	f8c0 103c 	str.w	r1, [r0, #60]	@ 0x3c
 80036a4:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 80036a8:	ea81 21b6 	eor.w	r1, r1, r6, ror #10
 80036ac:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 80036b0:	ea24 7173 	bic.w	r1, r4, r3, ror #29
 80036b4:	ea81 61f7 	eor.w	r1, r1, r7, ror #27
 80036b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80036bc:	f8d0 3004 	ldr.w	r3, [r0, #4]
 80036c0:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80036c2:	f8d0 50b4 	ldr.w	r5, [r0, #180]	@ 0xb4
 80036c6:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80036c8:	f8d0 7098 	ldr.w	r7, [r0, #152]	@ 0x98
 80036cc:	f8c0 1020 	str.w	r1, [r0, #32]
 80036d0:	ea88 0303 	eor.w	r3, r8, r3
 80036d4:	ea8b 24b4 	eor.w	r4, fp, r4, ror #10
 80036d8:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 80036dc:	ea89 46b6 	eor.w	r6, r9, r6, ror #18
 80036e0:	ea8e 1777 	eor.w	r7, lr, r7, ror #5
 80036e4:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 80036e8:	ea81 5134 	eor.w	r1, r1, r4, ror #20
 80036ec:	f8c0 1058 	str.w	r1, [r0, #88]	@ 0x58
 80036f0:	ea27 7176 	bic.w	r1, r7, r6, ror #29
 80036f4:	ea81 41b5 	eor.w	r1, r1, r5, ror #18
 80036f8:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 80036fc:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8003700:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 8003704:	f8c0 1044 	str.w	r1, [r0, #68]	@ 0x44
 8003708:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 800370c:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8003710:	f8c0 1098 	str.w	r1, [r0, #152]	@ 0x98
 8003714:	ea25 75f4 	bic.w	r5, r5, r4, ror #31
 8003718:	9905      	ldr	r1, [sp, #20]
 800371a:	694c      	ldr	r4, [r1, #20]
 800371c:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
 8003720:	ea84 0e03 	eor.w	lr, r4, r3
	KeccakRound3
 8003724:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003728:	f8d0 1048 	ldr.w	r1, [r0, #72]	@ 0x48
 800372c:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
 8003730:	f8d0 b070 	ldr.w	fp, [r0, #112]	@ 0x70
 8003734:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8003738:	f8c0 e004 	str.w	lr, [r0, #4]
 800373c:	ea83 3331 	eor.w	r3, r3, r1, ror #12
 8003740:	ea83 43f5 	eor.w	r3, r3, r5, ror #19
 8003744:	ea83 133b 	eor.w	r3, r3, fp, ror #4
 8003748:	ea83 63bc 	eor.w	r3, r3, ip, ror #26
 800374c:	f8d0 7058 	ldr.w	r7, [r0, #88]	@ 0x58
 8003750:	f8d0 100c 	ldr.w	r1, [r0, #12]
 8003754:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8003758:	f8d0 b030 	ldr.w	fp, [r0, #48]	@ 0x30
 800375c:	f8d0 c0ac 	ldr.w	ip, [r0, #172]	@ 0xac
 8003760:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 8003764:	ea87 17b5 	eor.w	r7, r7, r5, ror #6
 8003768:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 800376c:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 8003770:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8003774:	ea83 5677 	eor.w	r6, r3, r7, ror #21
 8003778:	f8d0 40b4 	ldr.w	r4, [r0, #180]	@ 0xb4
 800377c:	f8d0 1064 	ldr.w	r1, [r0, #100]	@ 0x64
 8003780:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8003784:	f8d0 b088 	ldr.w	fp, [r0, #136]	@ 0x88
 8003788:	f8d0 c038 	ldr.w	ip, [r0, #56]	@ 0x38
 800378c:	f8cd 6000 	str.w	r6, [sp]
 8003790:	ea84 2471 	eor.w	r4, r4, r1, ror #9
 8003794:	ea84 74b5 	eor.w	r4, r4, r5, ror #30
 8003798:	ea84 24fb 	eor.w	r4, r4, fp, ror #11
 800379c:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 80037a0:	ea83 6674 	eor.w	r6, r3, r4, ror #25
 80037a4:	f8d0 3040 	ldr.w	r3, [r0, #64]	@ 0x40
 80037a8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 80037ac:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 80037b0:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80037b4:	f8d0 c090 	ldr.w	ip, [r0, #144]	@ 0x90
 80037b8:	f8cd 600c 	str.w	r6, [sp, #12]
 80037bc:	ea83 43b1 	eor.w	r3, r3, r1, ror #18
 80037c0:	ea83 73f5 	eor.w	r3, r3, r5, ror #31
 80037c4:	ea83 43bb 	eor.w	r3, r3, fp, ror #18
 80037c8:	ea83 037c 	eor.w	r3, r3, ip, ror #1
 80037cc:	ea83 52b7 	eor.w	r2, r3, r7, ror #22
 80037d0:	f8d0 7000 	ldr.w	r7, [r0]
 80037d4:	f8d0 1078 	ldr.w	r1, [r0, #120]	@ 0x78
 80037d8:	f8d0 502c 	ldr.w	r5, [r0, #44]	@ 0x2c
 80037dc:	f8d0 b0a4 	ldr.w	fp, [r0, #164]	@ 0xa4
 80037e0:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 80037e4:	ea87 77b1 	eor.w	r7, r7, r1, ror #30
 80037e8:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 80037ec:	ea87 67fb 	eor.w	r7, r7, fp, ror #27
 80037f0:	ea87 373c 	eor.w	r7, r7, ip, ror #12
 80037f4:	ea87 6a34 	eor.w	sl, r7, r4, ror #24
 80037f8:	f8d0 4044 	ldr.w	r4, [r0, #68]	@ 0x44
 80037fc:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8003800:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8003804:	f8d0 b018 	ldr.w	fp, [r0, #24]
 8003808:	f8d0 c094 	ldr.w	ip, [r0, #148]	@ 0x94
 800380c:	ea84 44b1 	eor.w	r4, r4, r1, ror #18
 8003810:	ea84 0405 	eor.w	r4, r4, r5
 8003814:	ea84 44fb 	eor.w	r4, r4, fp, ror #19
 8003818:	ea84 047c 	eor.w	r4, r4, ip, ror #1
 800381c:	ea84 0e07 	eor.w	lr, r4, r7
 8003820:	f8d0 705c 	ldr.w	r7, [r0, #92]	@ 0x5c
 8003824:	f8d0 1008 	ldr.w	r1, [r0, #8]
 8003828:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
 800382c:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 8003830:	f8d0 c0a8 	ldr.w	ip, [r0, #168]	@ 0xa8
 8003834:	ea87 5731 	eor.w	r7, r7, r1, ror #20
 8003838:	ea87 17f5 	eor.w	r7, r7, r5, ror #7
 800383c:	ea87 07fb 	eor.w	r7, r7, fp, ror #3
 8003840:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 8003844:	ea4f 5777 	mov.w	r7, r7, ror #21
 8003848:	ea87 76f4 	eor.w	r6, r7, r4, ror #31
 800384c:	f8d0 4098 	ldr.w	r4, [r0, #152]	@ 0x98
 8003850:	f8d0 104c 	ldr.w	r1, [r0, #76]	@ 0x4c
 8003854:	f8d0 50c0 	ldr.w	r5, [r0, #192]	@ 0xc0
 8003858:	f8d0 b074 	ldr.w	fp, [r0, #116]	@ 0x74
 800385c:	f8d0 c024 	ldr.w	ip, [r0, #36]	@ 0x24
 8003860:	f8cd 6010 	str.w	r6, [sp, #16]
 8003864:	ea84 3431 	eor.w	r4, r4, r1, ror #12
 8003868:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 800386c:	ea84 143b 	eor.w	r4, r4, fp, ror #4
 8003870:	ea84 64fc 	eor.w	r4, r4, ip, ror #27
 8003874:	ea87 28b4 	eor.w	r8, r7, r4, ror #10
 8003878:	f8d0 70b0 	ldr.w	r7, [r0, #176]	@ 0xb0
 800387c:	f8d0 1060 	ldr.w	r1, [r0, #96]	@ 0x60
 8003880:	f8d0 5014 	ldr.w	r5, [r0, #20]
 8003884:	f8d0 b08c 	ldr.w	fp, [r0, #140]	@ 0x8c
 8003888:	f8d0 c03c 	ldr.w	ip, [r0, #60]	@ 0x3c
 800388c:	f8cd 8004 	str.w	r8, [sp, #4]
 8003890:	ea87 2731 	eor.w	r7, r7, r1, ror #8
 8003894:	ea87 77b5 	eor.w	r7, r7, r5, ror #30
 8003898:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 800389c:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
 80038a0:	ea4f 6777 	mov.w	r7, r7, ror #25
 80038a4:	ea87 2974 	eor.w	r9, r7, r4, ror #9
 80038a8:	f8d0 4004 	ldr.w	r4, [r0, #4]
 80038ac:	f8d0 107c 	ldr.w	r1, [r0, #124]	@ 0x7c
 80038b0:	f8d0 5028 	ldr.w	r5, [r0, #40]	@ 0x28
 80038b4:	f8d0 b0a0 	ldr.w	fp, [r0, #160]	@ 0xa0
 80038b8:	f8d0 c054 	ldr.w	ip, [r0, #84]	@ 0x54
 80038bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80038c0:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 80038c4:	ea84 5435 	eor.w	r4, r4, r5, ror #20
 80038c8:	ea84 64fb 	eor.w	r4, r4, fp, ror #27
 80038cc:	ea84 347c 	eor.w	r4, r4, ip, ror #13
 80038d0:	ea84 0b07 	eor.w	fp, r4, r7
 80038d4:	ea83 7cf4 	eor.w	ip, r3, r4, ror #31
 80038d8:	f8d0 3040 	ldr.w	r3, [r0, #64]	@ 0x40
 80038dc:	f8d0 4048 	ldr.w	r4, [r0, #72]	@ 0x48
 80038e0:	f8d0 5028 	ldr.w	r5, [r0, #40]	@ 0x28
 80038e4:	f8d0 6030 	ldr.w	r6, [r0, #48]	@ 0x30
 80038e8:	f8d0 7038 	ldr.w	r7, [r0, #56]	@ 0x38
 80038ec:	f8c0 1028 	str.w	r1, [r0, #40]	@ 0x28
 80038f0:	ea89 0303 	eor.w	r3, r9, r3
 80038f4:	ea8c 54b4 	eor.w	r4, ip, r4, ror #22
 80038f8:	ea88 5535 	eor.w	r5, r8, r5, ror #20
 80038fc:	ea8b 6676 	eor.w	r6, fp, r6, ror #25
 8003900:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 8003904:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003908:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 800390c:	ea4f 71b1 	mov.w	r1, r1, ror #30
 8003910:	f8c0 1028 	str.w	r1, [r0, #40]	@ 0x28
 8003914:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003918:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 800391c:	ea4f 2171 	mov.w	r1, r1, ror #9
 8003920:	f8c0 1030 	str.w	r1, [r0, #48]	@ 0x30
 8003924:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 8003928:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 800392c:	ea4f 0171 	mov.w	r1, r1, ror #1
 8003930:	f8c0 1038 	str.w	r1, [r0, #56]	@ 0x38
 8003934:	ea23 31f7 	bic.w	r1, r3, r7, ror #15
 8003938:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 800393c:	ea4f 41b1 	mov.w	r1, r1, ror #18
 8003940:	f8c0 1040 	str.w	r1, [r0, #64]	@ 0x40
 8003944:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8003948:	ea81 21f7 	eor.w	r1, r1, r7, ror #11
 800394c:	ea4f 51b1 	mov.w	r1, r1, ror #22
 8003950:	f8d0 305c 	ldr.w	r3, [r0, #92]	@ 0x5c
 8003954:	f8d0 4064 	ldr.w	r4, [r0, #100]	@ 0x64
 8003958:	f8d0 506c 	ldr.w	r5, [r0, #108]	@ 0x6c
 800395c:	f8d0 6074 	ldr.w	r6, [r0, #116]	@ 0x74
 8003960:	f8d0 7054 	ldr.w	r7, [r0, #84]	@ 0x54
 8003964:	f8c0 1048 	str.w	r1, [r0, #72]	@ 0x48
 8003968:	ea8a 5373 	eor.w	r3, sl, r3, ror #21
 800396c:	ea82 04b4 	eor.w	r4, r2, r4, ror #2
 8003970:	ea89 75f5 	eor.w	r5, r9, r5, ror #31
 8003974:	ea8e 36b6 	eor.w	r6, lr, r6, ror #14
 8003978:	ea88 3777 	eor.w	r7, r8, r7, ror #13
 800397c:	ea25 2174 	bic.w	r1, r5, r4, ror #9
 8003980:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8003984:	ea4f 5131 	mov.w	r1, r1, ror #20
 8003988:	f8c0 1054 	str.w	r1, [r0, #84]	@ 0x54
 800398c:	ea26 6135 	bic.w	r1, r6, r5, ror #24
 8003990:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8003994:	ea4f 7131 	mov.w	r1, r1, ror #28
 8003998:	f8c0 105c 	str.w	r1, [r0, #92]	@ 0x5c
 800399c:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 80039a0:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 80039a4:	ea4f 51f1 	mov.w	r1, r1, ror #23
 80039a8:	f8c0 1064 	str.w	r1, [r0, #100]	@ 0x64
 80039ac:	ea23 51f7 	bic.w	r1, r3, r7, ror #23
 80039b0:	ea81 7136 	eor.w	r1, r1, r6, ror #28
 80039b4:	f8c0 106c 	str.w	r1, [r0, #108]	@ 0x6c
 80039b8:	ea24 01f3 	bic.w	r1, r4, r3, ror #3
 80039bc:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 80039c0:	ea4f 7171 	mov.w	r1, r1, ror #29
 80039c4:	f8dd 8000 	ldr.w	r8, [sp]
 80039c8:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 80039cc:	f8d0 4078 	ldr.w	r4, [r0, #120]	@ 0x78
 80039d0:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
 80039d4:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 80039d8:	f8d0 7090 	ldr.w	r7, [r0, #144]	@ 0x90
 80039dc:	f8c0 1074 	str.w	r1, [r0, #116]	@ 0x74
 80039e0:	ea8e 23b3 	eor.w	r3, lr, r3, ror #10
 80039e4:	ea88 74b4 	eor.w	r4, r8, r4, ror #30
 80039e8:	ea8a 7535 	eor.w	r5, sl, r5, ror #28
 80039ec:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 80039f0:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 80039f4:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 80039f8:	ea81 51f3 	eor.w	r1, r1, r3, ror #23
 80039fc:	ea4f 61f1 	mov.w	r1, r1, ror #27
 8003a00:	f8c0 1078 	str.w	r1, [r0, #120]	@ 0x78
 8003a04:	ea26 01f5 	bic.w	r1, r6, r5, ror #3
 8003a08:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 8003a0c:	ea4f 6131 	mov.w	r1, r1, ror #24
 8003a10:	f8c0 1080 	str.w	r1, [r0, #128]	@ 0x80
 8003a14:	ea27 5136 	bic.w	r1, r7, r6, ror #20
 8003a18:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8003a1c:	ea4f 1131 	mov.w	r1, r1, ror #4
 8003a20:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
 8003a24:	ea23 41b7 	bic.w	r1, r3, r7, ror #18
 8003a28:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8003a2c:	ea4f 41b1 	mov.w	r1, r1, ror #18
 8003a30:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 8003a34:	ea24 1133 	bic.w	r1, r4, r3, ror #4
 8003a38:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8003a3c:	ea4f 31b1 	mov.w	r1, r1, ror #14
 8003a40:	f8d0 30b4 	ldr.w	r3, [r0, #180]	@ 0xb4
 8003a44:	f8d0 40bc 	ldr.w	r4, [r0, #188]	@ 0xbc
 8003a48:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
 8003a4c:	f8d0 60a4 	ldr.w	r6, [r0, #164]	@ 0xa4
 8003a50:	f8d0 70ac 	ldr.w	r7, [r0, #172]	@ 0xac
 8003a54:	f8c0 1098 	str.w	r1, [r0, #152]	@ 0x98
 8003a58:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 8003a5c:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 8003a60:	ea8c 7575 	eor.w	r5, ip, r5, ror #29
 8003a64:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 8003a68:	ea8b 3737 	eor.w	r7, fp, r7, ror #12
 8003a6c:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003a70:	ea81 5133 	eor.w	r1, r1, r3, ror #20
 8003a74:	ea4f 3171 	mov.w	r1, r1, ror #13
 8003a78:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 8003a7c:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 8003a80:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003a84:	ea4f 3131 	mov.w	r1, r1, ror #12
 8003a88:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 8003a8c:	ea27 3176 	bic.w	r1, r7, r6, ror #13
 8003a90:	ea81 31b5 	eor.w	r1, r1, r5, ror #14
 8003a94:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8003a98:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 8003a9c:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 8003aa0:	ea81 21f6 	eor.w	r1, r1, r6, ror #11
 8003aa4:	ea4f 0171 	mov.w	r1, r1, ror #1
 8003aa8:	f8c0 10bc 	str.w	r1, [r0, #188]	@ 0xbc
 8003aac:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8003ab0:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8003ab4:	ea4f 1171 	mov.w	r1, r1, ror #5
 8003ab8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003abc:	f8d0 3000 	ldr.w	r3, [r0]
 8003ac0:	6884      	ldr	r4, [r0, #8]
 8003ac2:	6905      	ldr	r5, [r0, #16]
 8003ac4:	6986      	ldr	r6, [r0, #24]
 8003ac6:	6a07      	ldr	r7, [r0, #32]
 8003ac8:	f8c0 10c4 	str.w	r1, [r0, #196]	@ 0xc4
 8003acc:	ea88 0303 	eor.w	r3, r8, r3
 8003ad0:	ea8a 2474 	eor.w	r4, sl, r4, ror #9
 8003ad4:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 8003ad8:	ea89 46f6 	eor.w	r6, r9, r6, ror #19
 8003adc:	ea8c 1737 	eor.w	r7, ip, r7, ror #4
 8003ae0:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003ae4:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8003ae8:	ea4f 5171 	mov.w	r1, r1, ror #21
 8003aec:	f8c0 1008 	str.w	r1, [r0, #8]
 8003af0:	ea27 7136 	bic.w	r1, r7, r6, ror #28
 8003af4:	ea81 4175 	eor.w	r1, r1, r5, ror #17
 8003af8:	ea4f 6171 	mov.w	r1, r1, ror #25
 8003afc:	f8c0 1010 	str.w	r1, [r0, #16]
 8003b00:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8003b04:	ea81 5176 	eor.w	r1, r1, r6, ror #21
 8003b08:	f8c0 1018 	str.w	r1, [r0, #24]
 8003b0c:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8003b10:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8003b14:	ea4f 21b1 	mov.w	r1, r1, ror #10
 8003b18:	f8c0 1020 	str.w	r1, [r0, #32]
 8003b1c:	ea25 0504 	bic.w	r5, r5, r4
 8003b20:	9905      	ldr	r1, [sp, #20]
 8003b22:	698c      	ldr	r4, [r1, #24]
 8003b24:	ea83 23b5 	eor.w	r3, r3, r5, ror #10
 8003b28:	ea84 0103 	eor.w	r1, r4, r3
 8003b2c:	f8dd 2010 	ldr.w	r2, [sp, #16]
 8003b30:	f8d0 3044 	ldr.w	r3, [r0, #68]	@ 0x44
 8003b34:	f8d0 404c 	ldr.w	r4, [r0, #76]	@ 0x4c
 8003b38:	f8d0 502c 	ldr.w	r5, [r0, #44]	@ 0x2c
 8003b3c:	f8d0 6034 	ldr.w	r6, [r0, #52]	@ 0x34
 8003b40:	f8d0 703c 	ldr.w	r7, [r0, #60]	@ 0x3c
 8003b44:	f8c0 1000 	str.w	r1, [r0]
 8003b48:	ea89 0303 	eor.w	r3, r9, r3
 8003b4c:	ea8e 54b4 	eor.w	r4, lr, r4, ror #22
 8003b50:	ea88 45f5 	eor.w	r5, r8, r5, ror #19
 8003b54:	ea8a 6636 	eor.w	r6, sl, r6, ror #24
 8003b58:	ea82 77f7 	eor.w	r7, r2, r7, ror #31
 8003b5c:	ea25 51f4 	bic.w	r1, r5, r4, ror #23
 8003b60:	ea81 41f3 	eor.w	r1, r1, r3, ror #19
 8003b64:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8003b68:	f8c0 102c 	str.w	r1, [r0, #44]	@ 0x2c
 8003b6c:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003b70:	ea81 3134 	eor.w	r1, r1, r4, ror #12
 8003b74:	ea4f 21b1 	mov.w	r1, r1, ror #10
 8003b78:	f8c0 1034 	str.w	r1, [r0, #52]	@ 0x34
 8003b7c:	ea27 2136 	bic.w	r1, r7, r6, ror #8
 8003b80:	ea81 7175 	eor.w	r1, r1, r5, ror #29
 8003b84:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8003b88:	f8c0 103c 	str.w	r1, [r0, #60]	@ 0x3c
 8003b8c:	ea23 4137 	bic.w	r1, r3, r7, ror #16
 8003b90:	ea81 6136 	eor.w	r1, r1, r6, ror #24
 8003b94:	ea4f 41b1 	mov.w	r1, r1, ror #18
 8003b98:	f8c0 1044 	str.w	r1, [r0, #68]	@ 0x44
 8003b9c:	ea24 7133 	bic.w	r1, r4, r3, ror #28
 8003ba0:	ea81 3137 	eor.w	r1, r1, r7, ror #12
 8003ba4:	ea4f 51b1 	mov.w	r1, r1, ror #22
 8003ba8:	f8d0 3058 	ldr.w	r3, [r0, #88]	@ 0x58
 8003bac:	f8d0 4060 	ldr.w	r4, [r0, #96]	@ 0x60
 8003bb0:	f8d0 5068 	ldr.w	r5, [r0, #104]	@ 0x68
 8003bb4:	f8d0 6070 	ldr.w	r6, [r0, #112]	@ 0x70
 8003bb8:	f8d0 7050 	ldr.w	r7, [r0, #80]	@ 0x50
 8003bbc:	f8c0 104c 	str.w	r1, [r0, #76]	@ 0x4c
 8003bc0:	ea8b 53b3 	eor.w	r3, fp, r3, ror #22
 8003bc4:	ea82 0474 	eor.w	r4, r2, r4, ror #1
 8003bc8:	ea89 0505 	eor.w	r5, r9, r5
 8003bcc:	ea8c 36b6 	eor.w	r6, ip, r6, ror #14
 8003bd0:	ea88 3737 	eor.w	r7, r8, r7, ror #12
 8003bd4:	ea25 21b4 	bic.w	r1, r5, r4, ror #10
 8003bd8:	ea81 3133 	eor.w	r1, r1, r3, ror #12
 8003bdc:	ea4f 41f1 	mov.w	r1, r1, ror #19
 8003be0:	f8c0 1050 	str.w	r1, [r0, #80]	@ 0x50
 8003be4:	ea26 51f5 	bic.w	r1, r6, r5, ror #23
 8003be8:	ea81 0174 	eor.w	r1, r1, r4, ror #1
 8003bec:	ea4f 7131 	mov.w	r1, r1, ror #28
 8003bf0:	f8c0 1058 	str.w	r1, [r0, #88]	@ 0x58
 8003bf4:	ea27 1176 	bic.w	r1, r7, r6, ror #5
 8003bf8:	ea81 7135 	eor.w	r1, r1, r5, ror #28
 8003bfc:	ea4f 51f1 	mov.w	r1, r1, ror #23
 8003c00:	f8c0 1060 	str.w	r1, [r0, #96]	@ 0x60
 8003c04:	ea23 6137 	bic.w	r1, r3, r7, ror #24
 8003c08:	ea81 7176 	eor.w	r1, r1, r6, ror #29
 8003c0c:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8003c10:	f8c0 1068 	str.w	r1, [r0, #104]	@ 0x68
 8003c14:	ea24 01b3 	bic.w	r1, r4, r3, ror #2
 8003c18:	ea81 61b7 	eor.w	r1, r1, r7, ror #26
 8003c1c:	ea4f 7171 	mov.w	r1, r1, ror #29
 8003c20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003c24:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003c28:	f8d0 407c 	ldr.w	r4, [r0, #124]	@ 0x7c
 8003c2c:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8003c30:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 8003c34:	f8d0 7094 	ldr.w	r7, [r0, #148]	@ 0x94
 8003c38:	f8c0 1070 	str.w	r1, [r0, #112]	@ 0x70
 8003c3c:	ea8c 23b3 	eor.w	r3, ip, r3, ror #10
 8003c40:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
 8003c44:	ea8b 7535 	eor.w	r5, fp, r5, ror #28
 8003c48:	ea82 1636 	eor.w	r6, r2, r6, ror #4
 8003c4c:	ea89 0777 	eor.w	r7, r9, r7, ror #1
 8003c50:	ea25 41f4 	bic.w	r1, r5, r4, ror #19
 8003c54:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8003c58:	ea4f 61f1 	mov.w	r1, r1, ror #27
 8003c5c:	f8c0 107c 	str.w	r1, [r0, #124]	@ 0x7c
 8003c60:	ea26 01b5 	bic.w	r1, r6, r5, ror #2
 8003c64:	ea81 5174 	eor.w	r1, r1, r4, ror #21
 8003c68:	ea4f 6171 	mov.w	r1, r1, ror #25
 8003c6c:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 8003c70:	ea27 5176 	bic.w	r1, r7, r6, ror #21
 8003c74:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8003c78:	ea4f 1131 	mov.w	r1, r1, ror #4
 8003c7c:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8003c80:	ea23 4177 	bic.w	r1, r3, r7, ror #17
 8003c84:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 8003c88:	ea4f 41f1 	mov.w	r1, r1, ror #19
 8003c8c:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8003c90:	ea24 1173 	bic.w	r1, r4, r3, ror #5
 8003c94:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8003c98:	ea4f 31b1 	mov.w	r1, r1, ror #14
 8003c9c:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8003ca0:	f8d0 40b8 	ldr.w	r4, [r0, #184]	@ 0xb8
 8003ca4:	f8d0 50c0 	ldr.w	r5, [r0, #192]	@ 0xc0
 8003ca8:	f8d0 60a0 	ldr.w	r6, [r0, #160]	@ 0xa0
 8003cac:	f8d0 70a8 	ldr.w	r7, [r0, #168]	@ 0xa8
 8003cb0:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
 8003cb4:	ea82 6373 	eor.w	r3, r2, r3, ror #25
 8003cb8:	ea89 44b4 	eor.w	r4, r9, r4, ror #18
 8003cbc:	ea8e 7575 	eor.w	r5, lr, r5, ror #29
 8003cc0:	ea88 66f6 	eor.w	r6, r8, r6, ror #27
 8003cc4:	ea8a 27f7 	eor.w	r7, sl, r7, ror #11
 8003cc8:	ea25 6134 	bic.w	r1, r5, r4, ror #24
 8003ccc:	ea81 5173 	eor.w	r1, r1, r3, ror #21
 8003cd0:	ea4f 3131 	mov.w	r1, r1, ror #12
 8003cd4:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
 8003cd8:	ea26 0175 	bic.w	r1, r6, r5, ror #1
 8003cdc:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003ce0:	ea4f 21f1 	mov.w	r1, r1, ror #11
 8003ce4:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8003ce8:	ea27 3136 	bic.w	r1, r7, r6, ror #12
 8003cec:	ea81 3175 	eor.w	r1, r1, r5, ror #13
 8003cf0:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8003cf4:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 8003cf8:	ea23 71b7 	bic.w	r1, r3, r7, ror #30
 8003cfc:	ea81 21b6 	eor.w	r1, r1, r6, ror #10
 8003d00:	ea4f 0171 	mov.w	r1, r1, ror #1
 8003d04:	f8c0 10b8 	str.w	r1, [r0, #184]	@ 0xb8
 8003d08:	ea24 7173 	bic.w	r1, r4, r3, ror #29
 8003d0c:	ea81 61f7 	eor.w	r1, r1, r7, ror #27
 8003d10:	ea4f 1131 	mov.w	r1, r1, ror #4
 8003d14:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003d18:	f8d0 3004 	ldr.w	r3, [r0, #4]
 8003d1c:	68c4      	ldr	r4, [r0, #12]
 8003d1e:	6945      	ldr	r5, [r0, #20]
 8003d20:	69c6      	ldr	r6, [r0, #28]
 8003d22:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 8003d24:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 8003d28:	ea88 0303 	eor.w	r3, r8, r3
 8003d2c:	ea8b 24b4 	eor.w	r4, fp, r4, ror #10
 8003d30:	ea82 55f5 	eor.w	r5, r2, r5, ror #23
 8003d34:	ea89 46b6 	eor.w	r6, r9, r6, ror #18
 8003d38:	ea8e 1777 	eor.w	r7, lr, r7, ror #5
 8003d3c:	ea26 5175 	bic.w	r1, r6, r5, ror #21
 8003d40:	ea81 5134 	eor.w	r1, r1, r4, ror #20
 8003d44:	ea4f 51b1 	mov.w	r1, r1, ror #22
 8003d48:	f8c0 100c 	str.w	r1, [r0, #12]
 8003d4c:	ea27 7176 	bic.w	r1, r7, r6, ror #29
 8003d50:	ea81 41b5 	eor.w	r1, r1, r5, ror #18
 8003d54:	ea4f 6171 	mov.w	r1, r1, ror #25
 8003d58:	f8c0 1014 	str.w	r1, [r0, #20]
 8003d5c:	ea23 6177 	bic.w	r1, r3, r7, ror #25
 8003d60:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 8003d64:	f8c0 101c 	str.w	r1, [r0, #28]
 8003d68:	ea24 51b3 	bic.w	r1, r4, r3, ror #22
 8003d6c:	ea81 31f7 	eor.w	r1, r1, r7, ror #15
 8003d70:	ea4f 21b1 	mov.w	r1, r1, ror #10
 8003d74:	f8c0 1024 	str.w	r1, [r0, #36]	@ 0x24
 8003d78:	ea25 75f4 	bic.w	r5, r5, r4, ror #31
 8003d7c:	9905      	ldr	r1, [sp, #20]
 8003d7e:	69cc      	ldr	r4, [r1, #28]
 8003d80:	f851 7f20 	ldr.w	r7, [r1, #32]!
 8003d84:	9105      	str	r1, [sp, #20]
 8003d86:	2fff      	cmp	r7, #255	@ 0xff
 8003d88:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
 8003d8c:	ea84 0103 	eor.w	r1, r4, r3
 8003d90:	f8c0 1004 	str.w	r1, [r0, #4]
	bne		KeccakF1600_StatePermute_RoundLoop
 8003d94:	f47e ac3a 	bne.w	800260c <KeccakF1600_StatePermute_RoundLoop>
	add		sp, #mSize
 8003d98:	b006      	add	sp, #24
	pop		{ r4 - r12, pc }
 8003d9a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8003d9e:	bf00      	nop

08003da0 <asm_pointwise_montgomery_1>:
// void asm_pointwise_montgomery_1(int32_t c[N], const int32_t a[N], const int32_t b[N]);
.global asm_pointwise_montgomery_1
.type asm_pointwise_montgomery_1,%function
.align 2
asm_pointwise_montgomery_1:
    push.w {r4-r11, r14}
 8003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pb2   .req r10
    tmp0  .req r11
    ctr   .req r12
    res   .req r14

    movw qinv, #:lower16:0x7a29f27f
 8003da4:	f24f 237f 	movw	r3, #62079	@ 0xf27f
    movt qinv, #:upper16:0x7a29f27f
 8003da8:	f6c7 2329 	movt	r3, #31273	@ 0x7a29
    movw q, #0x3281
 8003dac:	f243 2481 	movw	r4, #12929	@ 0x3281
    movt q, #0x80
 8003db0:	f2c0 0480 	movt	r4, #128	@ 0x80


    // 384x3 = 1152 coefficients
    movw ctr, #384
 8003db4:	f240 1c80 	movw	ip, #384	@ 0x180
    1:
        ldr.w pa1, [a_ptr, #4] //offset + 4를 의미
 8003db8:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pa2, [a_ptr, #8]
 8003dbc:	f8d1 7008 	ldr.w	r7, [r1, #8]
        ldr pa0, [a_ptr], #12	//pa0 ldr 이후 a_ptr+=12
 8003dc0:	f851 5b0c 	ldr.w	r5, [r1], #12
        ldr.w pb1, [b_ptr, #4]
 8003dc4:	f8d2 9004 	ldr.w	r9, [r2, #4]
        ldr.w pb2, [b_ptr, #8]
 8003dc8:	f8d2 a008 	ldr.w	sl, [r2, #8]
        ldr pb0, [b_ptr], #12
 8003dcc:	f852 8b0c 	ldr.w	r8, [r2], #12

		montgomery_multiplication res, pa0, pb0, q, qinv
 8003dd0:	fb85 5e08 	smull	r5, lr, r5, r8
 8003dd4:	fb05 f803 	mul.w	r8, r5, r3
 8003dd8:	fbc8 5e04 	smlal	r5, lr, r8, r4
        str res, [c_ptr], #4
 8003ddc:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa1, pb1, q, qinv
 8003de0:	fb86 6e09 	smull	r6, lr, r6, r9
 8003de4:	fb06 f903 	mul.w	r9, r6, r3
 8003de8:	fbc9 6e04 	smlal	r6, lr, r9, r4
        str res, [c_ptr], #4
 8003dec:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa2, pb2, q, qinv
 8003df0:	fb87 7e0a 	smull	r7, lr, r7, sl
 8003df4:	fb07 fa03 	mul.w	sl, r7, r3
 8003df8:	fbca 7e04 	smlal	r7, lr, sl, r4
        str res, [c_ptr], #4
 8003dfc:	f840 eb04 	str.w	lr, [r0], #4

    subs ctr, #1
 8003e00:	f1bc 0c01 	subs.w	ip, ip, #1
    bne.w 1b
 8003e04:	f47f afd8 	bne.w	8003db8 <asm_pointwise_montgomery_1+0x18>

    pop.w {r4-r11, pc}
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e0c <asm_pointwise_montgomery_3>:
// void asm_pointwise_montgomery_3(int32_t c[N], const int32_t a[N], const int32_t b[N]);
.global asm_pointwise_montgomery_3
.type asm_pointwise_montgomery_3,%function
.align 2
asm_pointwise_montgomery_3:
    push.w {r4-r11, r14}
 8003e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tmp1   .req r10
    tem2   .req r11
    ctr   .req r12
    res   .req r14

    movw qinv, #:lower16:0x83fc21ff
 8003e10:	f242 14ff 	movw	r4, #8703	@ 0x21ff
    movt qinv, #:upper16:0x83fc21ff
 8003e14:	f2c8 34fc 	movt	r4, #33788	@ 0x83fc
    movw q, #0x2201
 8003e18:	f242 2501 	movw	r5, #8705	@ 0x2201
    movt q, #0x80
 8003e1c:	f2c0 0580 	movt	r5, #128	@ 0x80


    // 256x6 = 1536 coefficients
    movw ctr, #256
 8003e20:	f240 1c00 	movw	ip, #256	@ 0x100
    1:
    	ldr.w zeta, [z_ptr]
 8003e24:	f8d3 8000 	ldr.w	r8, [r3]
    	//x^0

        ldr.w pa0, [a_ptr, #8] //a2b1
 8003e28:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr, #4]
 8003e2c:	f8d2 7004 	ldr.w	r7, [r2, #4]
		smull tmp0, res, pa0, pb0
 8003e30:	fb86 9e07 	smull	r9, lr, r6, r7
		ldr.w pa0, [a_ptr, #4] //a1b2
 8003e34:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr, #8]
 8003e38:	f8d2 7008 	ldr.w	r7, [r2, #8]
        smlal tmp0, res, pa0, pb0
 8003e3c:	fbc6 9e07 	smlal	r9, lr, r6, r7
        montgomery_reduction tmp1, tmp0, res, q, qinv
 8003e40:	fb09 fa04 	mul.w	sl, r9, r4
 8003e44:	fbca 9e05 	smlal	r9, lr, sl, r5

		smull tmp0, res, res, zeta
 8003e48:	fb8e 9e08 	smull	r9, lr, lr, r8
		ldr.w pa0, [a_ptr] //a0b0
 8003e4c:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr]
 8003e50:	f8d2 7000 	ldr.w	r7, [r2]
        smlal tmp0, res, pa0, pb0
 8003e54:	fbc6 9e07 	smlal	r9, lr, r6, r7
		montgomery_reduction tmp1, tmp0, res, q, qinv
 8003e58:	fb09 fa04 	mul.w	sl, r9, r4
 8003e5c:	fbca 9e05 	smlal	r9, lr, sl, r5

		str res, [c_ptr], #4
 8003e60:	f840 eb04 	str.w	lr, [r0], #4

		//x^1
        ldr.w pa0, [a_ptr, #8] //a2b2
 8003e64:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr, #8]
 8003e68:	f8d2 7008 	ldr.w	r7, [r2, #8]
		montgomery_multiplication res, pa0, pb0, q, qinv
 8003e6c:	fb86 6e07 	smull	r6, lr, r6, r7
 8003e70:	fb06 f704 	mul.w	r7, r6, r4
 8003e74:	fbc7 6e05 	smlal	r6, lr, r7, r5

		smull tmp0, res, res, zeta
 8003e78:	fb8e 9e08 	smull	r9, lr, lr, r8
		ldr.w pa0, [a_ptr] //a0b1
 8003e7c:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr, #4]
 8003e80:	f8d2 7004 	ldr.w	r7, [r2, #4]
        smlal tmp0, res, pa0, pb0
 8003e84:	fbc6 9e07 	smlal	r9, lr, r6, r7
		ldr.w pa0, [a_ptr, #4] //a1b0
 8003e88:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr]
 8003e8c:	f8d2 7000 	ldr.w	r7, [r2]
        smlal tmp0, res, pa0, pb0
 8003e90:	fbc6 9e07 	smlal	r9, lr, r6, r7
		montgomery_reduction tmp1, tmp0, res, q, qinv
 8003e94:	fb09 fa04 	mul.w	sl, r9, r4
 8003e98:	fbca 9e05 	smlal	r9, lr, sl, r5
		str res, [c_ptr], #4
 8003e9c:	f840 eb04 	str.w	lr, [r0], #4


		//x^2
		ldr.w pa0, [a_ptr, #8] //a2b0
 8003ea0:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr]
 8003ea4:	f8d2 7000 	ldr.w	r7, [r2]
        smull tmp0, res, pa0, pb0
 8003ea8:	fb86 9e07 	smull	r9, lr, r6, r7
        ldr.w pa0, [a_ptr] //a0b2
 8003eac:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr, #8]
 8003eb0:	f8d2 7008 	ldr.w	r7, [r2, #8]
        smlal tmp0, res, pa0, pb0
 8003eb4:	fbc6 9e07 	smlal	r9, lr, r6, r7
        ldr.w pa0, [a_ptr, #4] //a1b1
 8003eb8:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr, #4]
 8003ebc:	f8d2 7004 	ldr.w	r7, [r2, #4]
        smlal tmp0, res, pa0, pb0
 8003ec0:	fbc6 9e07 	smlal	r9, lr, r6, r7
        montgomery_reduction tmp1, tmp0, res, q, qinv
 8003ec4:	fb09 fa04 	mul.w	sl, r9, r4
 8003ec8:	fbca 9e05 	smlal	r9, lr, sl, r5
        str res, [c_ptr], #4
 8003ecc:	f840 eb04 	str.w	lr, [r0], #4

        //ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        add a_ptr, a_ptr, #12
 8003ed0:	f101 010c 	add.w	r1, r1, #12
        add b_ptr, b_ptr, #12
 8003ed4:	f102 020c 	add.w	r2, r2, #12

		mvn zeta, zeta
 8003ed8:	ea6f 0808 	mvn.w	r8, r8
		add zeta, zeta, #1
 8003edc:	f108 0801 	add.w	r8, r8, #1

        //x^0
        ldr.w pa0, [a_ptr, #8] //a2b1
 8003ee0:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr, #4]
 8003ee4:	f8d2 7004 	ldr.w	r7, [r2, #4]
		smull tmp0, res, pa0, pb0
 8003ee8:	fb86 9e07 	smull	r9, lr, r6, r7
		ldr.w pa0, [a_ptr, #4] //a1b2
 8003eec:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr, #8]
 8003ef0:	f8d2 7008 	ldr.w	r7, [r2, #8]
        smlal tmp0, res, pa0, pb0
 8003ef4:	fbc6 9e07 	smlal	r9, lr, r6, r7
        montgomery_reduction tmp1, tmp0, res, q, qinv
 8003ef8:	fb09 fa04 	mul.w	sl, r9, r4
 8003efc:	fbca 9e05 	smlal	r9, lr, sl, r5

		smull tmp0, res, res, zeta
 8003f00:	fb8e 9e08 	smull	r9, lr, lr, r8
		ldr.w pa0, [a_ptr] //a0b0
 8003f04:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr]
 8003f08:	f8d2 7000 	ldr.w	r7, [r2]
        smlal tmp0, res, pa0, pb0
 8003f0c:	fbc6 9e07 	smlal	r9, lr, r6, r7
		montgomery_reduction tmp1, tmp0, res, q, qinv
 8003f10:	fb09 fa04 	mul.w	sl, r9, r4
 8003f14:	fbca 9e05 	smlal	r9, lr, sl, r5

		str res, [c_ptr], #4
 8003f18:	f840 eb04 	str.w	lr, [r0], #4

		//x^1
        ldr.w pa0, [a_ptr, #8] //a2b2
 8003f1c:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr, #8]
 8003f20:	f8d2 7008 	ldr.w	r7, [r2, #8]
		montgomery_multiplication res, pa0, pb0, q, qinv
 8003f24:	fb86 6e07 	smull	r6, lr, r6, r7
 8003f28:	fb06 f704 	mul.w	r7, r6, r4
 8003f2c:	fbc7 6e05 	smlal	r6, lr, r7, r5

		smull tmp0, res, res, zeta
 8003f30:	fb8e 9e08 	smull	r9, lr, lr, r8
		ldr.w pa0, [a_ptr] //a0b1
 8003f34:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr, #4]
 8003f38:	f8d2 7004 	ldr.w	r7, [r2, #4]
        smlal tmp0, res, pa0, pb0
 8003f3c:	fbc6 9e07 	smlal	r9, lr, r6, r7
		ldr.w pa0, [a_ptr, #4] //a1b0
 8003f40:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr]
 8003f44:	f8d2 7000 	ldr.w	r7, [r2]
        smlal tmp0, res, pa0, pb0
 8003f48:	fbc6 9e07 	smlal	r9, lr, r6, r7
		montgomery_reduction tmp1, tmp0, res, q, qinv
 8003f4c:	fb09 fa04 	mul.w	sl, r9, r4
 8003f50:	fbca 9e05 	smlal	r9, lr, sl, r5
		str res, [c_ptr], #4
 8003f54:	f840 eb04 	str.w	lr, [r0], #4


		//x^2
		ldr.w pa0, [a_ptr, #8] //a2b0
 8003f58:	f8d1 6008 	ldr.w	r6, [r1, #8]
        ldr.w pb0, [b_ptr]
 8003f5c:	f8d2 7000 	ldr.w	r7, [r2]
        smull tmp0, res, pa0, pb0
 8003f60:	fb86 9e07 	smull	r9, lr, r6, r7
        ldr.w pa0, [a_ptr] //a0b2
 8003f64:	f8d1 6000 	ldr.w	r6, [r1]
        ldr.w pb0, [b_ptr, #8]
 8003f68:	f8d2 7008 	ldr.w	r7, [r2, #8]
        smlal tmp0, res, pa0, pb0
 8003f6c:	fbc6 9e07 	smlal	r9, lr, r6, r7
        ldr.w pa0, [a_ptr, #4] //a1b1
 8003f70:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pb0, [b_ptr, #4]
 8003f74:	f8d2 7004 	ldr.w	r7, [r2, #4]
        smlal tmp0, res, pa0, pb0
 8003f78:	fbc6 9e07 	smlal	r9, lr, r6, r7
        montgomery_reduction tmp1, tmp0, res, q, qinv
 8003f7c:	fb09 fa04 	mul.w	sl, r9, r4
 8003f80:	fbca 9e05 	smlal	r9, lr, sl, r5
        str res, [c_ptr], #4
 8003f84:	f840 eb04 	str.w	lr, [r0], #4

        add a_ptr, a_ptr, #12
 8003f88:	f101 010c 	add.w	r1, r1, #12
        add b_ptr, b_ptr, #12
 8003f8c:	f102 020c 	add.w	r2, r2, #12
        add z_ptr, z_ptr, #4
 8003f90:	f103 0304 	add.w	r3, r3, #4
    subs ctr, #1
 8003f94:	f1bc 0c01 	subs.w	ip, ip, #1
    bne.w 1b
 8003f98:	f47f af44 	bne.w	8003e24 <asm_pointwise_montgomery_3+0x18>


    pop.w {r4-r11, pc}
 8003f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fa0 <asm_pointwise_montgomery_5>:
// void asm_pointwise_montgomery_5(int32_t c[N], const int32_t a[N], const int32_t b[N]);
.global asm_pointwise_montgomery_5
.type asm_pointwise_montgomery_5,%function
.align 2
asm_pointwise_montgomery_5:
    push.w {r4-r11, r14}
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pb2   .req r10
    tmp0  .req r11
    ctr   .req r12
    res   .req r14

    movw qinv, #:lower16:0xf0803fff
 8003fa4:	f643 73ff 	movw	r3, #16383	@ 0x3fff
    movt qinv, #:upper16:0xf0803fff
 8003fa8:	f2cf 0380 	movt	r3, #61568	@ 0xf080
    movw q, #0x4001
 8003fac:	f244 0401 	movw	r4, #16385	@ 0x4001
    movt q, #0x80
 8003fb0:	f2c0 0480 	movt	r4, #128	@ 0x80


    // 768x3 = 2304 coefficients
    movw ctr, #768
 8003fb4:	f240 3c00 	movw	ip, #768	@ 0x300
    1:
        ldr.w pa1, [a_ptr, #4] //offset + 4를 의미
 8003fb8:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pa2, [a_ptr, #8]
 8003fbc:	f8d1 7008 	ldr.w	r7, [r1, #8]
        ldr pa0, [a_ptr], #12	//pa0 ldr 이후 a_ptr+=12
 8003fc0:	f851 5b0c 	ldr.w	r5, [r1], #12
        ldr.w pb1, [b_ptr, #4]
 8003fc4:	f8d2 9004 	ldr.w	r9, [r2, #4]
        ldr.w pb2, [b_ptr, #8]
 8003fc8:	f8d2 a008 	ldr.w	sl, [r2, #8]
        ldr pb0, [b_ptr], #12
 8003fcc:	f852 8b0c 	ldr.w	r8, [r2], #12

        montgomery_multiplication res, pa0, pb0, q, qinv
 8003fd0:	fb85 5e08 	smull	r5, lr, r5, r8
 8003fd4:	fb05 f803 	mul.w	r8, r5, r3
 8003fd8:	fbc8 5e04 	smlal	r5, lr, r8, r4
        str res, [c_ptr], #4
 8003fdc:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa1, pb1, q, qinv
 8003fe0:	fb86 6e09 	smull	r6, lr, r6, r9
 8003fe4:	fb06 f903 	mul.w	r9, r6, r3
 8003fe8:	fbc9 6e04 	smlal	r6, lr, r9, r4
        str res, [c_ptr], #4
 8003fec:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa2, pb2, q, qinv
 8003ff0:	fb87 7e0a 	smull	r7, lr, r7, sl
 8003ff4:	fb07 fa03 	mul.w	sl, r7, r3
 8003ff8:	fbca 7e04 	smlal	r7, lr, sl, r4
        str res, [c_ptr], #4
 8003ffc:	f840 eb04 	str.w	lr, [r0], #4
    subs ctr, #1
 8004000:	f1bc 0c01 	subs.w	ip, ip, #1
    bne.w 1b
 8004004:	f47f afd8 	bne.w	8003fb8 <asm_pointwise_montgomery_5+0x18>


    pop.w {r4-r11, pc}
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800400c <asm_ntt_1>:
// void asm_ntt_1(int32_t * Out, int32_t* zeta);
.global asm_ntt_1
.type asm_ntt_1,%function
.align 2
asm_ntt_1:
    push.w {r4-r11, r14}
 800400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	zeta2     .req R14
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14

    movw qinv, #:lower16:0x7a29f27f
 8004010:	f24f 227f 	movw	r2, #62079	@ 0xf27f
    movt qinv, #:upper16:0x7a29f27f
 8004014:	f6c7 2229 	movt	r2, #31273	@ 0x7a29
    movw q, #0x3281
 8004018:	f243 2381 	movw	r3, #12929	@ 0x3281
    movt q, #0x80
 800401c:	f2c0 0380 	movt	r3, #128	@ 0x80

//stage 1 - 3
	.equ distance, 144 //144*4*4
  	.equ strincr, 4

  	vldm ptr_zeta!, {s2-s8}
 8004020:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 8004024:	ee00 1a10 	vmov	s0, r1

  	add.w temp_l, ptr_p, #distance*strincr //  8*144 = 1152
 8004028:	f500 7a10 	add.w	sl, r0, #576	@ 0x240
  	vmov s9, temp_l
 800402c:	ee04 aa90 	vmov	s9, sl

  1:
    .rept 2
    ldr.w pol0, [ptr_p]
 8004030:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004034:	f8d0 6240 	ldr.w	r6, [r0, #576]	@ 0x240
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004038:	f8d0 7480 	ldr.w	r7, [r0, #1152]	@ 0x480
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 800403c:	f8d0 86c0 	ldr.w	r8, [r0, #1728]	@ 0x6c0
    ldr.w pol4, [ptr_p, #4*distance*strincr]
 8004040:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
    ldr.w pol5, [ptr_p, #5*distance*strincr]
 8004044:	f8d0 bb40 	ldr.w	fp, [r0, #2880]	@ 0xb40
    ldr.w pol6, [ptr_p, #6*distance*strincr]
 8004048:	f8d0 cd80 	ldr.w	ip, [r0, #3456]	@ 0xd80
    ldr.w pol7, [ptr_p, #7*distance*strincr]
 800404c:	f8d0 efc0 	ldr.w	lr, [r0, #4032]	@ 0xfc0

    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004050:	ee11 1a10 	vmov	r1, s2
 8004054:	ee05 4a10 	vmov	s10, r4
 8004058:	ee05 ba90 	vmov	s11, fp
 800405c:	ee06 ca10 	vmov	s12, ip
 8004060:	ee06 ea90 	vmov	s13, lr
 8004064:	fb84 9401 	smull	r9, r4, r4, r1
 8004068:	fb09 fa02 	mul.w	sl, r9, r2
 800406c:	fbca 9403 	smlal	r9, r4, sl, r3
 8004070:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004074:	fb09 fa02 	mul.w	sl, r9, r2
 8004078:	fbca 9b03 	smlal	r9, fp, sl, r3
 800407c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004080:	fb09 fa02 	mul.w	sl, r9, r2
 8004084:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004088:	fb8e 9e01 	smull	r9, lr, lr, r1
 800408c:	fb09 fa02 	mul.w	sl, r9, r2
 8004090:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004094:	4425      	add	r5, r4
 8004096:	445e      	add	r6, fp
 8004098:	4467      	add	r7, ip
 800409a:	44f0      	add	r8, lr
 800409c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80040a0:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80040a4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80040a8:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80040ac:	ee15 9a10 	vmov	r9, s10
 80040b0:	444c      	add	r4, r9
 80040b2:	ee15 9a90 	vmov	r9, s11
 80040b6:	44cb      	add	fp, r9
 80040b8:	ee16 9a10 	vmov	r9, s12
 80040bc:	44cc      	add	ip, r9
 80040be:	ee16 9a90 	vmov	r9, s13
 80040c2:	44ce      	add	lr, r9
 80040c4:	ee11 1a90 	vmov	r1, s3
 80040c8:	fb87 9701 	smull	r9, r7, r7, r1
 80040cc:	fb09 fa02 	mul.w	sl, r9, r2
 80040d0:	fbca 9703 	smlal	r9, r7, sl, r3
 80040d4:	fb88 9801 	smull	r9, r8, r8, r1
 80040d8:	fb09 fa02 	mul.w	sl, r9, r2
 80040dc:	fbca 9803 	smlal	r9, r8, sl, r3
 80040e0:	ee12 1a10 	vmov	r1, s4
 80040e4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80040e8:	fb09 fa02 	mul.w	sl, r9, r2
 80040ec:	fbca 9c03 	smlal	r9, ip, sl, r3
 80040f0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80040f4:	fb09 fa02 	mul.w	sl, r9, r2
 80040f8:	fbca 9e03 	smlal	r9, lr, sl, r3
 80040fc:	443d      	add	r5, r7
 80040fe:	4446      	add	r6, r8
 8004100:	4464      	add	r4, ip
 8004102:	44f3      	add	fp, lr
 8004104:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004108:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800410c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004110:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004114:	ee12 1a90 	vmov	r1, s5
 8004118:	fb86 9601 	smull	r9, r6, r6, r1
 800411c:	fb09 fa02 	mul.w	sl, r9, r2
 8004120:	fbca 9603 	smlal	r9, r6, sl, r3
 8004124:	ee13 1a10 	vmov	r1, s6
 8004128:	fb88 9801 	smull	r9, r8, r8, r1
 800412c:	fb09 fa02 	mul.w	sl, r9, r2
 8004130:	fbca 9803 	smlal	r9, r8, sl, r3
 8004134:	ee13 1a90 	vmov	r1, s7
 8004138:	fb8b 9b01 	smull	r9, fp, fp, r1
 800413c:	fb09 fa02 	mul.w	sl, r9, r2
 8004140:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004144:	ee14 1a10 	vmov	r1, s8
 8004148:	fb8e 9e01 	smull	r9, lr, lr, r1
 800414c:	fb09 fa02 	mul.w	sl, r9, r2
 8004150:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004154:	4435      	add	r5, r6
 8004156:	4447      	add	r7, r8
 8004158:	445c      	add	r4, fp
 800415a:	44f4      	add	ip, lr
 800415c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004160:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8004164:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8004168:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1


    str.w pol1, [ptr_p, #1*distance*strincr]
 800416c:	f8c0 6240 	str.w	r6, [r0, #576]	@ 0x240
    str.w pol2, [ptr_p, #2*distance*strincr]
 8004170:	f8c0 7480 	str.w	r7, [r0, #1152]	@ 0x480
    str.w pol3, [ptr_p, #3*distance*strincr]
 8004174:	f8c0 86c0 	str.w	r8, [r0, #1728]	@ 0x6c0
    str.w pol4, [ptr_p, #4*distance*strincr]
 8004178:	f8c0 4900 	str.w	r4, [r0, #2304]	@ 0x900
    str.w pol5, [ptr_p, #5*distance*strincr]
 800417c:	f8c0 bb40 	str.w	fp, [r0, #2880]	@ 0xb40
    str.w pol6, [ptr_p, #6*distance*strincr]
 8004180:	f8c0 cd80 	str.w	ip, [r0, #3456]	@ 0xd80
    str.w pol7, [ptr_p, #7*distance*strincr]
 8004184:	f8c0 efc0 	str.w	lr, [r0, #4032]	@ 0xfc0
    str.w pol0, [ptr_p], #strincr
 8004188:	f840 5b04 	str.w	r5, [r0], #4
    ldr.w pol0, [ptr_p]
 800418c:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004190:	f8d0 6240 	ldr.w	r6, [r0, #576]	@ 0x240
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004194:	f8d0 7480 	ldr.w	r7, [r0, #1152]	@ 0x480
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004198:	f8d0 86c0 	ldr.w	r8, [r0, #1728]	@ 0x6c0
    ldr.w pol4, [ptr_p, #4*distance*strincr]
 800419c:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
    ldr.w pol5, [ptr_p, #5*distance*strincr]
 80041a0:	f8d0 bb40 	ldr.w	fp, [r0, #2880]	@ 0xb40
    ldr.w pol6, [ptr_p, #6*distance*strincr]
 80041a4:	f8d0 cd80 	ldr.w	ip, [r0, #3456]	@ 0xd80
    ldr.w pol7, [ptr_p, #7*distance*strincr]
 80041a8:	f8d0 efc0 	ldr.w	lr, [r0, #4032]	@ 0xfc0
    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80041ac:	ee11 1a10 	vmov	r1, s2
 80041b0:	ee05 4a10 	vmov	s10, r4
 80041b4:	ee05 ba90 	vmov	s11, fp
 80041b8:	ee06 ca10 	vmov	s12, ip
 80041bc:	ee06 ea90 	vmov	s13, lr
 80041c0:	fb84 9401 	smull	r9, r4, r4, r1
 80041c4:	fb09 fa02 	mul.w	sl, r9, r2
 80041c8:	fbca 9403 	smlal	r9, r4, sl, r3
 80041cc:	fb8b 9b01 	smull	r9, fp, fp, r1
 80041d0:	fb09 fa02 	mul.w	sl, r9, r2
 80041d4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80041d8:	fb8c 9c01 	smull	r9, ip, ip, r1
 80041dc:	fb09 fa02 	mul.w	sl, r9, r2
 80041e0:	fbca 9c03 	smlal	r9, ip, sl, r3
 80041e4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80041e8:	fb09 fa02 	mul.w	sl, r9, r2
 80041ec:	fbca 9e03 	smlal	r9, lr, sl, r3
 80041f0:	4425      	add	r5, r4
 80041f2:	445e      	add	r6, fp
 80041f4:	4467      	add	r7, ip
 80041f6:	44f0      	add	r8, lr
 80041f8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80041fc:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004200:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004204:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8004208:	ee15 9a10 	vmov	r9, s10
 800420c:	444c      	add	r4, r9
 800420e:	ee15 9a90 	vmov	r9, s11
 8004212:	44cb      	add	fp, r9
 8004214:	ee16 9a10 	vmov	r9, s12
 8004218:	44cc      	add	ip, r9
 800421a:	ee16 9a90 	vmov	r9, s13
 800421e:	44ce      	add	lr, r9
 8004220:	ee11 1a90 	vmov	r1, s3
 8004224:	fb87 9701 	smull	r9, r7, r7, r1
 8004228:	fb09 fa02 	mul.w	sl, r9, r2
 800422c:	fbca 9703 	smlal	r9, r7, sl, r3
 8004230:	fb88 9801 	smull	r9, r8, r8, r1
 8004234:	fb09 fa02 	mul.w	sl, r9, r2
 8004238:	fbca 9803 	smlal	r9, r8, sl, r3
 800423c:	ee12 1a10 	vmov	r1, s4
 8004240:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004244:	fb09 fa02 	mul.w	sl, r9, r2
 8004248:	fbca 9c03 	smlal	r9, ip, sl, r3
 800424c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004250:	fb09 fa02 	mul.w	sl, r9, r2
 8004254:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004258:	443d      	add	r5, r7
 800425a:	4446      	add	r6, r8
 800425c:	4464      	add	r4, ip
 800425e:	44f3      	add	fp, lr
 8004260:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004264:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004268:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 800426c:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004270:	ee12 1a90 	vmov	r1, s5
 8004274:	fb86 9601 	smull	r9, r6, r6, r1
 8004278:	fb09 fa02 	mul.w	sl, r9, r2
 800427c:	fbca 9603 	smlal	r9, r6, sl, r3
 8004280:	ee13 1a10 	vmov	r1, s6
 8004284:	fb88 9801 	smull	r9, r8, r8, r1
 8004288:	fb09 fa02 	mul.w	sl, r9, r2
 800428c:	fbca 9803 	smlal	r9, r8, sl, r3
 8004290:	ee13 1a90 	vmov	r1, s7
 8004294:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004298:	fb09 fa02 	mul.w	sl, r9, r2
 800429c:	fbca 9b03 	smlal	r9, fp, sl, r3
 80042a0:	ee14 1a10 	vmov	r1, s8
 80042a4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80042a8:	fb09 fa02 	mul.w	sl, r9, r2
 80042ac:	fbca 9e03 	smlal	r9, lr, sl, r3
 80042b0:	4435      	add	r5, r6
 80042b2:	4447      	add	r7, r8
 80042b4:	445c      	add	r4, fp
 80042b6:	44f4      	add	ip, lr
 80042b8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80042bc:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80042c0:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80042c4:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
    str.w pol1, [ptr_p, #1*distance*strincr]
 80042c8:	f8c0 6240 	str.w	r6, [r0, #576]	@ 0x240
    str.w pol2, [ptr_p, #2*distance*strincr]
 80042cc:	f8c0 7480 	str.w	r7, [r0, #1152]	@ 0x480
    str.w pol3, [ptr_p, #3*distance*strincr]
 80042d0:	f8c0 86c0 	str.w	r8, [r0, #1728]	@ 0x6c0
    str.w pol4, [ptr_p, #4*distance*strincr]
 80042d4:	f8c0 4900 	str.w	r4, [r0, #2304]	@ 0x900
    str.w pol5, [ptr_p, #5*distance*strincr]
 80042d8:	f8c0 bb40 	str.w	fp, [r0, #2880]	@ 0xb40
    str.w pol6, [ptr_p, #6*distance*strincr]
 80042dc:	f8c0 cd80 	str.w	ip, [r0, #3456]	@ 0xd80
    str.w pol7, [ptr_p, #7*distance*strincr]
 80042e0:	f8c0 efc0 	str.w	lr, [r0, #4032]	@ 0xfc0
    str.w pol0, [ptr_p], #strincr
 80042e4:	f840 5b04 	str.w	r5, [r0], #4
    .endr

	vmov temp_l, s9
 80042e8:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 80042ec:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80042f0:	f47f ae9e 	bne.w	8004030 <asm_ntt_1+0x24>

    sub ptr_p, #distance*strincr
 80042f4:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240

//stage 4 - 5
	.equ distance, 36	//36*4*4
	add.w temp_l, ptr_p, #4608
 80042f8:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
  	vmov s9, temp_l
 80042fc:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #36*strincr
 8004300:	f100 0a90 	add.w	sl, r0, #144	@ 0x90
    vmov s10, temp_l
 8004304:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8004308:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 800430c:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8004310:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 8004314:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 8004318:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 800431c:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004320:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004324:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004328:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0

    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 800432c:	fb87 970b 	smull	r9, r7, r7, fp
 8004330:	fb09 fa02 	mul.w	sl, r9, r2
 8004334:	fbca 9703 	smlal	r9, r7, sl, r3
 8004338:	fb88 980b 	smull	r9, r8, r8, fp
 800433c:	fb09 fa02 	mul.w	sl, r9, r2
 8004340:	fbca 9803 	smlal	r9, r8, sl, r3
 8004344:	443d      	add	r5, r7
 8004346:	4446      	add	r6, r8
 8004348:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800434c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004350:	fb86 960c 	smull	r9, r6, r6, ip
 8004354:	fb09 fa02 	mul.w	sl, r9, r2
 8004358:	fbca 9603 	smlal	r9, r6, sl, r3
 800435c:	fb88 980e 	smull	r9, r8, r8, lr
 8004360:	fb09 fa02 	mul.w	sl, r9, r2
 8004364:	fbca 9803 	smlal	r9, r8, sl, r3
 8004368:	4435      	add	r5, r6
 800436a:	4447      	add	r7, r8
 800436c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004370:	eba7 0848 	sub.w	r8, r7, r8, lsl #1

		str.w pol1, [ptr_p, #1*distance*strincr]
 8004374:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8004378:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 800437c:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol0, [ptr_p], #strincr
 8004380:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8004384:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004388:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 800438c:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004390:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8004394:	fb87 970b 	smull	r9, r7, r7, fp
 8004398:	fb09 fa02 	mul.w	sl, r9, r2
 800439c:	fbca 9703 	smlal	r9, r7, sl, r3
 80043a0:	fb88 980b 	smull	r9, r8, r8, fp
 80043a4:	fb09 fa02 	mul.w	sl, r9, r2
 80043a8:	fbca 9803 	smlal	r9, r8, sl, r3
 80043ac:	443d      	add	r5, r7
 80043ae:	4446      	add	r6, r8
 80043b0:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80043b4:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80043b8:	fb86 960c 	smull	r9, r6, r6, ip
 80043bc:	fb09 fa02 	mul.w	sl, r9, r2
 80043c0:	fbca 9603 	smlal	r9, r6, sl, r3
 80043c4:	fb88 980e 	smull	r9, r8, r8, lr
 80043c8:	fb09 fa02 	mul.w	sl, r9, r2
 80043cc:	fbca 9803 	smlal	r9, r8, sl, r3
 80043d0:	4435      	add	r5, r6
 80043d2:	4447      	add	r7, r8
 80043d4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80043d8:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
		str.w pol1, [ptr_p, #1*distance*strincr]
 80043dc:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80043e0:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80043e4:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol0, [ptr_p], #strincr
 80043e8:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 80043ec:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 80043f0:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 80043f4:	d192      	bne.n	800431c <asm_ntt_1+0x310>

	add.w ptr_p, #108*strincr //next ring index-0 : 36 + 108 = 144
 80043f6:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
    vmov temp_l, s9
 80043fa:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 80043fe:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8004402:	f47f af7d 	bne.w	8004300 <asm_ntt_1+0x2f4>

//stage 6 - 7

	sub ptr_p, #4608
 8004406:	f5a0 5090 	sub.w	r0, r0, #4608	@ 0x1200

	.equ distance, 9	//9*4*4

	add.w temp_l, ptr_p, #4608
 800440a:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
  	vmov s9, temp_l
 800440e:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #9*strincr
 8004412:	f100 0a24 	add.w	sl, r0, #36	@ 0x24
    vmov s10, temp_l
 8004416:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 800441a:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 800441e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8004422:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 8004426:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 800442a:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 3
		ldr.w pol0, [ptr_p]
 800442e:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004432:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004436:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 800443a:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c

    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 800443e:	fb87 970b 	smull	r9, r7, r7, fp
 8004442:	fb09 fa02 	mul.w	sl, r9, r2
 8004446:	fbca 9703 	smlal	r9, r7, sl, r3
 800444a:	fb88 980b 	smull	r9, r8, r8, fp
 800444e:	fb09 fa02 	mul.w	sl, r9, r2
 8004452:	fbca 9803 	smlal	r9, r8, sl, r3
 8004456:	443d      	add	r5, r7
 8004458:	4446      	add	r6, r8
 800445a:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800445e:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004462:	fb86 960c 	smull	r9, r6, r6, ip
 8004466:	fb09 fa02 	mul.w	sl, r9, r2
 800446a:	fbca 9603 	smlal	r9, r6, sl, r3
 800446e:	fb88 980e 	smull	r9, r8, r8, lr
 8004472:	fb09 fa02 	mul.w	sl, r9, r2
 8004476:	fbca 9803 	smlal	r9, r8, sl, r3
 800447a:	4435      	add	r5, r6
 800447c:	4447      	add	r7, r8
 800447e:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004482:	eba7 0848 	sub.w	r8, r7, r8, lsl #1

		str.w pol1, [ptr_p, #1*distance*strincr]
 8004486:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 800448a:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 800448e:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8004492:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8004496:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 800449a:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 800449e:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80044a2:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 80044a6:	fb87 970b 	smull	r9, r7, r7, fp
 80044aa:	fb09 fa02 	mul.w	sl, r9, r2
 80044ae:	fbca 9703 	smlal	r9, r7, sl, r3
 80044b2:	fb88 980b 	smull	r9, r8, r8, fp
 80044b6:	fb09 fa02 	mul.w	sl, r9, r2
 80044ba:	fbca 9803 	smlal	r9, r8, sl, r3
 80044be:	443d      	add	r5, r7
 80044c0:	4446      	add	r6, r8
 80044c2:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80044c6:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80044ca:	fb86 960c 	smull	r9, r6, r6, ip
 80044ce:	fb09 fa02 	mul.w	sl, r9, r2
 80044d2:	fbca 9603 	smlal	r9, r6, sl, r3
 80044d6:	fb88 980e 	smull	r9, r8, r8, lr
 80044da:	fb09 fa02 	mul.w	sl, r9, r2
 80044de:	fbca 9803 	smlal	r9, r8, sl, r3
 80044e2:	4435      	add	r5, r6
 80044e4:	4447      	add	r7, r8
 80044e6:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80044ea:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
		str.w pol1, [ptr_p, #1*distance*strincr]
 80044ee:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80044f2:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80044f6:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 80044fa:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 80044fe:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004502:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004506:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 800450a:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 800450e:	fb87 970b 	smull	r9, r7, r7, fp
 8004512:	fb09 fa02 	mul.w	sl, r9, r2
 8004516:	fbca 9703 	smlal	r9, r7, sl, r3
 800451a:	fb88 980b 	smull	r9, r8, r8, fp
 800451e:	fb09 fa02 	mul.w	sl, r9, r2
 8004522:	fbca 9803 	smlal	r9, r8, sl, r3
 8004526:	443d      	add	r5, r7
 8004528:	4446      	add	r6, r8
 800452a:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800452e:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004532:	fb86 960c 	smull	r9, r6, r6, ip
 8004536:	fb09 fa02 	mul.w	sl, r9, r2
 800453a:	fbca 9603 	smlal	r9, r6, sl, r3
 800453e:	fb88 980e 	smull	r9, r8, r8, lr
 8004542:	fb09 fa02 	mul.w	sl, r9, r2
 8004546:	fbca 9803 	smlal	r9, r8, sl, r3
 800454a:	4435      	add	r5, r6
 800454c:	4447      	add	r7, r8
 800454e:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004552:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
		str.w pol1, [ptr_p, #1*distance*strincr]
 8004556:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 800455a:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 800455e:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8004562:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 8004566:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 800456a:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 800456e:	f47f af5e 	bne.w	800442e <asm_ntt_1+0x422>

	add.w ptr_p, #27*strincr //next ring index-0 : 9 + 27 = 36
 8004572:	f100 006c 	add.w	r0, r0, #108	@ 0x6c
    vmov temp_l, s9
 8004576:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 800457a:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 800457e:	f47f af48 	bne.w	8004412 <asm_ntt_1+0x406>

    pop.w {r4-r11, pc}
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	bf00      	nop

08004588 <asm_ntt_1_radix3>:
//extern void asm_ntt_1_radix3(int32_t * Out, int32_t* zeta);
.global asm_ntt_1_radix3
.type asm_ntt_1_radix3,%function
.align 2
asm_ntt_1_radix3:
    push.w {r4-r11, r14}
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vpush.w {s16-s24}
 800458c:	ed2d 8a09 	vpush	{s16-s24}
  	zeta0     .req R11
  	zeta1     .req R12
  	wmont     .req R14


    movw qinv, #:lower16:0x7a29f27f
 8004590:	f24f 227f 	movw	r2, #62079	@ 0xf27f
    movt qinv, #:upper16:0x7a29f27f
 8004594:	f6c7 2229 	movt	r2, #31273	@ 0x7a29
    movw q, #0x3281
 8004598:	f243 2381 	movw	r3, #12929	@ 0x3281
    movt q, #0x80
 800459c:	f2c0 0380 	movt	r3, #128	@ 0x80
    movw wmont, #0x571f // 1857311
 80045a0:	f245 7e1f 	movw	lr, #22303	@ 0x571f
    movt wmont, #0x1c // 1857311
 80045a4:	f2c0 0e1c 	movt	lr, #28


	movw cntr, #128
 80045a8:	f240 0480 	movw	r4, #128	@ 0x80

1:
	vldm ptr_p, {s0-s8} //2-8
 80045ac:	ec90 0a09 	vldmia	r0, {s0-s8}
	vldm ptr_zeta!, {s9-s16}
 80045b0:	ecf1 4a08 	vldmia	r1!, {s9-s16}

	_2_layer_CT_32_radix3 pol0, pol1, pol2, pol3, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, zeta0, zeta1, qinv, q, wmont, temp_l, temp_h
 80045b4:	ee14 ba90 	vmov	fp, s9
 80045b8:	ee15 ca10 	vmov	ip, s10
 80045bc:	ee10 6a10 	vmov	r6, s0
 80045c0:	ee11 7a90 	vmov	r7, s3
 80045c4:	ee13 8a10 	vmov	r8, s6
 80045c8:	fb87 a70b 	smull	sl, r7, r7, fp
 80045cc:	fb0a f902 	mul.w	r9, sl, r2
 80045d0:	fbc9 a703 	smlal	sl, r7, r9, r3
 80045d4:	fb88 a80c 	smull	sl, r8, r8, ip
 80045d8:	fb0a f902 	mul.w	r9, sl, r2
 80045dc:	fbc9 a803 	smlal	sl, r8, r9, r3
 80045e0:	ea4f 0507 	mov.w	r5, r7
 80045e4:	eba5 0508 	sub.w	r5, r5, r8
 80045e8:	fb85 a50e 	smull	sl, r5, r5, lr
 80045ec:	fb0a f902 	mul.w	r9, sl, r2
 80045f0:	fbc9 a503 	smlal	sl, r5, r9, r3
 80045f4:	ea4f 0a06 	mov.w	sl, r6
 80045f8:	ebaa 0a07 	sub.w	sl, sl, r7
 80045fc:	ebaa 0a05 	sub.w	sl, sl, r5
 8004600:	ea4f 0906 	mov.w	r9, r6
 8004604:	eba9 0908 	sub.w	r9, r9, r8
 8004608:	44a9      	add	r9, r5
 800460a:	443e      	add	r6, r7
 800460c:	4446      	add	r6, r8
 800460e:	ee00 6a10 	vmov	s0, r6
 8004612:	ee01 9a90 	vmov	s3, r9
 8004616:	ee03 aa10 	vmov	s6, sl
 800461a:	ee10 6a90 	vmov	r6, s1
 800461e:	ee12 7a10 	vmov	r7, s4
 8004622:	ee13 8a90 	vmov	r8, s7
 8004626:	fb87 a70b 	smull	sl, r7, r7, fp
 800462a:	fb0a f902 	mul.w	r9, sl, r2
 800462e:	fbc9 a703 	smlal	sl, r7, r9, r3
 8004632:	fb88 a80c 	smull	sl, r8, r8, ip
 8004636:	fb0a f902 	mul.w	r9, sl, r2
 800463a:	fbc9 a803 	smlal	sl, r8, r9, r3
 800463e:	ea4f 0507 	mov.w	r5, r7
 8004642:	eba5 0508 	sub.w	r5, r5, r8
 8004646:	fb85 a50e 	smull	sl, r5, r5, lr
 800464a:	fb0a f902 	mul.w	r9, sl, r2
 800464e:	fbc9 a503 	smlal	sl, r5, r9, r3
 8004652:	ea4f 0a06 	mov.w	sl, r6
 8004656:	ebaa 0a07 	sub.w	sl, sl, r7
 800465a:	ebaa 0a05 	sub.w	sl, sl, r5
 800465e:	ea4f 0906 	mov.w	r9, r6
 8004662:	eba9 0908 	sub.w	r9, r9, r8
 8004666:	44a9      	add	r9, r5
 8004668:	443e      	add	r6, r7
 800466a:	4446      	add	r6, r8
 800466c:	ee00 6a90 	vmov	s1, r6
 8004670:	ee02 9a10 	vmov	s4, r9
 8004674:	ee03 aa90 	vmov	s7, sl
 8004678:	ee11 6a10 	vmov	r6, s2
 800467c:	ee12 7a90 	vmov	r7, s5
 8004680:	ee14 8a10 	vmov	r8, s8
 8004684:	fb87 a70b 	smull	sl, r7, r7, fp
 8004688:	fb0a f902 	mul.w	r9, sl, r2
 800468c:	fbc9 a703 	smlal	sl, r7, r9, r3
 8004690:	fb88 a80c 	smull	sl, r8, r8, ip
 8004694:	fb0a f902 	mul.w	r9, sl, r2
 8004698:	fbc9 a803 	smlal	sl, r8, r9, r3
 800469c:	ea4f 0507 	mov.w	r5, r7
 80046a0:	eba5 0508 	sub.w	r5, r5, r8
 80046a4:	fb85 a50e 	smull	sl, r5, r5, lr
 80046a8:	fb0a f902 	mul.w	r9, sl, r2
 80046ac:	fbc9 a503 	smlal	sl, r5, r9, r3
 80046b0:	ea4f 0a06 	mov.w	sl, r6
 80046b4:	ebaa 0a07 	sub.w	sl, sl, r7
 80046b8:	ebaa 0a05 	sub.w	sl, sl, r5
 80046bc:	ea4f 0906 	mov.w	r9, r6
 80046c0:	eba9 0908 	sub.w	r9, r9, r8
 80046c4:	44a9      	add	r9, r5
 80046c6:	443e      	add	r6, r7
 80046c8:	4446      	add	r6, r8
 80046ca:	ee01 6a10 	vmov	s2, r6
 80046ce:	ee02 9a90 	vmov	s5, r9
 80046d2:	ee04 aa10 	vmov	s8, sl
 80046d6:	ee15 ba90 	vmov	fp, s11
 80046da:	ee16 ca10 	vmov	ip, s12
 80046de:	ee10 6a10 	vmov	r6, s0
 80046e2:	ee10 7a90 	vmov	r7, s1
 80046e6:	ee11 8a10 	vmov	r8, s2
 80046ea:	fb87 a70b 	smull	sl, r7, r7, fp
 80046ee:	fb0a f902 	mul.w	r9, sl, r2
 80046f2:	fbc9 a703 	smlal	sl, r7, r9, r3
 80046f6:	fb88 a80c 	smull	sl, r8, r8, ip
 80046fa:	fb0a f902 	mul.w	r9, sl, r2
 80046fe:	fbc9 a803 	smlal	sl, r8, r9, r3
 8004702:	ea4f 0507 	mov.w	r5, r7
 8004706:	eba5 0508 	sub.w	r5, r5, r8
 800470a:	fb85 a50e 	smull	sl, r5, r5, lr
 800470e:	fb0a f902 	mul.w	r9, sl, r2
 8004712:	fbc9 a503 	smlal	sl, r5, r9, r3
 8004716:	ea4f 0a06 	mov.w	sl, r6
 800471a:	ebaa 0a07 	sub.w	sl, sl, r7
 800471e:	ebaa 0a05 	sub.w	sl, sl, r5
 8004722:	ea4f 0906 	mov.w	r9, r6
 8004726:	eba9 0908 	sub.w	r9, r9, r8
 800472a:	44a9      	add	r9, r5
 800472c:	443e      	add	r6, r7
 800472e:	4446      	add	r6, r8
 8004730:	ee00 6a10 	vmov	s0, r6
 8004734:	ee00 9a90 	vmov	s1, r9
 8004738:	ee01 aa10 	vmov	s2, sl
 800473c:	ee16 ba90 	vmov	fp, s13
 8004740:	ee17 ca10 	vmov	ip, s14
 8004744:	ee11 6a90 	vmov	r6, s3
 8004748:	ee12 7a10 	vmov	r7, s4
 800474c:	ee12 8a90 	vmov	r8, s5
 8004750:	fb87 a70b 	smull	sl, r7, r7, fp
 8004754:	fb0a f902 	mul.w	r9, sl, r2
 8004758:	fbc9 a703 	smlal	sl, r7, r9, r3
 800475c:	fb88 a80c 	smull	sl, r8, r8, ip
 8004760:	fb0a f902 	mul.w	r9, sl, r2
 8004764:	fbc9 a803 	smlal	sl, r8, r9, r3
 8004768:	ea4f 0507 	mov.w	r5, r7
 800476c:	eba5 0508 	sub.w	r5, r5, r8
 8004770:	fb85 a50e 	smull	sl, r5, r5, lr
 8004774:	fb0a f902 	mul.w	r9, sl, r2
 8004778:	fbc9 a503 	smlal	sl, r5, r9, r3
 800477c:	ea4f 0a06 	mov.w	sl, r6
 8004780:	ebaa 0a07 	sub.w	sl, sl, r7
 8004784:	ebaa 0a05 	sub.w	sl, sl, r5
 8004788:	ea4f 0906 	mov.w	r9, r6
 800478c:	eba9 0908 	sub.w	r9, r9, r8
 8004790:	44a9      	add	r9, r5
 8004792:	443e      	add	r6, r7
 8004794:	4446      	add	r6, r8
 8004796:	ee01 6a90 	vmov	s3, r6
 800479a:	ee02 9a10 	vmov	s4, r9
 800479e:	ee02 aa90 	vmov	s5, sl
 80047a2:	ee17 ba90 	vmov	fp, s15
 80047a6:	ee18 ca10 	vmov	ip, s16
 80047aa:	ee13 6a10 	vmov	r6, s6
 80047ae:	ee13 7a90 	vmov	r7, s7
 80047b2:	ee14 8a10 	vmov	r8, s8
 80047b6:	fb87 a70b 	smull	sl, r7, r7, fp
 80047ba:	fb0a f902 	mul.w	r9, sl, r2
 80047be:	fbc9 a703 	smlal	sl, r7, r9, r3
 80047c2:	fb88 a80c 	smull	sl, r8, r8, ip
 80047c6:	fb0a f902 	mul.w	r9, sl, r2
 80047ca:	fbc9 a803 	smlal	sl, r8, r9, r3
 80047ce:	ea4f 0507 	mov.w	r5, r7
 80047d2:	eba5 0508 	sub.w	r5, r5, r8
 80047d6:	fb85 a50e 	smull	sl, r5, r5, lr
 80047da:	fb0a f902 	mul.w	r9, sl, r2
 80047de:	fbc9 a503 	smlal	sl, r5, r9, r3
 80047e2:	ea4f 0a06 	mov.w	sl, r6
 80047e6:	ebaa 0a07 	sub.w	sl, sl, r7
 80047ea:	ebaa 0a05 	sub.w	sl, sl, r5
 80047ee:	ea4f 0906 	mov.w	r9, r6
 80047f2:	eba9 0908 	sub.w	r9, r9, r8
 80047f6:	44a9      	add	r9, r5
 80047f8:	443e      	add	r6, r7
 80047fa:	4446      	add	r6, r8
 80047fc:	ee03 6a10 	vmov	s6, r6
 8004800:	ee03 9a90 	vmov	s7, r9
 8004804:	ee04 aa10 	vmov	s8, sl

	vmov.w pol0, s1
 8004808:	ee10 5a90 	vmov	r5, s1
	vmov.w pol1, s2
 800480c:	ee11 6a10 	vmov	r6, s2
	vmov.w pol2, s3
 8004810:	ee11 7a90 	vmov	r7, s3
    str.w pol0, [ptr_p, #4]
 8004814:	f8c0 5004 	str.w	r5, [r0, #4]
    str.w pol1, [ptr_p, #8]
 8004818:	f8c0 6008 	str.w	r6, [r0, #8]
    str.w pol2, [ptr_p, #12]
 800481c:	f8c0 700c 	str.w	r7, [r0, #12]

    vmov.w pol0, s4
 8004820:	ee12 5a10 	vmov	r5, s4
	vmov.w pol1, s5
 8004824:	ee12 6a90 	vmov	r6, s5
	vmov.w pol2, s6
 8004828:	ee13 7a10 	vmov	r7, s6
    str.w pol0, [ptr_p, #16]
 800482c:	f8c0 5010 	str.w	r5, [r0, #16]
    str.w pol1, [ptr_p, #20]
 8004830:	f8c0 6014 	str.w	r6, [r0, #20]
    str.w pol2, [ptr_p, #24]
 8004834:	f8c0 7018 	str.w	r7, [r0, #24]

    vmov.w pol0, s7
 8004838:	ee13 5a90 	vmov	r5, s7
	vmov.w pol1, s8
 800483c:	ee14 6a10 	vmov	r6, s8
	vmov.w pol2, s0
 8004840:	ee10 7a10 	vmov	r7, s0
    str.w pol0, [ptr_p, #28]
 8004844:	f8c0 501c 	str.w	r5, [r0, #28]
    str.w pol1, [ptr_p, #32]
 8004848:	f8c0 6020 	str.w	r6, [r0, #32]
    str.w pol2, [ptr_p], #36
 800484c:	f840 7b24 	str.w	r7, [r0], #36

	subs cntr, #1
 8004850:	3c01      	subs	r4, #1
    bne.w 1b
 8004852:	f47f aeab 	bne.w	80045ac <asm_ntt_1_radix3+0x24>

	vpop.w {s16-s24}
 8004856:	ecbd 8a09 	vpop	{s16-s24}
    pop.w {r4-r11, pc}
 800485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485e:	bf00      	nop

08004860 <asm_ntt_3>:
// void asm_ntt_3(int32_t * Out, int32_t* zeta);
.global asm_ntt_3
.type asm_ntt_3,%function
.align 2
asm_ntt_3:
    push.w {r4-r11, r14}
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	zeta2     .req R14
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14

	movw qinv, #:lower16:0x83fc21ff
 8004864:	f242 12ff 	movw	r2, #8703	@ 0x21ff
    movt qinv, #:upper16:0x83fc21ff
 8004868:	f2c8 32fc 	movt	r2, #33788	@ 0x83fc
    movw q, #0x2201
 800486c:	f242 2301 	movw	r3, #8705	@ 0x2201
    movt q, #0x80
 8004870:	f2c0 0380 	movt	r3, #128	@ 0x80

//stage 1 - 3
	.equ distance, 192 //1536/8
  	.equ strincr, 4

  	vldm ptr_zeta!, {s2-s8}
 8004874:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 8004878:	ee00 1a10 	vmov	s0, r1

  	add.w temp_l, ptr_p, #distance*strincr // 8*192 = 1536
 800487c:	f500 7a40 	add.w	sl, r0, #768	@ 0x300
  	vmov s9, temp_l
 8004880:	ee04 aa90 	vmov	s9, sl

	add.w temp_l, ptr_p, #4*distance*strincr
 8004884:	f500 6a40 	add.w	sl, r0, #3072	@ 0xc00
	vmov s14, temp_l
 8004888:	ee07 aa10 	vmov	s14, sl
  1:
    .rept 2
    vmov temp_l, s14
 800488c:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8004890:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004894:	f8d0 6300 	ldr.w	r6, [r0, #768]	@ 0x300
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004898:	f8d0 7600 	ldr.w	r7, [r0, #1536]	@ 0x600
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 800489c:	f8d0 8900 	ldr.w	r8, [r0, #2304]	@ 0x900
    ldr.w pol4, [temp_l]
 80048a0:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 80048a4:	f8da b300 	ldr.w	fp, [sl, #768]	@ 0x300
    ldr.w pol6, [temp_l, #2*distance*strincr]
 80048a8:	f8da c600 	ldr.w	ip, [sl, #1536]	@ 0x600
    ldr.w pol7, [temp_l, #3*distance*strincr]
 80048ac:	f8da e900 	ldr.w	lr, [sl, #2304]	@ 0x900

    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80048b0:	ee11 1a10 	vmov	r1, s2
 80048b4:	ee05 4a10 	vmov	s10, r4
 80048b8:	ee05 ba90 	vmov	s11, fp
 80048bc:	ee06 ca10 	vmov	s12, ip
 80048c0:	ee06 ea90 	vmov	s13, lr
 80048c4:	fb84 9401 	smull	r9, r4, r4, r1
 80048c8:	fb09 fa02 	mul.w	sl, r9, r2
 80048cc:	fbca 9403 	smlal	r9, r4, sl, r3
 80048d0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80048d4:	fb09 fa02 	mul.w	sl, r9, r2
 80048d8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80048dc:	fb8c 9c01 	smull	r9, ip, ip, r1
 80048e0:	fb09 fa02 	mul.w	sl, r9, r2
 80048e4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80048e8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80048ec:	fb09 fa02 	mul.w	sl, r9, r2
 80048f0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80048f4:	4425      	add	r5, r4
 80048f6:	445e      	add	r6, fp
 80048f8:	4467      	add	r7, ip
 80048fa:	44f0      	add	r8, lr
 80048fc:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8004900:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004904:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004908:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800490c:	ee15 9a10 	vmov	r9, s10
 8004910:	444c      	add	r4, r9
 8004912:	ee15 9a90 	vmov	r9, s11
 8004916:	44cb      	add	fp, r9
 8004918:	ee16 9a10 	vmov	r9, s12
 800491c:	44cc      	add	ip, r9
 800491e:	ee16 9a90 	vmov	r9, s13
 8004922:	44ce      	add	lr, r9
 8004924:	ee11 1a90 	vmov	r1, s3
 8004928:	fb87 9701 	smull	r9, r7, r7, r1
 800492c:	fb09 fa02 	mul.w	sl, r9, r2
 8004930:	fbca 9703 	smlal	r9, r7, sl, r3
 8004934:	fb88 9801 	smull	r9, r8, r8, r1
 8004938:	fb09 fa02 	mul.w	sl, r9, r2
 800493c:	fbca 9803 	smlal	r9, r8, sl, r3
 8004940:	ee12 1a10 	vmov	r1, s4
 8004944:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004948:	fb09 fa02 	mul.w	sl, r9, r2
 800494c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004950:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004954:	fb09 fa02 	mul.w	sl, r9, r2
 8004958:	fbca 9e03 	smlal	r9, lr, sl, r3
 800495c:	443d      	add	r5, r7
 800495e:	4446      	add	r6, r8
 8004960:	4464      	add	r4, ip
 8004962:	44f3      	add	fp, lr
 8004964:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004968:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800496c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004970:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004974:	ee12 1a90 	vmov	r1, s5
 8004978:	fb86 9601 	smull	r9, r6, r6, r1
 800497c:	fb09 fa02 	mul.w	sl, r9, r2
 8004980:	fbca 9603 	smlal	r9, r6, sl, r3
 8004984:	ee13 1a10 	vmov	r1, s6
 8004988:	fb88 9801 	smull	r9, r8, r8, r1
 800498c:	fb09 fa02 	mul.w	sl, r9, r2
 8004990:	fbca 9803 	smlal	r9, r8, sl, r3
 8004994:	ee13 1a90 	vmov	r1, s7
 8004998:	fb8b 9b01 	smull	r9, fp, fp, r1
 800499c:	fb09 fa02 	mul.w	sl, r9, r2
 80049a0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80049a4:	ee14 1a10 	vmov	r1, s8
 80049a8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80049ac:	fb09 fa02 	mul.w	sl, r9, r2
 80049b0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80049b4:	4435      	add	r5, r6
 80049b6:	4447      	add	r7, r8
 80049b8:	445c      	add	r4, fp
 80049ba:	44f4      	add	ip, lr
 80049bc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80049c0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80049c4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80049c8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1

	vmov temp_l, s14
 80049cc:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 80049d0:	f8c0 6300 	str.w	r6, [r0, #768]	@ 0x300
    str.w pol2, [ptr_p, #2*distance*strincr]
 80049d4:	f8c0 7600 	str.w	r7, [r0, #1536]	@ 0x600
    str.w pol3, [ptr_p, #3*distance*strincr]
 80049d8:	f8c0 8900 	str.w	r8, [r0, #2304]	@ 0x900
    str.w pol0, [ptr_p], #strincr
 80049dc:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 80049e0:	f8ca b300 	str.w	fp, [sl, #768]	@ 0x300
    str.w pol6, [temp_l, #2*distance*strincr]
 80049e4:	f8ca c600 	str.w	ip, [sl, #1536]	@ 0x600
    str.w pol7, [temp_l, #3*distance*strincr]
 80049e8:	f8ca e900 	str.w	lr, [sl, #2304]	@ 0x900
    str.w pol4, [temp_l], #strincr
 80049ec:	f84a 4b04 	str.w	r4, [sl], #4

	vmov s14, temp_l
 80049f0:	ee07 aa10 	vmov	s14, sl
    vmov temp_l, s14
 80049f4:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 80049f8:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 80049fc:	f8d0 6300 	ldr.w	r6, [r0, #768]	@ 0x300
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004a00:	f8d0 7600 	ldr.w	r7, [r0, #1536]	@ 0x600
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004a04:	f8d0 8900 	ldr.w	r8, [r0, #2304]	@ 0x900
    ldr.w pol4, [temp_l]
 8004a08:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8004a0c:	f8da b300 	ldr.w	fp, [sl, #768]	@ 0x300
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8004a10:	f8da c600 	ldr.w	ip, [sl, #1536]	@ 0x600
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8004a14:	f8da e900 	ldr.w	lr, [sl, #2304]	@ 0x900
    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004a18:	ee11 1a10 	vmov	r1, s2
 8004a1c:	ee05 4a10 	vmov	s10, r4
 8004a20:	ee05 ba90 	vmov	s11, fp
 8004a24:	ee06 ca10 	vmov	s12, ip
 8004a28:	ee06 ea90 	vmov	s13, lr
 8004a2c:	fb84 9401 	smull	r9, r4, r4, r1
 8004a30:	fb09 fa02 	mul.w	sl, r9, r2
 8004a34:	fbca 9403 	smlal	r9, r4, sl, r3
 8004a38:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004a3c:	fb09 fa02 	mul.w	sl, r9, r2
 8004a40:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004a44:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004a48:	fb09 fa02 	mul.w	sl, r9, r2
 8004a4c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004a50:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004a54:	fb09 fa02 	mul.w	sl, r9, r2
 8004a58:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004a5c:	4425      	add	r5, r4
 8004a5e:	445e      	add	r6, fp
 8004a60:	4467      	add	r7, ip
 8004a62:	44f0      	add	r8, lr
 8004a64:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8004a68:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004a6c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004a70:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8004a74:	ee15 9a10 	vmov	r9, s10
 8004a78:	444c      	add	r4, r9
 8004a7a:	ee15 9a90 	vmov	r9, s11
 8004a7e:	44cb      	add	fp, r9
 8004a80:	ee16 9a10 	vmov	r9, s12
 8004a84:	44cc      	add	ip, r9
 8004a86:	ee16 9a90 	vmov	r9, s13
 8004a8a:	44ce      	add	lr, r9
 8004a8c:	ee11 1a90 	vmov	r1, s3
 8004a90:	fb87 9701 	smull	r9, r7, r7, r1
 8004a94:	fb09 fa02 	mul.w	sl, r9, r2
 8004a98:	fbca 9703 	smlal	r9, r7, sl, r3
 8004a9c:	fb88 9801 	smull	r9, r8, r8, r1
 8004aa0:	fb09 fa02 	mul.w	sl, r9, r2
 8004aa4:	fbca 9803 	smlal	r9, r8, sl, r3
 8004aa8:	ee12 1a10 	vmov	r1, s4
 8004aac:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004ab0:	fb09 fa02 	mul.w	sl, r9, r2
 8004ab4:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004ab8:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004abc:	fb09 fa02 	mul.w	sl, r9, r2
 8004ac0:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004ac4:	443d      	add	r5, r7
 8004ac6:	4446      	add	r6, r8
 8004ac8:	4464      	add	r4, ip
 8004aca:	44f3      	add	fp, lr
 8004acc:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004ad0:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004ad4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004ad8:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004adc:	ee12 1a90 	vmov	r1, s5
 8004ae0:	fb86 9601 	smull	r9, r6, r6, r1
 8004ae4:	fb09 fa02 	mul.w	sl, r9, r2
 8004ae8:	fbca 9603 	smlal	r9, r6, sl, r3
 8004aec:	ee13 1a10 	vmov	r1, s6
 8004af0:	fb88 9801 	smull	r9, r8, r8, r1
 8004af4:	fb09 fa02 	mul.w	sl, r9, r2
 8004af8:	fbca 9803 	smlal	r9, r8, sl, r3
 8004afc:	ee13 1a90 	vmov	r1, s7
 8004b00:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004b04:	fb09 fa02 	mul.w	sl, r9, r2
 8004b08:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004b0c:	ee14 1a10 	vmov	r1, s8
 8004b10:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004b14:	fb09 fa02 	mul.w	sl, r9, r2
 8004b18:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004b1c:	4435      	add	r5, r6
 8004b1e:	4447      	add	r7, r8
 8004b20:	445c      	add	r4, fp
 8004b22:	44f4      	add	ip, lr
 8004b24:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004b28:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8004b2c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8004b30:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
	vmov temp_l, s14
 8004b34:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 8004b38:	f8c0 6300 	str.w	r6, [r0, #768]	@ 0x300
    str.w pol2, [ptr_p, #2*distance*strincr]
 8004b3c:	f8c0 7600 	str.w	r7, [r0, #1536]	@ 0x600
    str.w pol3, [ptr_p, #3*distance*strincr]
 8004b40:	f8c0 8900 	str.w	r8, [r0, #2304]	@ 0x900
    str.w pol0, [ptr_p], #strincr
 8004b44:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8004b48:	f8ca b300 	str.w	fp, [sl, #768]	@ 0x300
    str.w pol6, [temp_l, #2*distance*strincr]
 8004b4c:	f8ca c600 	str.w	ip, [sl, #1536]	@ 0x600
    str.w pol7, [temp_l, #3*distance*strincr]
 8004b50:	f8ca e900 	str.w	lr, [sl, #2304]	@ 0x900
    str.w pol4, [temp_l], #strincr
 8004b54:	f84a 4b04 	str.w	r4, [sl], #4
	vmov s14, temp_l
 8004b58:	ee07 aa10 	vmov	s14, sl
    .endr

	vmov temp_l, s9
 8004b5c:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 8004b60:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8004b64:	f47f ae92 	bne.w	800488c <asm_ntt_3+0x2c>

    sub ptr_p, #distance*strincr
 8004b68:	f5a0 7040 	sub.w	r0, r0, #768	@ 0x300


//stage 4 - 6
	.equ distance, 24	//24*8 = 192
	add.w temp_l, ptr_p, #6144
 8004b6c:	f500 5ac0 	add.w	sl, r0, #6144	@ 0x1800
  	vmov s9, temp_l
 8004b70:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr
 8004b74:	f100 0a60 	add.w	sl, r0, #96	@ 0x60
    vmov s10, temp_l
 8004b78:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8004b7c:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 8004b80:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 8004b84:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 8004b88:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004b8c:	f8d0 6060 	ldr.w	r6, [r0, #96]	@ 0x60
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004b90:	f8d0 70c0 	ldr.w	r7, [r0, #192]	@ 0xc0
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004b94:	f8d0 8120 	ldr.w	r8, [r0, #288]	@ 0x120
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8004b98:	f8d0 4180 	ldr.w	r4, [r0, #384]	@ 0x180
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8004b9c:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	@ 0x1e0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8004ba0:	f8d0 c240 	ldr.w	ip, [r0, #576]	@ 0x240
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8004ba4:	f8d0 e2a0 	ldr.w	lr, [r0, #672]	@ 0x2a0

    	_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004ba8:	ee11 1a10 	vmov	r1, s2
 8004bac:	fb84 9401 	smull	r9, r4, r4, r1
 8004bb0:	fb09 fa02 	mul.w	sl, r9, r2
 8004bb4:	fbca 9403 	smlal	r9, r4, sl, r3
 8004bb8:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004bbc:	fb09 fa02 	mul.w	sl, r9, r2
 8004bc0:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004bc4:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004bc8:	fb09 fa02 	mul.w	sl, r9, r2
 8004bcc:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004bd0:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004bd4:	fb09 fa02 	mul.w	sl, r9, r2
 8004bd8:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004bdc:	4425      	add	r5, r4
 8004bde:	445e      	add	r6, fp
 8004be0:	4467      	add	r7, ip
 8004be2:	44f0      	add	r8, lr
 8004be4:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8004be8:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004bec:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004bf0:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8004bf4:	ee11 1a90 	vmov	r1, s3
 8004bf8:	fb87 9701 	smull	r9, r7, r7, r1
 8004bfc:	fb09 fa02 	mul.w	sl, r9, r2
 8004c00:	fbca 9703 	smlal	r9, r7, sl, r3
 8004c04:	fb88 9801 	smull	r9, r8, r8, r1
 8004c08:	fb09 fa02 	mul.w	sl, r9, r2
 8004c0c:	fbca 9803 	smlal	r9, r8, sl, r3
 8004c10:	ee12 1a10 	vmov	r1, s4
 8004c14:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004c18:	fb09 fa02 	mul.w	sl, r9, r2
 8004c1c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004c20:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004c24:	fb09 fa02 	mul.w	sl, r9, r2
 8004c28:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004c2c:	443d      	add	r5, r7
 8004c2e:	4446      	add	r6, r8
 8004c30:	4464      	add	r4, ip
 8004c32:	44f3      	add	fp, lr
 8004c34:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004c38:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004c3c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004c40:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004c44:	ee12 1a90 	vmov	r1, s5
 8004c48:	fb86 9601 	smull	r9, r6, r6, r1
 8004c4c:	fb09 fa02 	mul.w	sl, r9, r2
 8004c50:	fbca 9603 	smlal	r9, r6, sl, r3
 8004c54:	ee13 1a10 	vmov	r1, s6
 8004c58:	fb88 9801 	smull	r9, r8, r8, r1
 8004c5c:	fb09 fa02 	mul.w	sl, r9, r2
 8004c60:	fbca 9803 	smlal	r9, r8, sl, r3
 8004c64:	ee13 1a90 	vmov	r1, s7
 8004c68:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004c6c:	fb09 fa02 	mul.w	sl, r9, r2
 8004c70:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004c74:	ee14 1a10 	vmov	r1, s8
 8004c78:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004c7c:	fb09 fa02 	mul.w	sl, r9, r2
 8004c80:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004c84:	4435      	add	r5, r6
 8004c86:	4447      	add	r7, r8
 8004c88:	445c      	add	r4, fp
 8004c8a:	44f4      	add	ip, lr
 8004c8c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004c90:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8004c94:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8004c98:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1


    	str.w pol1, [ptr_p, #1*distance*strincr]
 8004c9c:	f8c0 6060 	str.w	r6, [r0, #96]	@ 0x60
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8004ca0:	f8c0 70c0 	str.w	r7, [r0, #192]	@ 0xc0
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8004ca4:	f8c0 8120 	str.w	r8, [r0, #288]	@ 0x120
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8004ca8:	f8c0 4180 	str.w	r4, [r0, #384]	@ 0x180
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8004cac:	f8c0 b1e0 	str.w	fp, [r0, #480]	@ 0x1e0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8004cb0:	f8c0 c240 	str.w	ip, [r0, #576]	@ 0x240
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8004cb4:	f8c0 e2a0 	str.w	lr, [r0, #672]	@ 0x2a0
    	str.w pol0, [ptr_p], #strincr
 8004cb8:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8004cbc:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004cc0:	f8d0 6060 	ldr.w	r6, [r0, #96]	@ 0x60
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004cc4:	f8d0 70c0 	ldr.w	r7, [r0, #192]	@ 0xc0
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004cc8:	f8d0 8120 	ldr.w	r8, [r0, #288]	@ 0x120
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8004ccc:	f8d0 4180 	ldr.w	r4, [r0, #384]	@ 0x180
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8004cd0:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	@ 0x1e0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8004cd4:	f8d0 c240 	ldr.w	ip, [r0, #576]	@ 0x240
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8004cd8:	f8d0 e2a0 	ldr.w	lr, [r0, #672]	@ 0x2a0
    	_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004cdc:	ee11 1a10 	vmov	r1, s2
 8004ce0:	fb84 9401 	smull	r9, r4, r4, r1
 8004ce4:	fb09 fa02 	mul.w	sl, r9, r2
 8004ce8:	fbca 9403 	smlal	r9, r4, sl, r3
 8004cec:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004cf0:	fb09 fa02 	mul.w	sl, r9, r2
 8004cf4:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004cf8:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004cfc:	fb09 fa02 	mul.w	sl, r9, r2
 8004d00:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004d04:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004d08:	fb09 fa02 	mul.w	sl, r9, r2
 8004d0c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004d10:	4425      	add	r5, r4
 8004d12:	445e      	add	r6, fp
 8004d14:	4467      	add	r7, ip
 8004d16:	44f0      	add	r8, lr
 8004d18:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8004d1c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004d20:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004d24:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8004d28:	ee11 1a90 	vmov	r1, s3
 8004d2c:	fb87 9701 	smull	r9, r7, r7, r1
 8004d30:	fb09 fa02 	mul.w	sl, r9, r2
 8004d34:	fbca 9703 	smlal	r9, r7, sl, r3
 8004d38:	fb88 9801 	smull	r9, r8, r8, r1
 8004d3c:	fb09 fa02 	mul.w	sl, r9, r2
 8004d40:	fbca 9803 	smlal	r9, r8, sl, r3
 8004d44:	ee12 1a10 	vmov	r1, s4
 8004d48:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004d4c:	fb09 fa02 	mul.w	sl, r9, r2
 8004d50:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004d54:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004d58:	fb09 fa02 	mul.w	sl, r9, r2
 8004d5c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004d60:	443d      	add	r5, r7
 8004d62:	4446      	add	r6, r8
 8004d64:	4464      	add	r4, ip
 8004d66:	44f3      	add	fp, lr
 8004d68:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004d6c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004d70:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004d74:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004d78:	ee12 1a90 	vmov	r1, s5
 8004d7c:	fb86 9601 	smull	r9, r6, r6, r1
 8004d80:	fb09 fa02 	mul.w	sl, r9, r2
 8004d84:	fbca 9603 	smlal	r9, r6, sl, r3
 8004d88:	ee13 1a10 	vmov	r1, s6
 8004d8c:	fb88 9801 	smull	r9, r8, r8, r1
 8004d90:	fb09 fa02 	mul.w	sl, r9, r2
 8004d94:	fbca 9803 	smlal	r9, r8, sl, r3
 8004d98:	ee13 1a90 	vmov	r1, s7
 8004d9c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004da0:	fb09 fa02 	mul.w	sl, r9, r2
 8004da4:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004da8:	ee14 1a10 	vmov	r1, s8
 8004dac:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004db0:	fb09 fa02 	mul.w	sl, r9, r2
 8004db4:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004db8:	4435      	add	r5, r6
 8004dba:	4447      	add	r7, r8
 8004dbc:	445c      	add	r4, fp
 8004dbe:	44f4      	add	ip, lr
 8004dc0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004dc4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8004dc8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8004dcc:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
    	str.w pol1, [ptr_p, #1*distance*strincr]
 8004dd0:	f8c0 6060 	str.w	r6, [r0, #96]	@ 0x60
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8004dd4:	f8c0 70c0 	str.w	r7, [r0, #192]	@ 0xc0
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8004dd8:	f8c0 8120 	str.w	r8, [r0, #288]	@ 0x120
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8004ddc:	f8c0 4180 	str.w	r4, [r0, #384]	@ 0x180
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8004de0:	f8c0 b1e0 	str.w	fp, [r0, #480]	@ 0x1e0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8004de4:	f8c0 c240 	str.w	ip, [r0, #576]	@ 0x240
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8004de8:	f8c0 e2a0 	str.w	lr, [r0, #672]	@ 0x2a0
    	str.w pol0, [ptr_p], #strincr
 8004dec:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 8004df0:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8004df4:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8004df8:	f47f aec6 	bne.w	8004b88 <asm_ntt_3+0x328>

	add.w ptr_p, #168*strincr //next ring index-0 : 24 + 168 = 192
 8004dfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
    vmov temp_l, s9
 8004e00:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8004e04:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8004e08:	f47f aeb4 	bne.w	8004b74 <asm_ntt_3+0x314>

    sub ptr_p, #6144
 8004e0c:	f5a0 50c0 	sub.w	r0, r0, #6144	@ 0x1800

//stage 7 - 9
	.equ distance, 3	//3*8 = 24
	add.w temp_l, ptr_p, #6144
 8004e10:	f500 5ac0 	add.w	sl, r0, #6144	@ 0x1800
  	vmov s9, temp_l
 8004e14:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr
 8004e18:	f100 0a0c 	add.w	sl, r0, #12
    vmov s10, temp_l
 8004e1c:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8004e20:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 8004e24:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 8004e28:	ee00 1a10 	vmov	s0, r1

	  2:
		ldr.w pol0, [ptr_p]
 8004e2c:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004e30:	f8d0 600c 	ldr.w	r6, [r0, #12]
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004e34:	f8d0 7018 	ldr.w	r7, [r0, #24]
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004e38:	f8d0 8024 	ldr.w	r8, [r0, #36]	@ 0x24
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 8004e3c:	f8d0 4030 	ldr.w	r4, [r0, #48]	@ 0x30
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 8004e40:	f8d0 b03c 	ldr.w	fp, [r0, #60]	@ 0x3c
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 8004e44:	f8d0 c048 	ldr.w	ip, [r0, #72]	@ 0x48
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 8004e48:	f8d0 e054 	ldr.w	lr, [r0, #84]	@ 0x54

    	 _3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004e4c:	ee11 1a10 	vmov	r1, s2
 8004e50:	fb84 9401 	smull	r9, r4, r4, r1
 8004e54:	fb09 fa02 	mul.w	sl, r9, r2
 8004e58:	fbca 9403 	smlal	r9, r4, sl, r3
 8004e5c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004e60:	fb09 fa02 	mul.w	sl, r9, r2
 8004e64:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004e68:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004e6c:	fb09 fa02 	mul.w	sl, r9, r2
 8004e70:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004e74:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004e78:	fb09 fa02 	mul.w	sl, r9, r2
 8004e7c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004e80:	4425      	add	r5, r4
 8004e82:	445e      	add	r6, fp
 8004e84:	4467      	add	r7, ip
 8004e86:	44f0      	add	r8, lr
 8004e88:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8004e8c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8004e90:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8004e94:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8004e98:	ee11 1a90 	vmov	r1, s3
 8004e9c:	fb87 9701 	smull	r9, r7, r7, r1
 8004ea0:	fb09 fa02 	mul.w	sl, r9, r2
 8004ea4:	fbca 9703 	smlal	r9, r7, sl, r3
 8004ea8:	fb88 9801 	smull	r9, r8, r8, r1
 8004eac:	fb09 fa02 	mul.w	sl, r9, r2
 8004eb0:	fbca 9803 	smlal	r9, r8, sl, r3
 8004eb4:	ee12 1a10 	vmov	r1, s4
 8004eb8:	fb8c 9c01 	smull	r9, ip, ip, r1
 8004ebc:	fb09 fa02 	mul.w	sl, r9, r2
 8004ec0:	fbca 9c03 	smlal	r9, ip, sl, r3
 8004ec4:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004ec8:	fb09 fa02 	mul.w	sl, r9, r2
 8004ecc:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004ed0:	443d      	add	r5, r7
 8004ed2:	4446      	add	r6, r8
 8004ed4:	4464      	add	r4, ip
 8004ed6:	44f3      	add	fp, lr
 8004ed8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004edc:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8004ee0:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8004ee4:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8004ee8:	ee12 1a90 	vmov	r1, s5
 8004eec:	fb86 9601 	smull	r9, r6, r6, r1
 8004ef0:	fb09 fa02 	mul.w	sl, r9, r2
 8004ef4:	fbca 9603 	smlal	r9, r6, sl, r3
 8004ef8:	ee13 1a10 	vmov	r1, s6
 8004efc:	fb88 9801 	smull	r9, r8, r8, r1
 8004f00:	fb09 fa02 	mul.w	sl, r9, r2
 8004f04:	fbca 9803 	smlal	r9, r8, sl, r3
 8004f08:	ee13 1a90 	vmov	r1, s7
 8004f0c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004f10:	fb09 fa02 	mul.w	sl, r9, r2
 8004f14:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004f18:	ee14 1a10 	vmov	r1, s8
 8004f1c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8004f20:	fb09 fa02 	mul.w	sl, r9, r2
 8004f24:	fbca 9e03 	smlal	r9, lr, sl, r3
 8004f28:	4435      	add	r5, r6
 8004f2a:	4447      	add	r7, r8
 8004f2c:	445c      	add	r4, fp
 8004f2e:	44f4      	add	ip, lr
 8004f30:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8004f34:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8004f38:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8004f3c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1


    	str.w pol1, [ptr_p, #1*distance*strincr]
 8004f40:	f8c0 600c 	str.w	r6, [r0, #12]
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8004f44:	f8c0 7018 	str.w	r7, [r0, #24]
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8004f48:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
    	str.w pol4, [ptr_p, #4*distance*strincr]
 8004f4c:	f8c0 4030 	str.w	r4, [r0, #48]	@ 0x30
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8004f50:	f8c0 b03c 	str.w	fp, [r0, #60]	@ 0x3c
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8004f54:	f8c0 c048 	str.w	ip, [r0, #72]	@ 0x48
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8004f58:	f8c0 e054 	str.w	lr, [r0, #84]	@ 0x54
    	str.w pol0, [ptr_p], #strincr
 8004f5c:	f840 5b04 	str.w	r5, [r0], #4

		vmov temp_l, s10
 8004f60:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8004f64:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8004f68:	f47f af60 	bne.w	8004e2c <asm_ntt_3+0x5cc>

	add.w ptr_p, #21*strincr //next ring index-0 : 3 + 21 = 24
 8004f6c:	f100 0054 	add.w	r0, r0, #84	@ 0x54
    vmov temp_l, s9
 8004f70:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8004f74:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8004f78:	f47f af4e 	bne.w	8004e18 <asm_ntt_3+0x5b8>

    pop.w {r4-r11, pc}
 8004f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f80 <asm_ntt_5>:
// void asm_ntt_5(int32_t * Out, int32_t* zeta);
.global asm_ntt_5
.type asm_ntt_5,%function
.align 2
asm_ntt_5:
    push.w {r4-r11, r14}
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  	zeta2     .req R14
  	pol5     .req R11
  	pol6     .req R12
  	pol7     .req R14

	movw qinv, #:lower16:0xf0803fff
 8004f84:	f643 72ff 	movw	r2, #16383	@ 0x3fff
    movt qinv, #:upper16:0xf0803fff
 8004f88:	f2cf 0280 	movt	r2, #61568	@ 0xf080
    movw q, #0x4001
 8004f8c:	f244 0301 	movw	r3, #16385	@ 0x4001
    movt q, #0x80
 8004f90:	f2c0 0380 	movt	r3, #128	@ 0x80

//stage 1 - 3
	.equ distance, 288 //2304/8
  	.equ strincr, 4

  	vldm ptr_zeta!, {s2-s8}
 8004f94:	ecb1 1a07 	vldmia	r1!, {s2-s8}
  	vmov s0, ptr_zeta
 8004f98:	ee00 1a10 	vmov	s0, r1

  	add.w temp_l, ptr_p, #distance*strincr //8*288 = 1536
 8004f9c:	f500 6a90 	add.w	sl, r0, #1152	@ 0x480
  	vmov s9, temp_l
 8004fa0:	ee04 aa90 	vmov	s9, sl

	add.w temp_l, ptr_p, #4*distance*strincr
 8004fa4:	f500 5a90 	add.w	sl, r0, #4608	@ 0x1200
	vmov s14, temp_l
 8004fa8:	ee07 aa10 	vmov	s14, sl
  1:
    .rept 2
    vmov temp_l, s14
 8004fac:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8004fb0:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 8004fb4:	f8d0 6480 	ldr.w	r6, [r0, #1152]	@ 0x480
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8004fb8:	f8d0 7900 	ldr.w	r7, [r0, #2304]	@ 0x900
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8004fbc:	f8d0 8d80 	ldr.w	r8, [r0, #3456]	@ 0xd80
    ldr.w pol4, [temp_l]
 8004fc0:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 8004fc4:	f8da b480 	ldr.w	fp, [sl, #1152]	@ 0x480
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8004fc8:	f8da c900 	ldr.w	ip, [sl, #2304]	@ 0x900
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8004fcc:	f8da ed80 	ldr.w	lr, [sl, #3456]	@ 0xd80

    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8004fd0:	ee11 1a10 	vmov	r1, s2
 8004fd4:	ee05 4a10 	vmov	s10, r4
 8004fd8:	ee05 ba90 	vmov	s11, fp
 8004fdc:	ee06 ca10 	vmov	s12, ip
 8004fe0:	ee06 ea90 	vmov	s13, lr
 8004fe4:	fb84 9401 	smull	r9, r4, r4, r1
 8004fe8:	fb09 fa02 	mul.w	sl, r9, r2
 8004fec:	fbca 9403 	smlal	r9, r4, sl, r3
 8004ff0:	fb8b 9b01 	smull	r9, fp, fp, r1
 8004ff4:	fb09 fa02 	mul.w	sl, r9, r2
 8004ff8:	fbca 9b03 	smlal	r9, fp, sl, r3
 8004ffc:	fb8c 9c01 	smull	r9, ip, ip, r1
 8005000:	fb09 fa02 	mul.w	sl, r9, r2
 8005004:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005008:	fb8e 9e01 	smull	r9, lr, lr, r1
 800500c:	fb09 fa02 	mul.w	sl, r9, r2
 8005010:	fbca 9e03 	smlal	r9, lr, sl, r3
 8005014:	4425      	add	r5, r4
 8005016:	445e      	add	r6, fp
 8005018:	4467      	add	r7, ip
 800501a:	44f0      	add	r8, lr
 800501c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8005020:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8005024:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8005028:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800502c:	ee15 9a10 	vmov	r9, s10
 8005030:	444c      	add	r4, r9
 8005032:	ee15 9a90 	vmov	r9, s11
 8005036:	44cb      	add	fp, r9
 8005038:	ee16 9a10 	vmov	r9, s12
 800503c:	44cc      	add	ip, r9
 800503e:	ee16 9a90 	vmov	r9, s13
 8005042:	44ce      	add	lr, r9
 8005044:	ee11 1a90 	vmov	r1, s3
 8005048:	fb87 9701 	smull	r9, r7, r7, r1
 800504c:	fb09 fa02 	mul.w	sl, r9, r2
 8005050:	fbca 9703 	smlal	r9, r7, sl, r3
 8005054:	fb88 9801 	smull	r9, r8, r8, r1
 8005058:	fb09 fa02 	mul.w	sl, r9, r2
 800505c:	fbca 9803 	smlal	r9, r8, sl, r3
 8005060:	ee12 1a10 	vmov	r1, s4
 8005064:	fb8c 9c01 	smull	r9, ip, ip, r1
 8005068:	fb09 fa02 	mul.w	sl, r9, r2
 800506c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005070:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005074:	fb09 fa02 	mul.w	sl, r9, r2
 8005078:	fbca 9e03 	smlal	r9, lr, sl, r3
 800507c:	443d      	add	r5, r7
 800507e:	4446      	add	r6, r8
 8005080:	4464      	add	r4, ip
 8005082:	44f3      	add	fp, lr
 8005084:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8005088:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800508c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8005090:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8005094:	ee12 1a90 	vmov	r1, s5
 8005098:	fb86 9601 	smull	r9, r6, r6, r1
 800509c:	fb09 fa02 	mul.w	sl, r9, r2
 80050a0:	fbca 9603 	smlal	r9, r6, sl, r3
 80050a4:	ee13 1a10 	vmov	r1, s6
 80050a8:	fb88 9801 	smull	r9, r8, r8, r1
 80050ac:	fb09 fa02 	mul.w	sl, r9, r2
 80050b0:	fbca 9803 	smlal	r9, r8, sl, r3
 80050b4:	ee13 1a90 	vmov	r1, s7
 80050b8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80050bc:	fb09 fa02 	mul.w	sl, r9, r2
 80050c0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80050c4:	ee14 1a10 	vmov	r1, s8
 80050c8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80050cc:	fb09 fa02 	mul.w	sl, r9, r2
 80050d0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80050d4:	4435      	add	r5, r6
 80050d6:	4447      	add	r7, r8
 80050d8:	445c      	add	r4, fp
 80050da:	44f4      	add	ip, lr
 80050dc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80050e0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80050e4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80050e8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1

	vmov temp_l, s14
 80050ec:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 80050f0:	f8c0 6480 	str.w	r6, [r0, #1152]	@ 0x480
    str.w pol2, [ptr_p, #2*distance*strincr]
 80050f4:	f8c0 7900 	str.w	r7, [r0, #2304]	@ 0x900
    str.w pol3, [ptr_p, #3*distance*strincr]
 80050f8:	f8c0 8d80 	str.w	r8, [r0, #3456]	@ 0xd80
    str.w pol0, [ptr_p], #strincr
 80050fc:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8005100:	f8ca b480 	str.w	fp, [sl, #1152]	@ 0x480
    str.w pol6, [temp_l, #2*distance*strincr]
 8005104:	f8ca c900 	str.w	ip, [sl, #2304]	@ 0x900
    str.w pol7, [temp_l, #3*distance*strincr]
 8005108:	f8ca ed80 	str.w	lr, [sl, #3456]	@ 0xd80
    str.w pol4, [temp_l], #strincr
 800510c:	f84a 4b04 	str.w	r4, [sl], #4

	vmov s14, temp_l
 8005110:	ee07 aa10 	vmov	s14, sl
    vmov temp_l, s14
 8005114:	ee17 aa10 	vmov	sl, s14
    ldr.w pol0, [ptr_p]
 8005118:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #1*distance*strincr]
 800511c:	f8d0 6480 	ldr.w	r6, [r0, #1152]	@ 0x480
    ldr.w pol2, [ptr_p, #2*distance*strincr]
 8005120:	f8d0 7900 	ldr.w	r7, [r0, #2304]	@ 0x900
    ldr.w pol3, [ptr_p, #3*distance*strincr]
 8005124:	f8d0 8d80 	ldr.w	r8, [r0, #3456]	@ 0xd80
    ldr.w pol4, [temp_l]
 8005128:	f8da 4000 	ldr.w	r4, [sl]
    ldr.w pol5, [temp_l, #1*distance*strincr]
 800512c:	f8da b480 	ldr.w	fp, [sl, #1152]	@ 0x480
    ldr.w pol6, [temp_l, #2*distance*strincr]
 8005130:	f8da c900 	ldr.w	ip, [sl, #2304]	@ 0x900
    ldr.w pol7, [temp_l, #3*distance*strincr]
 8005134:	f8da ed80 	ldr.w	lr, [sl, #3456]	@ 0xd80
    _first_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 8005138:	ee11 1a10 	vmov	r1, s2
 800513c:	ee05 4a10 	vmov	s10, r4
 8005140:	ee05 ba90 	vmov	s11, fp
 8005144:	ee06 ca10 	vmov	s12, ip
 8005148:	ee06 ea90 	vmov	s13, lr
 800514c:	fb84 9401 	smull	r9, r4, r4, r1
 8005150:	fb09 fa02 	mul.w	sl, r9, r2
 8005154:	fbca 9403 	smlal	r9, r4, sl, r3
 8005158:	fb8b 9b01 	smull	r9, fp, fp, r1
 800515c:	fb09 fa02 	mul.w	sl, r9, r2
 8005160:	fbca 9b03 	smlal	r9, fp, sl, r3
 8005164:	fb8c 9c01 	smull	r9, ip, ip, r1
 8005168:	fb09 fa02 	mul.w	sl, r9, r2
 800516c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005170:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005174:	fb09 fa02 	mul.w	sl, r9, r2
 8005178:	fbca 9e03 	smlal	r9, lr, sl, r3
 800517c:	4425      	add	r5, r4
 800517e:	445e      	add	r6, fp
 8005180:	4467      	add	r7, ip
 8005182:	44f0      	add	r8, lr
 8005184:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8005188:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800518c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8005190:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8005194:	ee15 9a10 	vmov	r9, s10
 8005198:	444c      	add	r4, r9
 800519a:	ee15 9a90 	vmov	r9, s11
 800519e:	44cb      	add	fp, r9
 80051a0:	ee16 9a10 	vmov	r9, s12
 80051a4:	44cc      	add	ip, r9
 80051a6:	ee16 9a90 	vmov	r9, s13
 80051aa:	44ce      	add	lr, r9
 80051ac:	ee11 1a90 	vmov	r1, s3
 80051b0:	fb87 9701 	smull	r9, r7, r7, r1
 80051b4:	fb09 fa02 	mul.w	sl, r9, r2
 80051b8:	fbca 9703 	smlal	r9, r7, sl, r3
 80051bc:	fb88 9801 	smull	r9, r8, r8, r1
 80051c0:	fb09 fa02 	mul.w	sl, r9, r2
 80051c4:	fbca 9803 	smlal	r9, r8, sl, r3
 80051c8:	ee12 1a10 	vmov	r1, s4
 80051cc:	fb8c 9c01 	smull	r9, ip, ip, r1
 80051d0:	fb09 fa02 	mul.w	sl, r9, r2
 80051d4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80051d8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80051dc:	fb09 fa02 	mul.w	sl, r9, r2
 80051e0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80051e4:	443d      	add	r5, r7
 80051e6:	4446      	add	r6, r8
 80051e8:	4464      	add	r4, ip
 80051ea:	44f3      	add	fp, lr
 80051ec:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80051f0:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80051f4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80051f8:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80051fc:	ee12 1a90 	vmov	r1, s5
 8005200:	fb86 9601 	smull	r9, r6, r6, r1
 8005204:	fb09 fa02 	mul.w	sl, r9, r2
 8005208:	fbca 9603 	smlal	r9, r6, sl, r3
 800520c:	ee13 1a10 	vmov	r1, s6
 8005210:	fb88 9801 	smull	r9, r8, r8, r1
 8005214:	fb09 fa02 	mul.w	sl, r9, r2
 8005218:	fbca 9803 	smlal	r9, r8, sl, r3
 800521c:	ee13 1a90 	vmov	r1, s7
 8005220:	fb8b 9b01 	smull	r9, fp, fp, r1
 8005224:	fb09 fa02 	mul.w	sl, r9, r2
 8005228:	fbca 9b03 	smlal	r9, fp, sl, r3
 800522c:	ee14 1a10 	vmov	r1, s8
 8005230:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005234:	fb09 fa02 	mul.w	sl, r9, r2
 8005238:	fbca 9e03 	smlal	r9, lr, sl, r3
 800523c:	4435      	add	r5, r6
 800523e:	4447      	add	r7, r8
 8005240:	445c      	add	r4, fp
 8005242:	44f4      	add	ip, lr
 8005244:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8005248:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800524c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8005250:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
	vmov temp_l, s14
 8005254:	ee17 aa10 	vmov	sl, s14
    str.w pol1, [ptr_p, #1*distance*strincr]
 8005258:	f8c0 6480 	str.w	r6, [r0, #1152]	@ 0x480
    str.w pol2, [ptr_p, #2*distance*strincr]
 800525c:	f8c0 7900 	str.w	r7, [r0, #2304]	@ 0x900
    str.w pol3, [ptr_p, #3*distance*strincr]
 8005260:	f8c0 8d80 	str.w	r8, [r0, #3456]	@ 0xd80
    str.w pol0, [ptr_p], #strincr
 8005264:	f840 5b04 	str.w	r5, [r0], #4
    str.w pol5, [temp_l, #1*distance*strincr]
 8005268:	f8ca b480 	str.w	fp, [sl, #1152]	@ 0x480
    str.w pol6, [temp_l, #2*distance*strincr]
 800526c:	f8ca c900 	str.w	ip, [sl, #2304]	@ 0x900
    str.w pol7, [temp_l, #3*distance*strincr]
 8005270:	f8ca ed80 	str.w	lr, [sl, #3456]	@ 0xd80
    str.w pol4, [temp_l], #strincr
 8005274:	f84a 4b04 	str.w	r4, [sl], #4
	vmov s14, temp_l
 8005278:	ee07 aa10 	vmov	s14, sl
    .endr

	vmov temp_l, s9
 800527c:	ee14 aa90 	vmov	sl, s9
	cmp.w ptr_p, temp_l
 8005280:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8005284:	f47f ae92 	bne.w	8004fac <asm_ntt_5+0x2c>

    sub ptr_p, #distance*strincr
 8005288:	f5a0 6090 	sub.w	r0, r0, #1152	@ 0x480


//stage 4 - 6
	.equ distance, 36	//288/8 = 36
	add.w temp_l, ptr_p, #9216
 800528c:	f500 5a10 	add.w	sl, r0, #9216	@ 0x2400
  	vmov s9, temp_l
 8005290:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr
 8005294:	f100 0a90 	add.w	sl, r0, #144	@ 0x90
    vmov s10, temp_l
 8005298:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 800529c:	ee10 1a10 	vmov	r1, s0
    vldm ptr_zeta!, {s2-s8}
 80052a0:	ecb1 1a07 	vldmia	r1!, {s2-s8}
    vmov s0, ptr_zeta
 80052a4:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 2
		ldr.w pol0, [ptr_p]
 80052a8:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80052ac:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80052b0:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80052b4:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 80052b8:	f8d0 4240 	ldr.w	r4, [r0, #576]	@ 0x240
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 80052bc:	f8d0 b2d0 	ldr.w	fp, [r0, #720]	@ 0x2d0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 80052c0:	f8d0 c360 	ldr.w	ip, [r0, #864]	@ 0x360
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 80052c4:	f8d0 e3f0 	ldr.w	lr, [r0, #1008]	@ 0x3f0

    	_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80052c8:	ee11 1a10 	vmov	r1, s2
 80052cc:	fb84 9401 	smull	r9, r4, r4, r1
 80052d0:	fb09 fa02 	mul.w	sl, r9, r2
 80052d4:	fbca 9403 	smlal	r9, r4, sl, r3
 80052d8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80052dc:	fb09 fa02 	mul.w	sl, r9, r2
 80052e0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80052e4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80052e8:	fb09 fa02 	mul.w	sl, r9, r2
 80052ec:	fbca 9c03 	smlal	r9, ip, sl, r3
 80052f0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80052f4:	fb09 fa02 	mul.w	sl, r9, r2
 80052f8:	fbca 9e03 	smlal	r9, lr, sl, r3
 80052fc:	4425      	add	r5, r4
 80052fe:	445e      	add	r6, fp
 8005300:	4467      	add	r7, ip
 8005302:	44f0      	add	r8, lr
 8005304:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8005308:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800530c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8005310:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8005314:	ee11 1a90 	vmov	r1, s3
 8005318:	fb87 9701 	smull	r9, r7, r7, r1
 800531c:	fb09 fa02 	mul.w	sl, r9, r2
 8005320:	fbca 9703 	smlal	r9, r7, sl, r3
 8005324:	fb88 9801 	smull	r9, r8, r8, r1
 8005328:	fb09 fa02 	mul.w	sl, r9, r2
 800532c:	fbca 9803 	smlal	r9, r8, sl, r3
 8005330:	ee12 1a10 	vmov	r1, s4
 8005334:	fb8c 9c01 	smull	r9, ip, ip, r1
 8005338:	fb09 fa02 	mul.w	sl, r9, r2
 800533c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005340:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005344:	fb09 fa02 	mul.w	sl, r9, r2
 8005348:	fbca 9e03 	smlal	r9, lr, sl, r3
 800534c:	443d      	add	r5, r7
 800534e:	4446      	add	r6, r8
 8005350:	4464      	add	r4, ip
 8005352:	44f3      	add	fp, lr
 8005354:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8005358:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800535c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8005360:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8005364:	ee12 1a90 	vmov	r1, s5
 8005368:	fb86 9601 	smull	r9, r6, r6, r1
 800536c:	fb09 fa02 	mul.w	sl, r9, r2
 8005370:	fbca 9603 	smlal	r9, r6, sl, r3
 8005374:	ee13 1a10 	vmov	r1, s6
 8005378:	fb88 9801 	smull	r9, r8, r8, r1
 800537c:	fb09 fa02 	mul.w	sl, r9, r2
 8005380:	fbca 9803 	smlal	r9, r8, sl, r3
 8005384:	ee13 1a90 	vmov	r1, s7
 8005388:	fb8b 9b01 	smull	r9, fp, fp, r1
 800538c:	fb09 fa02 	mul.w	sl, r9, r2
 8005390:	fbca 9b03 	smlal	r9, fp, sl, r3
 8005394:	ee14 1a10 	vmov	r1, s8
 8005398:	fb8e 9e01 	smull	r9, lr, lr, r1
 800539c:	fb09 fa02 	mul.w	sl, r9, r2
 80053a0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80053a4:	4435      	add	r5, r6
 80053a6:	4447      	add	r7, r8
 80053a8:	445c      	add	r4, fp
 80053aa:	44f4      	add	ip, lr
 80053ac:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80053b0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80053b4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80053b8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1


    	str.w pol1, [ptr_p, #1*distance*strincr]
 80053bc:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80053c0:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80053c4:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol4, [ptr_p, #4*distance*strincr]
 80053c8:	f8c0 4240 	str.w	r4, [r0, #576]	@ 0x240
    	str.w pol5, [ptr_p, #5*distance*strincr]
 80053cc:	f8c0 b2d0 	str.w	fp, [r0, #720]	@ 0x2d0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 80053d0:	f8c0 c360 	str.w	ip, [r0, #864]	@ 0x360
    	str.w pol7, [ptr_p, #7*distance*strincr]
 80053d4:	f8c0 e3f0 	str.w	lr, [r0, #1008]	@ 0x3f0
    	str.w pol0, [ptr_p], #strincr
 80053d8:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 80053dc:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80053e0:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80053e4:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80053e8:	f8d0 81b0 	ldr.w	r8, [r0, #432]	@ 0x1b0
    	ldr.w pol4, [ptr_p, #4*distance*strincr]
 80053ec:	f8d0 4240 	ldr.w	r4, [r0, #576]	@ 0x240
    	ldr.w pol5, [ptr_p, #5*distance*strincr]
 80053f0:	f8d0 b2d0 	ldr.w	fp, [r0, #720]	@ 0x2d0
    	ldr.w pol6, [ptr_p, #6*distance*strincr]
 80053f4:	f8d0 c360 	ldr.w	ip, [r0, #864]	@ 0x360
    	ldr.w pol7, [ptr_p, #7*distance*strincr]
 80053f8:	f8d0 e3f0 	ldr.w	lr, [r0, #1008]	@ 0x3f0
    	_3_layer_CT_32 pol0, pol1, pol2, pol3, pol4, pol5, pol6, pol7, s2, s3, s4, s5, s6, s7, s8, zeta, qinv, q, temp_h, temp_l
 80053fc:	ee11 1a10 	vmov	r1, s2
 8005400:	fb84 9401 	smull	r9, r4, r4, r1
 8005404:	fb09 fa02 	mul.w	sl, r9, r2
 8005408:	fbca 9403 	smlal	r9, r4, sl, r3
 800540c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8005410:	fb09 fa02 	mul.w	sl, r9, r2
 8005414:	fbca 9b03 	smlal	r9, fp, sl, r3
 8005418:	fb8c 9c01 	smull	r9, ip, ip, r1
 800541c:	fb09 fa02 	mul.w	sl, r9, r2
 8005420:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005424:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005428:	fb09 fa02 	mul.w	sl, r9, r2
 800542c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8005430:	4425      	add	r5, r4
 8005432:	445e      	add	r6, fp
 8005434:	4467      	add	r7, ip
 8005436:	44f0      	add	r8, lr
 8005438:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800543c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8005440:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8005444:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8005448:	ee11 1a90 	vmov	r1, s3
 800544c:	fb87 9701 	smull	r9, r7, r7, r1
 8005450:	fb09 fa02 	mul.w	sl, r9, r2
 8005454:	fbca 9703 	smlal	r9, r7, sl, r3
 8005458:	fb88 9801 	smull	r9, r8, r8, r1
 800545c:	fb09 fa02 	mul.w	sl, r9, r2
 8005460:	fbca 9803 	smlal	r9, r8, sl, r3
 8005464:	ee12 1a10 	vmov	r1, s4
 8005468:	fb8c 9c01 	smull	r9, ip, ip, r1
 800546c:	fb09 fa02 	mul.w	sl, r9, r2
 8005470:	fbca 9c03 	smlal	r9, ip, sl, r3
 8005474:	fb8e 9e01 	smull	r9, lr, lr, r1
 8005478:	fb09 fa02 	mul.w	sl, r9, r2
 800547c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8005480:	443d      	add	r5, r7
 8005482:	4446      	add	r6, r8
 8005484:	4464      	add	r4, ip
 8005486:	44f3      	add	fp, lr
 8005488:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800548c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8005490:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8005494:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8005498:	ee12 1a90 	vmov	r1, s5
 800549c:	fb86 9601 	smull	r9, r6, r6, r1
 80054a0:	fb09 fa02 	mul.w	sl, r9, r2
 80054a4:	fbca 9603 	smlal	r9, r6, sl, r3
 80054a8:	ee13 1a10 	vmov	r1, s6
 80054ac:	fb88 9801 	smull	r9, r8, r8, r1
 80054b0:	fb09 fa02 	mul.w	sl, r9, r2
 80054b4:	fbca 9803 	smlal	r9, r8, sl, r3
 80054b8:	ee13 1a90 	vmov	r1, s7
 80054bc:	fb8b 9b01 	smull	r9, fp, fp, r1
 80054c0:	fb09 fa02 	mul.w	sl, r9, r2
 80054c4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80054c8:	ee14 1a10 	vmov	r1, s8
 80054cc:	fb8e 9e01 	smull	r9, lr, lr, r1
 80054d0:	fb09 fa02 	mul.w	sl, r9, r2
 80054d4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80054d8:	4435      	add	r5, r6
 80054da:	4447      	add	r7, r8
 80054dc:	445c      	add	r4, fp
 80054de:	44f4      	add	ip, lr
 80054e0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80054e4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80054e8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80054ec:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
    	str.w pol1, [ptr_p, #1*distance*strincr]
 80054f0:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80054f4:	f8c0 7120 	str.w	r7, [r0, #288]	@ 0x120
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80054f8:	f8c0 81b0 	str.w	r8, [r0, #432]	@ 0x1b0
    	str.w pol4, [ptr_p, #4*distance*strincr]
 80054fc:	f8c0 4240 	str.w	r4, [r0, #576]	@ 0x240
    	str.w pol5, [ptr_p, #5*distance*strincr]
 8005500:	f8c0 b2d0 	str.w	fp, [r0, #720]	@ 0x2d0
    	str.w pol6, [ptr_p, #6*distance*strincr]
 8005504:	f8c0 c360 	str.w	ip, [r0, #864]	@ 0x360
    	str.w pol7, [ptr_p, #7*distance*strincr]
 8005508:	f8c0 e3f0 	str.w	lr, [r0, #1008]	@ 0x3f0
    	str.w pol0, [ptr_p], #strincr
 800550c:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 8005510:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8005514:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8005518:	f47f aec6 	bne.w	80052a8 <asm_ntt_5+0x328>

	add.w ptr_p, #252*strincr //next ring index-0 : 36 + 252 = 288
 800551c:	f500 707c 	add.w	r0, r0, #1008	@ 0x3f0
    vmov temp_l, s9
 8005520:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 8005524:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 8005528:	f47f aeb4 	bne.w	8005294 <asm_ntt_5+0x314>

    sub ptr_p, #9216
 800552c:	f5a0 5010 	sub.w	r0, r0, #9216	@ 0x2400

//stage 7 - 8

	.equ distance, 9	//36/4 = 9

	add.w temp_l, ptr_p, #9216
 8005530:	f500 5a10 	add.w	sl, r0, #9216	@ 0x2400
  	vmov s9, temp_l
 8005534:	ee04 aa90 	vmov	s9, sl

  1:
	add.w temp_l, ptr_p, #distance*strincr
 8005538:	f100 0a24 	add.w	sl, r0, #36	@ 0x24
    vmov s10, temp_l
 800553c:	ee05 aa10 	vmov	s10, sl
    vmov ptr_zeta, s0
 8005540:	ee10 1a10 	vmov	r1, s0
    ldr.w zeta1, [ptr_zeta, #4]
 8005544:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]
 8005548:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr.w zeta0, [ptr_zeta], #12
 800554c:	f851 bb0c 	ldr.w	fp, [r1], #12
    vmov s0, ptr_zeta
 8005550:	ee00 1a10 	vmov	s0, r1

	  2:
		.rept 3
		ldr.w pol0, [ptr_p]
 8005554:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8005558:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 800555c:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8005560:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c

    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8005564:	fb87 970b 	smull	r9, r7, r7, fp
 8005568:	fb09 fa02 	mul.w	sl, r9, r2
 800556c:	fbca 9703 	smlal	r9, r7, sl, r3
 8005570:	fb88 980b 	smull	r9, r8, r8, fp
 8005574:	fb09 fa02 	mul.w	sl, r9, r2
 8005578:	fbca 9803 	smlal	r9, r8, sl, r3
 800557c:	443d      	add	r5, r7
 800557e:	4446      	add	r6, r8
 8005580:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8005584:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8005588:	fb86 960c 	smull	r9, r6, r6, ip
 800558c:	fb09 fa02 	mul.w	sl, r9, r2
 8005590:	fbca 9603 	smlal	r9, r6, sl, r3
 8005594:	fb88 980e 	smull	r9, r8, r8, lr
 8005598:	fb09 fa02 	mul.w	sl, r9, r2
 800559c:	fbca 9803 	smlal	r9, r8, sl, r3
 80055a0:	4435      	add	r5, r6
 80055a2:	4447      	add	r7, r8
 80055a4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80055a8:	eba7 0848 	sub.w	r8, r7, r8, lsl #1

		str.w pol1, [ptr_p, #1*distance*strincr]
 80055ac:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 80055b0:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 80055b4:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 80055b8:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 80055bc:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 80055c0:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 80055c4:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 80055c8:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 80055cc:	fb87 970b 	smull	r9, r7, r7, fp
 80055d0:	fb09 fa02 	mul.w	sl, r9, r2
 80055d4:	fbca 9703 	smlal	r9, r7, sl, r3
 80055d8:	fb88 980b 	smull	r9, r8, r8, fp
 80055dc:	fb09 fa02 	mul.w	sl, r9, r2
 80055e0:	fbca 9803 	smlal	r9, r8, sl, r3
 80055e4:	443d      	add	r5, r7
 80055e6:	4446      	add	r6, r8
 80055e8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80055ec:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80055f0:	fb86 960c 	smull	r9, r6, r6, ip
 80055f4:	fb09 fa02 	mul.w	sl, r9, r2
 80055f8:	fbca 9603 	smlal	r9, r6, sl, r3
 80055fc:	fb88 980e 	smull	r9, r8, r8, lr
 8005600:	fb09 fa02 	mul.w	sl, r9, r2
 8005604:	fbca 9803 	smlal	r9, r8, sl, r3
 8005608:	4435      	add	r5, r6
 800560a:	4447      	add	r7, r8
 800560c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8005610:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
		str.w pol1, [ptr_p, #1*distance*strincr]
 8005614:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8005618:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 800561c:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8005620:	f840 5b04 	str.w	r5, [r0], #4
		ldr.w pol0, [ptr_p]
 8005624:	f8d0 5000 	ldr.w	r5, [r0]
    	ldr.w pol1, [ptr_p, #1*distance*strincr]
 8005628:	f8d0 6024 	ldr.w	r6, [r0, #36]	@ 0x24
    	ldr.w pol2, [ptr_p, #2*distance*strincr]
 800562c:	f8d0 7048 	ldr.w	r7, [r0, #72]	@ 0x48
    	ldr.w pol3, [ptr_p, #3*distance*strincr]
 8005630:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    	_2_layer_CT_32 pol0, pol1, pol2, pol3, zeta0, zeta1, zeta2, qinv, q, temp_h, temp_l
 8005634:	fb87 970b 	smull	r9, r7, r7, fp
 8005638:	fb09 fa02 	mul.w	sl, r9, r2
 800563c:	fbca 9703 	smlal	r9, r7, sl, r3
 8005640:	fb88 980b 	smull	r9, r8, r8, fp
 8005644:	fb09 fa02 	mul.w	sl, r9, r2
 8005648:	fbca 9803 	smlal	r9, r8, sl, r3
 800564c:	443d      	add	r5, r7
 800564e:	4446      	add	r6, r8
 8005650:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8005654:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8005658:	fb86 960c 	smull	r9, r6, r6, ip
 800565c:	fb09 fa02 	mul.w	sl, r9, r2
 8005660:	fbca 9603 	smlal	r9, r6, sl, r3
 8005664:	fb88 980e 	smull	r9, r8, r8, lr
 8005668:	fb09 fa02 	mul.w	sl, r9, r2
 800566c:	fbca 9803 	smlal	r9, r8, sl, r3
 8005670:	4435      	add	r5, r6
 8005672:	4447      	add	r7, r8
 8005674:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8005678:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
		str.w pol1, [ptr_p, #1*distance*strincr]
 800567c:	f8c0 6024 	str.w	r6, [r0, #36]	@ 0x24
    	str.w pol2, [ptr_p, #2*distance*strincr]
 8005680:	f8c0 7048 	str.w	r7, [r0, #72]	@ 0x48
    	str.w pol3, [ptr_p, #3*distance*strincr]
 8005684:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c
    	str.w pol0, [ptr_p], #strincr
 8005688:	f840 5b04 	str.w	r5, [r0], #4
		.endr

		vmov temp_l, s10
 800568c:	ee15 aa10 	vmov	sl, s10
		cmp.w ptr_p, temp_l
 8005690:	ebb0 0f0a 	cmp.w	r0, sl
    	bne 2b
 8005694:	f47f af5e 	bne.w	8005554 <asm_ntt_5+0x5d4>

	add.w ptr_p, #27*strincr //next ring index-0 : 9 + 27 = 36
 8005698:	f100 006c 	add.w	r0, r0, #108	@ 0x6c
    vmov temp_l, s9
 800569c:	ee14 aa90 	vmov	sl, s9
    cmp.w ptr_p, temp_l
 80056a0:	ebb0 0f0a 	cmp.w	r0, sl
    bne 1b
 80056a4:	f47f af48 	bne.w	8005538 <asm_ntt_5+0x5b8>

    pop.w {r4-r11, pc}
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056ac <asm_ntt_5_radix3>:
//extern void asm_ntt_5_radix3(int32_t * Out, int32_t* zeta);
.global asm_ntt_5_radix3
.type asm_ntt_5_radix3,%function
.align 2
asm_ntt_5_radix3:
    push.w {r4-r11, r14}
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vpush.w {s16-s24}
 80056b0:	ed2d 8a09 	vpush	{s16-s24}
  	zeta0     .req R11
  	zeta1     .req R12
  	wmont     .req R14


    movw qinv, #:lower16:0xf0803fff
 80056b4:	f643 72ff 	movw	r2, #16383	@ 0x3fff
    movt qinv, #:upper16:0xf0803fff
 80056b8:	f2cf 0280 	movt	r2, #61568	@ 0xf080
    movw q, #0x4001
 80056bc:	f244 0301 	movw	r3, #16385	@ 0x4001
    movt q, #0x80
 80056c0:	f2c0 0380 	movt	r3, #128	@ 0x80
    movw wmont, #0xdc5d // 6675549
 80056c4:	f64d 4e5d 	movw	lr, #56413	@ 0xdc5d
    movt wmont, #0x65 // 6675549
 80056c8:	f2c0 0e65 	movt	lr, #101	@ 0x65


	movw cntr, #256
 80056cc:	f240 1400 	movw	r4, #256	@ 0x100

1:
	vldm ptr_p, {s0-s8} //2-8
 80056d0:	ec90 0a09 	vldmia	r0, {s0-s8}
	vldm ptr_zeta!, {s9-s16}
 80056d4:	ecf1 4a08 	vldmia	r1!, {s9-s16}

	_2_layer_CT_32_radix3 pol0, pol1, pol2, pol3, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, zeta0, zeta1, qinv, q, wmont, temp_l, temp_h
 80056d8:	ee14 ba90 	vmov	fp, s9
 80056dc:	ee15 ca10 	vmov	ip, s10
 80056e0:	ee10 6a10 	vmov	r6, s0
 80056e4:	ee11 7a90 	vmov	r7, s3
 80056e8:	ee13 8a10 	vmov	r8, s6
 80056ec:	fb87 a70b 	smull	sl, r7, r7, fp
 80056f0:	fb0a f902 	mul.w	r9, sl, r2
 80056f4:	fbc9 a703 	smlal	sl, r7, r9, r3
 80056f8:	fb88 a80c 	smull	sl, r8, r8, ip
 80056fc:	fb0a f902 	mul.w	r9, sl, r2
 8005700:	fbc9 a803 	smlal	sl, r8, r9, r3
 8005704:	ea4f 0507 	mov.w	r5, r7
 8005708:	eba5 0508 	sub.w	r5, r5, r8
 800570c:	fb85 a50e 	smull	sl, r5, r5, lr
 8005710:	fb0a f902 	mul.w	r9, sl, r2
 8005714:	fbc9 a503 	smlal	sl, r5, r9, r3
 8005718:	ea4f 0a06 	mov.w	sl, r6
 800571c:	ebaa 0a07 	sub.w	sl, sl, r7
 8005720:	ebaa 0a05 	sub.w	sl, sl, r5
 8005724:	ea4f 0906 	mov.w	r9, r6
 8005728:	eba9 0908 	sub.w	r9, r9, r8
 800572c:	44a9      	add	r9, r5
 800572e:	443e      	add	r6, r7
 8005730:	4446      	add	r6, r8
 8005732:	ee00 6a10 	vmov	s0, r6
 8005736:	ee01 9a90 	vmov	s3, r9
 800573a:	ee03 aa10 	vmov	s6, sl
 800573e:	ee10 6a90 	vmov	r6, s1
 8005742:	ee12 7a10 	vmov	r7, s4
 8005746:	ee13 8a90 	vmov	r8, s7
 800574a:	fb87 a70b 	smull	sl, r7, r7, fp
 800574e:	fb0a f902 	mul.w	r9, sl, r2
 8005752:	fbc9 a703 	smlal	sl, r7, r9, r3
 8005756:	fb88 a80c 	smull	sl, r8, r8, ip
 800575a:	fb0a f902 	mul.w	r9, sl, r2
 800575e:	fbc9 a803 	smlal	sl, r8, r9, r3
 8005762:	ea4f 0507 	mov.w	r5, r7
 8005766:	eba5 0508 	sub.w	r5, r5, r8
 800576a:	fb85 a50e 	smull	sl, r5, r5, lr
 800576e:	fb0a f902 	mul.w	r9, sl, r2
 8005772:	fbc9 a503 	smlal	sl, r5, r9, r3
 8005776:	ea4f 0a06 	mov.w	sl, r6
 800577a:	ebaa 0a07 	sub.w	sl, sl, r7
 800577e:	ebaa 0a05 	sub.w	sl, sl, r5
 8005782:	ea4f 0906 	mov.w	r9, r6
 8005786:	eba9 0908 	sub.w	r9, r9, r8
 800578a:	44a9      	add	r9, r5
 800578c:	443e      	add	r6, r7
 800578e:	4446      	add	r6, r8
 8005790:	ee00 6a90 	vmov	s1, r6
 8005794:	ee02 9a10 	vmov	s4, r9
 8005798:	ee03 aa90 	vmov	s7, sl
 800579c:	ee11 6a10 	vmov	r6, s2
 80057a0:	ee12 7a90 	vmov	r7, s5
 80057a4:	ee14 8a10 	vmov	r8, s8
 80057a8:	fb87 a70b 	smull	sl, r7, r7, fp
 80057ac:	fb0a f902 	mul.w	r9, sl, r2
 80057b0:	fbc9 a703 	smlal	sl, r7, r9, r3
 80057b4:	fb88 a80c 	smull	sl, r8, r8, ip
 80057b8:	fb0a f902 	mul.w	r9, sl, r2
 80057bc:	fbc9 a803 	smlal	sl, r8, r9, r3
 80057c0:	ea4f 0507 	mov.w	r5, r7
 80057c4:	eba5 0508 	sub.w	r5, r5, r8
 80057c8:	fb85 a50e 	smull	sl, r5, r5, lr
 80057cc:	fb0a f902 	mul.w	r9, sl, r2
 80057d0:	fbc9 a503 	smlal	sl, r5, r9, r3
 80057d4:	ea4f 0a06 	mov.w	sl, r6
 80057d8:	ebaa 0a07 	sub.w	sl, sl, r7
 80057dc:	ebaa 0a05 	sub.w	sl, sl, r5
 80057e0:	ea4f 0906 	mov.w	r9, r6
 80057e4:	eba9 0908 	sub.w	r9, r9, r8
 80057e8:	44a9      	add	r9, r5
 80057ea:	443e      	add	r6, r7
 80057ec:	4446      	add	r6, r8
 80057ee:	ee01 6a10 	vmov	s2, r6
 80057f2:	ee02 9a90 	vmov	s5, r9
 80057f6:	ee04 aa10 	vmov	s8, sl
 80057fa:	ee15 ba90 	vmov	fp, s11
 80057fe:	ee16 ca10 	vmov	ip, s12
 8005802:	ee10 6a10 	vmov	r6, s0
 8005806:	ee10 7a90 	vmov	r7, s1
 800580a:	ee11 8a10 	vmov	r8, s2
 800580e:	fb87 a70b 	smull	sl, r7, r7, fp
 8005812:	fb0a f902 	mul.w	r9, sl, r2
 8005816:	fbc9 a703 	smlal	sl, r7, r9, r3
 800581a:	fb88 a80c 	smull	sl, r8, r8, ip
 800581e:	fb0a f902 	mul.w	r9, sl, r2
 8005822:	fbc9 a803 	smlal	sl, r8, r9, r3
 8005826:	ea4f 0507 	mov.w	r5, r7
 800582a:	eba5 0508 	sub.w	r5, r5, r8
 800582e:	fb85 a50e 	smull	sl, r5, r5, lr
 8005832:	fb0a f902 	mul.w	r9, sl, r2
 8005836:	fbc9 a503 	smlal	sl, r5, r9, r3
 800583a:	ea4f 0a06 	mov.w	sl, r6
 800583e:	ebaa 0a07 	sub.w	sl, sl, r7
 8005842:	ebaa 0a05 	sub.w	sl, sl, r5
 8005846:	ea4f 0906 	mov.w	r9, r6
 800584a:	eba9 0908 	sub.w	r9, r9, r8
 800584e:	44a9      	add	r9, r5
 8005850:	443e      	add	r6, r7
 8005852:	4446      	add	r6, r8
 8005854:	ee00 6a10 	vmov	s0, r6
 8005858:	ee00 9a90 	vmov	s1, r9
 800585c:	ee01 aa10 	vmov	s2, sl
 8005860:	ee16 ba90 	vmov	fp, s13
 8005864:	ee17 ca10 	vmov	ip, s14
 8005868:	ee11 6a90 	vmov	r6, s3
 800586c:	ee12 7a10 	vmov	r7, s4
 8005870:	ee12 8a90 	vmov	r8, s5
 8005874:	fb87 a70b 	smull	sl, r7, r7, fp
 8005878:	fb0a f902 	mul.w	r9, sl, r2
 800587c:	fbc9 a703 	smlal	sl, r7, r9, r3
 8005880:	fb88 a80c 	smull	sl, r8, r8, ip
 8005884:	fb0a f902 	mul.w	r9, sl, r2
 8005888:	fbc9 a803 	smlal	sl, r8, r9, r3
 800588c:	ea4f 0507 	mov.w	r5, r7
 8005890:	eba5 0508 	sub.w	r5, r5, r8
 8005894:	fb85 a50e 	smull	sl, r5, r5, lr
 8005898:	fb0a f902 	mul.w	r9, sl, r2
 800589c:	fbc9 a503 	smlal	sl, r5, r9, r3
 80058a0:	ea4f 0a06 	mov.w	sl, r6
 80058a4:	ebaa 0a07 	sub.w	sl, sl, r7
 80058a8:	ebaa 0a05 	sub.w	sl, sl, r5
 80058ac:	ea4f 0906 	mov.w	r9, r6
 80058b0:	eba9 0908 	sub.w	r9, r9, r8
 80058b4:	44a9      	add	r9, r5
 80058b6:	443e      	add	r6, r7
 80058b8:	4446      	add	r6, r8
 80058ba:	ee01 6a90 	vmov	s3, r6
 80058be:	ee02 9a10 	vmov	s4, r9
 80058c2:	ee02 aa90 	vmov	s5, sl
 80058c6:	ee17 ba90 	vmov	fp, s15
 80058ca:	ee18 ca10 	vmov	ip, s16
 80058ce:	ee13 6a10 	vmov	r6, s6
 80058d2:	ee13 7a90 	vmov	r7, s7
 80058d6:	ee14 8a10 	vmov	r8, s8
 80058da:	fb87 a70b 	smull	sl, r7, r7, fp
 80058de:	fb0a f902 	mul.w	r9, sl, r2
 80058e2:	fbc9 a703 	smlal	sl, r7, r9, r3
 80058e6:	fb88 a80c 	smull	sl, r8, r8, ip
 80058ea:	fb0a f902 	mul.w	r9, sl, r2
 80058ee:	fbc9 a803 	smlal	sl, r8, r9, r3
 80058f2:	ea4f 0507 	mov.w	r5, r7
 80058f6:	eba5 0508 	sub.w	r5, r5, r8
 80058fa:	fb85 a50e 	smull	sl, r5, r5, lr
 80058fe:	fb0a f902 	mul.w	r9, sl, r2
 8005902:	fbc9 a503 	smlal	sl, r5, r9, r3
 8005906:	ea4f 0a06 	mov.w	sl, r6
 800590a:	ebaa 0a07 	sub.w	sl, sl, r7
 800590e:	ebaa 0a05 	sub.w	sl, sl, r5
 8005912:	ea4f 0906 	mov.w	r9, r6
 8005916:	eba9 0908 	sub.w	r9, r9, r8
 800591a:	44a9      	add	r9, r5
 800591c:	443e      	add	r6, r7
 800591e:	4446      	add	r6, r8
 8005920:	ee03 6a10 	vmov	s6, r6
 8005924:	ee03 9a90 	vmov	s7, r9
 8005928:	ee04 aa10 	vmov	s8, sl

	vmov.w pol0, s1
 800592c:	ee10 5a90 	vmov	r5, s1
	vmov.w pol1, s2
 8005930:	ee11 6a10 	vmov	r6, s2
	vmov.w pol2, s3
 8005934:	ee11 7a90 	vmov	r7, s3
    str.w pol0, [ptr_p, #4]
 8005938:	f8c0 5004 	str.w	r5, [r0, #4]
    str.w pol1, [ptr_p, #8]
 800593c:	f8c0 6008 	str.w	r6, [r0, #8]
    str.w pol2, [ptr_p, #12]
 8005940:	f8c0 700c 	str.w	r7, [r0, #12]

    vmov.w pol0, s4
 8005944:	ee12 5a10 	vmov	r5, s4
	vmov.w pol1, s5
 8005948:	ee12 6a90 	vmov	r6, s5
	vmov.w pol2, s6
 800594c:	ee13 7a10 	vmov	r7, s6
    str.w pol0, [ptr_p, #16]
 8005950:	f8c0 5010 	str.w	r5, [r0, #16]
    str.w pol1, [ptr_p, #20]
 8005954:	f8c0 6014 	str.w	r6, [r0, #20]
    str.w pol2, [ptr_p, #24]
 8005958:	f8c0 7018 	str.w	r7, [r0, #24]

    vmov.w pol0, s7
 800595c:	ee13 5a90 	vmov	r5, s7
	vmov.w pol1, s8
 8005960:	ee14 6a10 	vmov	r6, s8
	vmov.w pol2, s0
 8005964:	ee10 7a10 	vmov	r7, s0
    str.w pol0, [ptr_p, #28]
 8005968:	f8c0 501c 	str.w	r5, [r0, #28]
    str.w pol1, [ptr_p, #32]
 800596c:	f8c0 6020 	str.w	r6, [r0, #32]
    str.w pol2, [ptr_p], #36
 8005970:	f840 7b24 	str.w	r7, [r0], #36

	subs cntr, #1
 8005974:	3c01      	subs	r4, #1
    bne.w 1b
 8005976:	f47f aeab 	bne.w	80056d0 <asm_ntt_5_radix3+0x24>

	vpop.w {s16-s24}
 800597a:	ecbd 8a09 	vpop	{s16-s24}
    pop.w {r4-r11, pc}
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	bf00      	nop
	...

08005990 <memchr>:
 8005990:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005994:	2a10      	cmp	r2, #16
 8005996:	db2b      	blt.n	80059f0 <memchr+0x60>
 8005998:	f010 0f07 	tst.w	r0, #7
 800599c:	d008      	beq.n	80059b0 <memchr+0x20>
 800599e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059a2:	3a01      	subs	r2, #1
 80059a4:	428b      	cmp	r3, r1
 80059a6:	d02d      	beq.n	8005a04 <memchr+0x74>
 80059a8:	f010 0f07 	tst.w	r0, #7
 80059ac:	b342      	cbz	r2, 8005a00 <memchr+0x70>
 80059ae:	d1f6      	bne.n	800599e <memchr+0xe>
 80059b0:	b4f0      	push	{r4, r5, r6, r7}
 80059b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80059b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80059ba:	f022 0407 	bic.w	r4, r2, #7
 80059be:	f07f 0700 	mvns.w	r7, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80059c8:	3c08      	subs	r4, #8
 80059ca:	ea85 0501 	eor.w	r5, r5, r1
 80059ce:	ea86 0601 	eor.w	r6, r6, r1
 80059d2:	fa85 f547 	uadd8	r5, r5, r7
 80059d6:	faa3 f587 	sel	r5, r3, r7
 80059da:	fa86 f647 	uadd8	r6, r6, r7
 80059de:	faa5 f687 	sel	r6, r5, r7
 80059e2:	b98e      	cbnz	r6, 8005a08 <memchr+0x78>
 80059e4:	d1ee      	bne.n	80059c4 <memchr+0x34>
 80059e6:	bcf0      	pop	{r4, r5, r6, r7}
 80059e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80059ec:	f002 0207 	and.w	r2, r2, #7
 80059f0:	b132      	cbz	r2, 8005a00 <memchr+0x70>
 80059f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059f6:	3a01      	subs	r2, #1
 80059f8:	ea83 0301 	eor.w	r3, r3, r1
 80059fc:	b113      	cbz	r3, 8005a04 <memchr+0x74>
 80059fe:	d1f8      	bne.n	80059f2 <memchr+0x62>
 8005a00:	2000      	movs	r0, #0
 8005a02:	4770      	bx	lr
 8005a04:	3801      	subs	r0, #1
 8005a06:	4770      	bx	lr
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	bf06      	itte	eq
 8005a0c:	4635      	moveq	r5, r6
 8005a0e:	3803      	subeq	r0, #3
 8005a10:	3807      	subne	r0, #7
 8005a12:	f015 0f01 	tst.w	r5, #1
 8005a16:	d107      	bne.n	8005a28 <memchr+0x98>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005a1e:	bf02      	ittt	eq
 8005a20:	3001      	addeq	r0, #1
 8005a22:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005a26:	3001      	addeq	r0, #1
 8005a28:	bcf0      	pop	{r4, r5, r6, r7}
 8005a2a:	3801      	subs	r0, #1
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop

08005a30 <__aeabi_uldivmod>:
 8005a30:	b953      	cbnz	r3, 8005a48 <__aeabi_uldivmod+0x18>
 8005a32:	b94a      	cbnz	r2, 8005a48 <__aeabi_uldivmod+0x18>
 8005a34:	2900      	cmp	r1, #0
 8005a36:	bf08      	it	eq
 8005a38:	2800      	cmpeq	r0, #0
 8005a3a:	bf1c      	itt	ne
 8005a3c:	f04f 31ff 	movne.w	r1, #4294967295
 8005a40:	f04f 30ff 	movne.w	r0, #4294967295
 8005a44:	f000 b96a 	b.w	8005d1c <__aeabi_idiv0>
 8005a48:	f1ad 0c08 	sub.w	ip, sp, #8
 8005a4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005a50:	f000 f806 	bl	8005a60 <__udivmoddi4>
 8005a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a5c:	b004      	add	sp, #16
 8005a5e:	4770      	bx	lr

08005a60 <__udivmoddi4>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	9d08      	ldr	r5, [sp, #32]
 8005a66:	460c      	mov	r4, r1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d14e      	bne.n	8005b0a <__udivmoddi4+0xaa>
 8005a6c:	4694      	mov	ip, r2
 8005a6e:	458c      	cmp	ip, r1
 8005a70:	4686      	mov	lr, r0
 8005a72:	fab2 f282 	clz	r2, r2
 8005a76:	d962      	bls.n	8005b3e <__udivmoddi4+0xde>
 8005a78:	b14a      	cbz	r2, 8005a8e <__udivmoddi4+0x2e>
 8005a7a:	f1c2 0320 	rsb	r3, r2, #32
 8005a7e:	4091      	lsls	r1, r2
 8005a80:	fa20 f303 	lsr.w	r3, r0, r3
 8005a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8005a88:	4319      	orrs	r1, r3
 8005a8a:	fa00 fe02 	lsl.w	lr, r0, r2
 8005a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005a92:	fa1f f68c 	uxth.w	r6, ip
 8005a96:	fbb1 f4f7 	udiv	r4, r1, r7
 8005a9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005a9e:	fb07 1114 	mls	r1, r7, r4, r1
 8005aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005aa6:	fb04 f106 	mul.w	r1, r4, r6
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	d90a      	bls.n	8005ac4 <__udivmoddi4+0x64>
 8005aae:	eb1c 0303 	adds.w	r3, ip, r3
 8005ab2:	f104 30ff 	add.w	r0, r4, #4294967295
 8005ab6:	f080 8112 	bcs.w	8005cde <__udivmoddi4+0x27e>
 8005aba:	4299      	cmp	r1, r3
 8005abc:	f240 810f 	bls.w	8005cde <__udivmoddi4+0x27e>
 8005ac0:	3c02      	subs	r4, #2
 8005ac2:	4463      	add	r3, ip
 8005ac4:	1a59      	subs	r1, r3, r1
 8005ac6:	fa1f f38e 	uxth.w	r3, lr
 8005aca:	fbb1 f0f7 	udiv	r0, r1, r7
 8005ace:	fb07 1110 	mls	r1, r7, r0, r1
 8005ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ad6:	fb00 f606 	mul.w	r6, r0, r6
 8005ada:	429e      	cmp	r6, r3
 8005adc:	d90a      	bls.n	8005af4 <__udivmoddi4+0x94>
 8005ade:	eb1c 0303 	adds.w	r3, ip, r3
 8005ae2:	f100 31ff 	add.w	r1, r0, #4294967295
 8005ae6:	f080 80fc 	bcs.w	8005ce2 <__udivmoddi4+0x282>
 8005aea:	429e      	cmp	r6, r3
 8005aec:	f240 80f9 	bls.w	8005ce2 <__udivmoddi4+0x282>
 8005af0:	4463      	add	r3, ip
 8005af2:	3802      	subs	r0, #2
 8005af4:	1b9b      	subs	r3, r3, r6
 8005af6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8005afa:	2100      	movs	r1, #0
 8005afc:	b11d      	cbz	r5, 8005b06 <__udivmoddi4+0xa6>
 8005afe:	40d3      	lsrs	r3, r2
 8005b00:	2200      	movs	r2, #0
 8005b02:	e9c5 3200 	strd	r3, r2, [r5]
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	428b      	cmp	r3, r1
 8005b0c:	d905      	bls.n	8005b1a <__udivmoddi4+0xba>
 8005b0e:	b10d      	cbz	r5, 8005b14 <__udivmoddi4+0xb4>
 8005b10:	e9c5 0100 	strd	r0, r1, [r5]
 8005b14:	2100      	movs	r1, #0
 8005b16:	4608      	mov	r0, r1
 8005b18:	e7f5      	b.n	8005b06 <__udivmoddi4+0xa6>
 8005b1a:	fab3 f183 	clz	r1, r3
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d146      	bne.n	8005bb0 <__udivmoddi4+0x150>
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	d302      	bcc.n	8005b2c <__udivmoddi4+0xcc>
 8005b26:	4290      	cmp	r0, r2
 8005b28:	f0c0 80f0 	bcc.w	8005d0c <__udivmoddi4+0x2ac>
 8005b2c:	1a86      	subs	r6, r0, r2
 8005b2e:	eb64 0303 	sbc.w	r3, r4, r3
 8005b32:	2001      	movs	r0, #1
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	d0e6      	beq.n	8005b06 <__udivmoddi4+0xa6>
 8005b38:	e9c5 6300 	strd	r6, r3, [r5]
 8005b3c:	e7e3      	b.n	8005b06 <__udivmoddi4+0xa6>
 8005b3e:	2a00      	cmp	r2, #0
 8005b40:	f040 8090 	bne.w	8005c64 <__udivmoddi4+0x204>
 8005b44:	eba1 040c 	sub.w	r4, r1, ip
 8005b48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8005b4c:	fa1f f78c 	uxth.w	r7, ip
 8005b50:	2101      	movs	r1, #1
 8005b52:	fbb4 f6f8 	udiv	r6, r4, r8
 8005b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005b5a:	fb08 4416 	mls	r4, r8, r6, r4
 8005b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b62:	fb07 f006 	mul.w	r0, r7, r6
 8005b66:	4298      	cmp	r0, r3
 8005b68:	d908      	bls.n	8005b7c <__udivmoddi4+0x11c>
 8005b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8005b6e:	f106 34ff 	add.w	r4, r6, #4294967295
 8005b72:	d202      	bcs.n	8005b7a <__udivmoddi4+0x11a>
 8005b74:	4298      	cmp	r0, r3
 8005b76:	f200 80cd 	bhi.w	8005d14 <__udivmoddi4+0x2b4>
 8005b7a:	4626      	mov	r6, r4
 8005b7c:	1a1c      	subs	r4, r3, r0
 8005b7e:	fa1f f38e 	uxth.w	r3, lr
 8005b82:	fbb4 f0f8 	udiv	r0, r4, r8
 8005b86:	fb08 4410 	mls	r4, r8, r0, r4
 8005b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b8e:	fb00 f707 	mul.w	r7, r0, r7
 8005b92:	429f      	cmp	r7, r3
 8005b94:	d908      	bls.n	8005ba8 <__udivmoddi4+0x148>
 8005b96:	eb1c 0303 	adds.w	r3, ip, r3
 8005b9a:	f100 34ff 	add.w	r4, r0, #4294967295
 8005b9e:	d202      	bcs.n	8005ba6 <__udivmoddi4+0x146>
 8005ba0:	429f      	cmp	r7, r3
 8005ba2:	f200 80b0 	bhi.w	8005d06 <__udivmoddi4+0x2a6>
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	1bdb      	subs	r3, r3, r7
 8005baa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005bae:	e7a5      	b.n	8005afc <__udivmoddi4+0x9c>
 8005bb0:	f1c1 0620 	rsb	r6, r1, #32
 8005bb4:	408b      	lsls	r3, r1
 8005bb6:	fa22 f706 	lsr.w	r7, r2, r6
 8005bba:	431f      	orrs	r7, r3
 8005bbc:	fa20 fc06 	lsr.w	ip, r0, r6
 8005bc0:	fa04 f301 	lsl.w	r3, r4, r1
 8005bc4:	ea43 030c 	orr.w	r3, r3, ip
 8005bc8:	40f4      	lsrs	r4, r6
 8005bca:	fa00 f801 	lsl.w	r8, r0, r1
 8005bce:	0c38      	lsrs	r0, r7, #16
 8005bd0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8005bd4:	fbb4 fef0 	udiv	lr, r4, r0
 8005bd8:	fa1f fc87 	uxth.w	ip, r7
 8005bdc:	fb00 441e 	mls	r4, r0, lr, r4
 8005be0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005be4:	fb0e f90c 	mul.w	r9, lr, ip
 8005be8:	45a1      	cmp	r9, r4
 8005bea:	fa02 f201 	lsl.w	r2, r2, r1
 8005bee:	d90a      	bls.n	8005c06 <__udivmoddi4+0x1a6>
 8005bf0:	193c      	adds	r4, r7, r4
 8005bf2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8005bf6:	f080 8084 	bcs.w	8005d02 <__udivmoddi4+0x2a2>
 8005bfa:	45a1      	cmp	r9, r4
 8005bfc:	f240 8081 	bls.w	8005d02 <__udivmoddi4+0x2a2>
 8005c00:	f1ae 0e02 	sub.w	lr, lr, #2
 8005c04:	443c      	add	r4, r7
 8005c06:	eba4 0409 	sub.w	r4, r4, r9
 8005c0a:	fa1f f983 	uxth.w	r9, r3
 8005c0e:	fbb4 f3f0 	udiv	r3, r4, r0
 8005c12:	fb00 4413 	mls	r4, r0, r3, r4
 8005c16:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005c1a:	fb03 fc0c 	mul.w	ip, r3, ip
 8005c1e:	45a4      	cmp	ip, r4
 8005c20:	d907      	bls.n	8005c32 <__udivmoddi4+0x1d2>
 8005c22:	193c      	adds	r4, r7, r4
 8005c24:	f103 30ff 	add.w	r0, r3, #4294967295
 8005c28:	d267      	bcs.n	8005cfa <__udivmoddi4+0x29a>
 8005c2a:	45a4      	cmp	ip, r4
 8005c2c:	d965      	bls.n	8005cfa <__udivmoddi4+0x29a>
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	443c      	add	r4, r7
 8005c32:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8005c36:	fba0 9302 	umull	r9, r3, r0, r2
 8005c3a:	eba4 040c 	sub.w	r4, r4, ip
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	46ce      	mov	lr, r9
 8005c42:	469c      	mov	ip, r3
 8005c44:	d351      	bcc.n	8005cea <__udivmoddi4+0x28a>
 8005c46:	d04e      	beq.n	8005ce6 <__udivmoddi4+0x286>
 8005c48:	b155      	cbz	r5, 8005c60 <__udivmoddi4+0x200>
 8005c4a:	ebb8 030e 	subs.w	r3, r8, lr
 8005c4e:	eb64 040c 	sbc.w	r4, r4, ip
 8005c52:	fa04 f606 	lsl.w	r6, r4, r6
 8005c56:	40cb      	lsrs	r3, r1
 8005c58:	431e      	orrs	r6, r3
 8005c5a:	40cc      	lsrs	r4, r1
 8005c5c:	e9c5 6400 	strd	r6, r4, [r5]
 8005c60:	2100      	movs	r1, #0
 8005c62:	e750      	b.n	8005b06 <__udivmoddi4+0xa6>
 8005c64:	f1c2 0320 	rsb	r3, r2, #32
 8005c68:	fa20 f103 	lsr.w	r1, r0, r3
 8005c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005c70:	fa24 f303 	lsr.w	r3, r4, r3
 8005c74:	4094      	lsls	r4, r2
 8005c76:	430c      	orrs	r4, r1
 8005c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8005c7c:	fa00 fe02 	lsl.w	lr, r0, r2
 8005c80:	fa1f f78c 	uxth.w	r7, ip
 8005c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8005c88:	fb08 3110 	mls	r1, r8, r0, r3
 8005c8c:	0c23      	lsrs	r3, r4, #16
 8005c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c92:	fb00 f107 	mul.w	r1, r0, r7
 8005c96:	4299      	cmp	r1, r3
 8005c98:	d908      	bls.n	8005cac <__udivmoddi4+0x24c>
 8005c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8005c9e:	f100 36ff 	add.w	r6, r0, #4294967295
 8005ca2:	d22c      	bcs.n	8005cfe <__udivmoddi4+0x29e>
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d92a      	bls.n	8005cfe <__udivmoddi4+0x29e>
 8005ca8:	3802      	subs	r0, #2
 8005caa:	4463      	add	r3, ip
 8005cac:	1a5b      	subs	r3, r3, r1
 8005cae:	b2a4      	uxth	r4, r4
 8005cb0:	fbb3 f1f8 	udiv	r1, r3, r8
 8005cb4:	fb08 3311 	mls	r3, r8, r1, r3
 8005cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005cbc:	fb01 f307 	mul.w	r3, r1, r7
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d908      	bls.n	8005cd6 <__udivmoddi4+0x276>
 8005cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8005cc8:	f101 36ff 	add.w	r6, r1, #4294967295
 8005ccc:	d213      	bcs.n	8005cf6 <__udivmoddi4+0x296>
 8005cce:	42a3      	cmp	r3, r4
 8005cd0:	d911      	bls.n	8005cf6 <__udivmoddi4+0x296>
 8005cd2:	3902      	subs	r1, #2
 8005cd4:	4464      	add	r4, ip
 8005cd6:	1ae4      	subs	r4, r4, r3
 8005cd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cdc:	e739      	b.n	8005b52 <__udivmoddi4+0xf2>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	e6f0      	b.n	8005ac4 <__udivmoddi4+0x64>
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	e706      	b.n	8005af4 <__udivmoddi4+0x94>
 8005ce6:	45c8      	cmp	r8, r9
 8005ce8:	d2ae      	bcs.n	8005c48 <__udivmoddi4+0x1e8>
 8005cea:	ebb9 0e02 	subs.w	lr, r9, r2
 8005cee:	eb63 0c07 	sbc.w	ip, r3, r7
 8005cf2:	3801      	subs	r0, #1
 8005cf4:	e7a8      	b.n	8005c48 <__udivmoddi4+0x1e8>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	e7ed      	b.n	8005cd6 <__udivmoddi4+0x276>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	e799      	b.n	8005c32 <__udivmoddi4+0x1d2>
 8005cfe:	4630      	mov	r0, r6
 8005d00:	e7d4      	b.n	8005cac <__udivmoddi4+0x24c>
 8005d02:	46d6      	mov	lr, sl
 8005d04:	e77f      	b.n	8005c06 <__udivmoddi4+0x1a6>
 8005d06:	4463      	add	r3, ip
 8005d08:	3802      	subs	r0, #2
 8005d0a:	e74d      	b.n	8005ba8 <__udivmoddi4+0x148>
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	4623      	mov	r3, r4
 8005d10:	4608      	mov	r0, r1
 8005d12:	e70f      	b.n	8005b34 <__udivmoddi4+0xd4>
 8005d14:	3e02      	subs	r6, #2
 8005d16:	4463      	add	r3, ip
 8005d18:	e730      	b.n	8005b7c <__udivmoddi4+0x11c>
 8005d1a:	bf00      	nop

08005d1c <__aeabi_idiv0>:
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8005d20:	b500      	push	{lr}
 8005d22:	b083      	sub	sp, #12
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 100);
 8005d24:	2364      	movs	r3, #100	@ 0x64
{
 8005d26:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 100);
 8005d28:	2201      	movs	r2, #1
 8005d2a:	a901      	add	r1, sp, #4
 8005d2c:	4803      	ldr	r0, [pc, #12]	@ (8005d3c <__io_putchar+0x1c>)
 8005d2e:	f003 fd5d 	bl	80097ec <HAL_UART_Transmit>
	return ch;
}
 8005d32:	9801      	ldr	r0, [sp, #4]
 8005d34:	b003      	add	sp, #12
 8005d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d3a:	bf00      	nop
 8005d3c:	20004e28 	.word	0x20004e28

08005d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d40:	b510      	push	{r4, lr}
 8005d42:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d44:	2244      	movs	r2, #68	@ 0x44
 8005d46:	2100      	movs	r1, #0
 8005d48:	a806      	add	r0, sp, #24
 8005d4a:	f004 fe91 	bl	800aa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d4e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005d50:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d54:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005d58:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005d5c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005d5e:	f002 fc97 	bl	8008690 <HAL_PWREx_ControlVoltageScaling>
 8005d62:	b108      	cbz	r0, 8005d68 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d64:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d66:	e7fe      	b.n	8005d66 <SystemClock_Config+0x26>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8005d68:	2122      	movs	r1, #34	@ 0x22
 8005d6a:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d70:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d72:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d74:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005d76:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d78:	910a      	str	r1, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d7a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 10;
 8005d7c:	210a      	movs	r1, #10
 8005d7e:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005d82:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005d86:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005d8a:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005d8c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d8e:	f002 fd9d 	bl	80088cc <HAL_RCC_OscConfig>
 8005d92:	4601      	mov	r1, r0
 8005d94:	b108      	cbz	r0, 8005d9a <SystemClock_Config+0x5a>
 8005d96:	b672      	cpsid	i
  while (1)
 8005d98:	e7fe      	b.n	8005d98 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d9a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d9c:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d9e:	e9cd 4301 	strd	r4, r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8005da2:	2290      	movs	r2, #144	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005da8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005daa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dae:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005db0:	f003 f898 	bl	8008ee4 <HAL_RCC_ClockConfig>
 8005db4:	b108      	cbz	r0, 8005dba <SystemClock_Config+0x7a>
 8005db6:	b672      	cpsid	i
  while (1)
 8005db8:	e7fe      	b.n	8005db8 <SystemClock_Config+0x78>
}
 8005dba:	b018      	add	sp, #96	@ 0x60
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop

08005dc0 <main>:
{
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	f5ad 5d69 	sub.w	sp, sp, #14912	@ 0x3a40
 8005dc8:	b085      	sub	sp, #20
	uint8_t m[32] = { 0x00, };
 8005dca:	aa0c      	add	r2, sp, #48	@ 0x30
 8005dcc:	2600      	movs	r6, #0
 8005dce:	6016      	str	r6, [r2, #0]
 8005dd0:	ab0d      	add	r3, sp, #52	@ 0x34
 8005dd2:	e9c3 6600 	strd	r6, r6, [r3]
 8005dd6:	e9c3 6602 	strd	r6, r6, [r3, #8]
 8005dda:	e9c3 6604 	strd	r6, r6, [r3, #16]
    *DWT_LAR = 0xC5ACCE55; // unlock (CM7)
 8005dde:	4db3      	ldr	r5, [pc, #716]	@ (80060ac <main+0x2ec>)
	uint8_t m[32] = { 0x00, };
 8005de0:	619e      	str	r6, [r3, #24]
	size_t siglen = 0;
 8005de2:	9605      	str	r6, [sp, #20]
    *DWT_LAR = 0xC5ACCE55; // unlock (CM7)
 8005de4:	4bb2      	ldr	r3, [pc, #712]	@ (80060b0 <main+0x2f0>)
 8005de6:	f8c5 3fb0 	str.w	r3, [r5, #4016]	@ 0xfb0
	size_t siglen = 0;
 8005dea:	aa05      	add	r2, sp, #20
    *SCB_DEMCR |= 0x01000000;
 8005dec:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f50d 540a 	add.w	r4, sp, #8832	@ 0x2280
    *SCB_DEMCR |= 0x01000000;
 8005df4:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005df8:	4fae      	ldr	r7, [pc, #696]	@ (80060b4 <main+0x2f4>)
    *SCB_DEMCR |= 0x01000000;
 8005dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dfe:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    *DWT_CYCCNT = 0; // reset the counter
 8005e02:	606e      	str	r6, [r5, #4]
    *DWT_CONTROL |= 1 ; // enable the counter
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	f043 0301 	orr.w	r3, r3, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0a:	3410      	adds	r4, #16
    *DWT_CONTROL |= 1 ; // enable the counter
 8005e0c:	602b      	str	r3, [r5, #0]
  HAL_Init();
 8005e0e:	f002 f9c3 	bl	8008198 <HAL_Init>
  SystemClock_Config();
 8005e12:	f7ff ff95 	bl	8005d40 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e16:	e9c4 6600 	strd	r6, r6, [r4]
 8005e1a:	e9c4 6602 	strd	r6, r6, [r4, #8]
 8005e1e:	6126      	str	r6, [r4, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e2a:	aa06      	add	r2, sp, #24
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3e:	aa07      	add	r2, sp, #28
 8005e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e52:	aa08      	add	r2, sp, #32
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e5e:	f043 0308 	orr.w	r3, r3, #8
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e66:	aa09      	add	r2, sp, #36	@ 0x24
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7a:	aa0a      	add	r2, sp, #40	@ 0x28
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	6813      	ldr	r3, [r2, #0]
  HAL_PWREx_EnableVddIO2();
 8005e84:	f002 fc7e 	bl	8008784 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005e8a:	488b      	ldr	r0, [pc, #556]	@ (80060b8 <main+0x2f8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  hlpuart1.Instance = LPUART1;
 8005e94:	4f89      	ldr	r7, [pc, #548]	@ (80060bc <main+0x2fc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e96:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005ea0:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	f002 fb37 	bl	8008518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005eaa:	4885      	ldr	r0, [pc, #532]	@ (80060c0 <main+0x300>)
 8005eac:	4632      	mov	r2, r6
 8005eae:	2140      	movs	r1, #64	@ 0x40
 8005eb0:	f002 fb32 	bl	8008518 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8005eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005eb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005ebc:	4881      	ldr	r0, [pc, #516]	@ (80060c4 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebe:	60a6      	str	r6, [r4, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005ec0:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = B1_Pin;
 8005ec2:	e9c4 2300 	strd	r2, r3, [r4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ec6:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005eca:	f002 fa01 	bl	80082d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005ece:	f44f 4981 	mov.w	r9, #16512	@ 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed2:	4879      	ldr	r0, [pc, #484]	@ (80060b8 <main+0x2f8>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005ed4:	f8c4 9000 	str.w	r9, [r4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed8:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eda:	e9c4 6602 	strd	r6, r6, [r4, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ede:	f8c4 8004 	str.w	r8, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee2:	f002 f9f5 	bl	80082d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	2300      	movs	r3, #0
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005eea:	4875      	ldr	r0, [pc, #468]	@ (80060c0 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eec:	60a6      	str	r6, [r4, #8]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005eee:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005ef0:	e9c4 2300 	strd	r2, r3, [r4]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005ef4:	f002 f9ec 	bl	80082d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005ef8:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005efa:	4871      	ldr	r0, [pc, #452]	@ (80060c0 <main+0x300>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005efc:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005efe:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f00:	e9c4 8601 	strd	r8, r6, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f04:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005f06:	f002 f9e3 	bl	80082d0 <HAL_GPIO_Init>
  hlpuart1.Instance = LPUART1;
 8005f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80060c8 <main+0x308>)
 8005f0c:	603b      	str	r3, [r7, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005f0e:	f44f 3be1 	mov.w	fp, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f12:	f04f 0a0c 	mov.w	sl, #12
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f1a:	4638      	mov	r0, r7
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f1c:	e9c7 b601 	strd	fp, r6, [r7, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005f20:	e9c7 6603 	strd	r6, r6, [r7, #12]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f24:	e9c7 a605 	strd	sl, r6, [r7, #20]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f28:	e9c7 2308 	strd	r2, r3, [r7, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f2c:	62be      	str	r6, [r7, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005f2e:	667e      	str	r6, [r7, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f30:	f004 f878 	bl	800a024 <HAL_UART_Init>
 8005f34:	b108      	cbz	r0, 8005f3a <main+0x17a>
 8005f36:	b672      	cpsid	i
  while (1)
 8005f38:	e7fe      	b.n	8005f38 <main+0x178>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f004 f8c3 	bl	800a0c8 <HAL_UARTEx_SetTxFifoThreshold>
 8005f42:	b108      	cbz	r0, 8005f48 <main+0x188>
 8005f44:	b672      	cpsid	i
  while (1)
 8005f46:	e7fe      	b.n	8005f46 <main+0x186>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f48:	4601      	mov	r1, r0
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f004 f8fe 	bl	800a14c <HAL_UARTEx_SetRxFifoThreshold>
 8005f50:	b108      	cbz	r0, 8005f56 <main+0x196>
 8005f52:	b672      	cpsid	i
  while (1)
 8005f54:	e7fe      	b.n	8005f54 <main+0x194>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005f56:	4638      	mov	r0, r7
 8005f58:	f004 f898 	bl	800a08c <HAL_UARTEx_DisableFifoMode>
 8005f5c:	b108      	cbz	r0, 8005f62 <main+0x1a2>
 8005f5e:	b672      	cpsid	i
  while (1)
 8005f60:	e7fe      	b.n	8005f60 <main+0x1a0>
  huart3.Instance = USART3;
 8005f62:	4e5a      	ldr	r6, [pc, #360]	@ (80060cc <main+0x30c>)
 8005f64:	4b5a      	ldr	r3, [pc, #360]	@ (80060d0 <main+0x310>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f66:	6130      	str	r0, [r6, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f68:	e9c6 0002 	strd	r0, r0, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f6c:	e9c6 0006 	strd	r0, r0, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f70:	e9c6 0008 	strd	r0, r0, [r6, #32]
 8005f74:	62b0      	str	r0, [r6, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f76:	4630      	mov	r0, r6
  huart3.Init.BaudRate = 115200;
 8005f78:	f8c6 b004 	str.w	fp, [r6, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f7c:	f8c6 a014 	str.w	sl, [r6, #20]
  huart3.Instance = USART3;
 8005f80:	6033      	str	r3, [r6, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f82:	f004 f84f 	bl	800a024 <HAL_UART_Init>
 8005f86:	4601      	mov	r1, r0
 8005f88:	b108      	cbz	r0, 8005f8e <main+0x1ce>
 8005f8a:	b672      	cpsid	i
  while (1)
 8005f8c:	e7fe      	b.n	8005f8c <main+0x1cc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f004 f89a 	bl	800a0c8 <HAL_UARTEx_SetTxFifoThreshold>
 8005f94:	4601      	mov	r1, r0
 8005f96:	b108      	cbz	r0, 8005f9c <main+0x1dc>
 8005f98:	b672      	cpsid	i
  while (1)
 8005f9a:	e7fe      	b.n	8005f9a <main+0x1da>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f004 f8d5 	bl	800a14c <HAL_UARTEx_SetRxFifoThreshold>
 8005fa2:	b108      	cbz	r0, 8005fa8 <main+0x1e8>
 8005fa4:	b672      	cpsid	i
  while (1)
 8005fa6:	e7fe      	b.n	8005fa6 <main+0x1e6>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f004 f86f 	bl	800a08c <HAL_UARTEx_DisableFifoMode>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b108      	cbz	r0, 8005fb6 <main+0x1f6>
 8005fb2:	b672      	cpsid	i
  while (1)
 8005fb4:	e7fe      	b.n	8005fb4 <main+0x1f4>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005fb6:	4847      	ldr	r0, [pc, #284]	@ (80060d4 <main+0x314>)
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005fb8:	e9c0 8307 	strd	r8, r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005fbc:	6243      	str	r3, [r0, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005fbe:	6303      	str	r3, [r0, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005fc4:	6183      	str	r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005fc6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005fca:	2306      	movs	r3, #6
 8005fcc:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005fd8:	f002 faa4 	bl	8008524 <HAL_PCD_Init>
 8005fdc:	4606      	mov	r6, r0
 8005fde:	b108      	cbz	r0, 8005fe4 <main+0x224>
 8005fe0:	b672      	cpsid	i
  while (1)
 8005fe2:	e7fe      	b.n	8005fe2 <main+0x222>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_SET);
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4833      	ldr	r0, [pc, #204]	@ (80060b8 <main+0x2f8>)
 8005fea:	f002 fa95 	bl	8008518 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005fee:	2064      	movs	r0, #100	@ 0x64
 8005ff0:	f002 f8f4 	bl	80081dc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	482f      	ldr	r0, [pc, #188]	@ (80060b8 <main+0x2f8>)
 8005ffa:	f002 fa8d 	bl	8008518 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005ffe:	2064      	movs	r0, #100	@ 0x64
 8006000:	f002 f8ec 	bl	80081dc <HAL_Delay>
  printf("[hello ncc5]\r\n");
 8006004:	4834      	ldr	r0, [pc, #208]	@ (80060d8 <main+0x318>)
 8006006:	f004 fc53 	bl	800a8b0 <puts>
    int before, after, consumed_keygen = 0, consumed_sign = 0, consumed_verify = 0;
 800600a:	4637      	mov	r7, r6
 800600c:	46b0      	mov	r8, r6
 800600e:	46b3      	mov	fp, r6
 8006010:	f50d 6a4d 	add.w	sl, sp, #3280	@ 0xcd0
 8006014:	f10d 0950 	add.w	r9, sp, #80	@ 0x50
	  printf("(%d, ", i);
 8006018:	4631      	mov	r1, r6
 800601a:	4830      	ldr	r0, [pc, #192]	@ (80060dc <main+0x31c>)
 800601c:	f004 fbe0 	bl	800a7e0 <iprintf>
	  before = *DWT_CYCCNT;
 8006020:	686a      	ldr	r2, [r5, #4]
 8006022:	9203      	str	r2, [sp, #12]
	  crypto_sign_keypair(pk, sk);
 8006024:	4651      	mov	r1, sl
 8006026:	4648      	mov	r0, r9
 8006028:	f001 fd5c 	bl	8007ae4 <crypto_sign_keypair>
	  after = *DWT_CYCCNT;
 800602c:	686b      	ldr	r3, [r5, #4]
	  consumed_keygen += (after - before - 2);
 800602e:	9a03      	ldr	r2, [sp, #12]
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	3b02      	subs	r3, #2
 8006034:	449b      	add	fp, r3
	  before = *DWT_CYCCNT;
 8006036:	686b      	ldr	r3, [r5, #4]
 8006038:	9303      	str	r3, [sp, #12]
	  ret = crypto_sign_signature(sig, &siglen, m, mlen, sk);
 800603a:	aa0c      	add	r2, sp, #48	@ 0x30
 800603c:	2320      	movs	r3, #32
 800603e:	a905      	add	r1, sp, #20
 8006040:	f8cd a000 	str.w	sl, [sp]
 8006044:	4620      	mov	r0, r4
 8006046:	f001 fdc7 	bl	8007bd8 <crypto_sign_signature>
	  consumed_sign += (after - before - 2);
 800604a:	9a03      	ldr	r2, [sp, #12]
	  after = *DWT_CYCCNT;
 800604c:	686b      	ldr	r3, [r5, #4]
	  consumed_sign += (after - before - 2);
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	3b02      	subs	r3, #2
	  ret = crypto_sign_signature(sig, &siglen, m, mlen, sk);
 8006052:	4601      	mov	r1, r0
	  printf(",%d", ret);
 8006054:	4822      	ldr	r0, [pc, #136]	@ (80060e0 <main+0x320>)
	  consumed_sign += (after - before - 2);
 8006056:	4498      	add	r8, r3
	  printf(",%d", ret);
 8006058:	f004 fbc2 	bl	800a7e0 <iprintf>
	  ret = crypto_sign_verify(sig, siglen, m, mlen, pk);
 800605c:	ab05      	add	r3, sp, #20
 800605e:	6819      	ldr	r1, [r3, #0]
	  before = *DWT_CYCCNT;
 8006060:	686b      	ldr	r3, [r5, #4]
 8006062:	9303      	str	r3, [sp, #12]
	  ret = crypto_sign_verify(sig, siglen, m, mlen, pk);
 8006064:	aa0c      	add	r2, sp, #48	@ 0x30
 8006066:	2320      	movs	r3, #32
 8006068:	f8cd 9000 	str.w	r9, [sp]
 800606c:	4620      	mov	r0, r4
 800606e:	f001 ff2f 	bl	8007ed0 <crypto_sign_verify>
	  after = *DWT_CYCCNT;
 8006072:	686b      	ldr	r3, [r5, #4]
	  consumed_verify += (after - before - 2);
 8006074:	9a03      	ldr	r2, [sp, #12]
 8006076:	1a9b      	subs	r3, r3, r2
	  ret = crypto_sign_verify(sig, siglen, m, mlen, pk);
 8006078:	4601      	mov	r1, r0
	  consumed_verify += (after - before - 2);
 800607a:	3b02      	subs	r3, #2
	  printf(", %d)\r\n", ret);
 800607c:	4819      	ldr	r0, [pc, #100]	@ (80060e4 <main+0x324>)
  for(int i=0;i<_TIMES_; i++){
 800607e:	3601      	adds	r6, #1
	  consumed_verify += (after - before - 2);
 8006080:	441f      	add	r7, r3
	  printf(", %d)\r\n", ret);
 8006082:	f004 fbad 	bl	800a7e0 <iprintf>
  for(int i=0;i<_TIMES_; i++){
 8006086:	2e64      	cmp	r6, #100	@ 0x64
 8006088:	d1c6      	bne.n	8006018 <main+0x258>
  printf("keygen cc : %d\r\n", consumed_keygen/_TIMES_);
 800608a:	fb9b f1f6 	sdiv	r1, fp, r6
 800608e:	4816      	ldr	r0, [pc, #88]	@ (80060e8 <main+0x328>)
 8006090:	f004 fba6 	bl	800a7e0 <iprintf>
  printf("sign cc : %d\r\n", consumed_sign/_TIMES_);
 8006094:	fb98 f1f6 	sdiv	r1, r8, r6
 8006098:	4814      	ldr	r0, [pc, #80]	@ (80060ec <main+0x32c>)
 800609a:	f004 fba1 	bl	800a7e0 <iprintf>
  printf("verify cc : %d\r\n", consumed_verify/_TIMES_);
 800609e:	fb97 f1f6 	sdiv	r1, r7, r6
 80060a2:	4813      	ldr	r0, [pc, #76]	@ (80060f0 <main+0x330>)
 80060a4:	f004 fb9c 	bl	800a7e0 <iprintf>
  while (1)
 80060a8:	e7fe      	b.n	80060a8 <main+0x2e8>
 80060aa:	bf00      	nop
 80060ac:	e0001000 	.word	0xe0001000
 80060b0:	c5acce55 	.word	0xc5acce55
 80060b4:	40021000 	.word	0x40021000
 80060b8:	48000400 	.word	0x48000400
 80060bc:	20004e28 	.word	0x20004e28
 80060c0:	48001800 	.word	0x48001800
 80060c4:	48000800 	.word	0x48000800
 80060c8:	40008000 	.word	0x40008000
 80060cc:	20004d90 	.word	0x20004d90
 80060d0:	40004800 	.word	0x40004800
 80060d4:	20004880 	.word	0x20004880
 80060d8:	0800b450 	.word	0x0800b450
 80060dc:	0800b460 	.word	0x0800b460
 80060e0:	0800b468 	.word	0x0800b468
 80060e4:	0800b46c 	.word	0x0800b46c
 80060e8:	0800b474 	.word	0x0800b474
 80060ec:	0800b488 	.word	0x0800b488
 80060f0:	0800b498 	.word	0x0800b498

080060f4 <Error_Handler>:
 80060f4:	b672      	cpsid	i
  while (1)
 80060f6:	e7fe      	b.n	80060f6 <Error_Handler+0x2>

080060f8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006124 <HAL_MspInit+0x2c>)
 80060fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	661a      	str	r2, [r3, #96]	@ 0x60
 8006102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8006104:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006106:	f002 0201 	and.w	r2, r2, #1
 800610a:	9200      	str	r2, [sp, #0]
 800610c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006110:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006114:	659a      	str	r2, [r3, #88]	@ 0x58
 8006116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006120:	b002      	add	sp, #8
 8006122:	4770      	bx	lr
 8006124:	40021000 	.word	0x40021000

08006128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006128:	b510      	push	{r4, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	b0ae      	sub	sp, #184	@ 0xb8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800612e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006130:	2294      	movs	r2, #148	@ 0x94
 8006132:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006134:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006138:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800613c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800613e:	f004 fc97 	bl	800aa70 <memset>
  if(huart->Instance==LPUART1)
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	4a38      	ldr	r2, [pc, #224]	@ (8006228 <HAL_UART_MspInit+0x100>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800614a:	4a38      	ldr	r2, [pc, #224]	@ (800622c <HAL_UART_MspInit+0x104>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02d      	beq.n	80061ac <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006150:	b02e      	add	sp, #184	@ 0xb8
 8006152:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006154:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006156:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006158:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800615a:	f003 f8f7 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800615e:	2800      	cmp	r0, #0
 8006160:	d14d      	bne.n	80061fe <HAL_UART_MspInit+0xd6>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006162:	4b33      	ldr	r3, [pc, #204]	@ (8006230 <HAL_UART_MspInit+0x108>)
 8006164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800616c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800616e:	f002 0201 	and.w	r2, r2, #1
 8006172:	9200      	str	r2, [sp, #0]
 8006174:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800617c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800617e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8006188:	f002 fafc 	bl	8008784 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800618c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006210 <HAL_UART_MspInit+0xe8>
 8006190:	2200      	movs	r2, #0
 8006192:	2303      	movs	r3, #3
 8006194:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006198:	4826      	ldr	r0, [pc, #152]	@ (8006234 <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800619a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800619c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800619e:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80061a2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061a4:	f002 f894 	bl	80082d0 <HAL_GPIO_Init>
}
 80061a8:	b02e      	add	sp, #184	@ 0xb8
 80061aa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80061ac:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061ae:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80061b0:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061b2:	f003 f8cb 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 80061b6:	bb28      	cbnz	r0, 8006204 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80061b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006230 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061ba:	481f      	ldr	r0, [pc, #124]	@ (8006238 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80061bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80061be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80061c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80061c6:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80061ca:	9202      	str	r2, [sp, #8]
 80061cc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80061d0:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8006218 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d4:	f042 0208 	orr.w	r2, r2, #8
 80061d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80061da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80061dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8006220 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061ea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061ec:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80061ee:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f2:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061f4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061f6:	f002 f86b 	bl	80082d0 <HAL_GPIO_Init>
}
 80061fa:	b02e      	add	sp, #184	@ 0xb8
 80061fc:	bd10      	pop	{r4, pc}
      Error_Handler();
 80061fe:	f7ff ff79 	bl	80060f4 <Error_Handler>
 8006202:	e7ae      	b.n	8006162 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8006204:	f7ff ff76 	bl	80060f4 <Error_Handler>
 8006208:	e7d6      	b.n	80061b8 <HAL_UART_MspInit+0x90>
 800620a:	bf00      	nop
 800620c:	f3af 8000 	nop.w
 8006210:	00000180 	.word	0x00000180
 8006214:	00000002 	.word	0x00000002
 8006218:	00000300 	.word	0x00000300
 800621c:	00000002 	.word	0x00000002
 8006220:	00000000 	.word	0x00000000
 8006224:	00000003 	.word	0x00000003
 8006228:	40008000 	.word	0x40008000
 800622c:	40004800 	.word	0x40004800
 8006230:	40021000 	.word	0x40021000
 8006234:	48001800 	.word	0x48001800
 8006238:	48000c00 	.word	0x48000c00

0800623c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800623c:	b530      	push	{r4, r5, lr}
 800623e:	4604      	mov	r4, r0
 8006240:	b0af      	sub	sp, #188	@ 0xbc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006242:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006244:	2294      	movs	r2, #148	@ 0x94
 8006246:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006248:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800624c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8006250:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006252:	f004 fc0d 	bl	800aa70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800625c:	d001      	beq.n	8006262 <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800625e:	b02f      	add	sp, #188	@ 0xbc
 8006260:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006266:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006268:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800626a:	f003 f86f 	bl	800934c <HAL_RCCEx_PeriphCLKConfig>
 800626e:	2800      	cmp	r0, #0
 8006270:	d143      	bne.n	80062fa <HAL_PCD_MspInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006272:	4c23      	ldr	r4, [pc, #140]	@ (8006300 <HAL_PCD_MspInit+0xc4>)
 8006274:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800627c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006284:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006288:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800628a:	2302      	movs	r3, #2
 800628c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800628e:	2003      	movs	r0, #3
 8006290:	230a      	movs	r3, #10
 8006292:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006296:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006298:	a904      	add	r1, sp, #16
 800629a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800629e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a2:	f002 f815 	bl	80082d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80062b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80062b8:	f002 f80a 	bl	80082d0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80062be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062c2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80062c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80062c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062d0:	00dd      	lsls	r5, r3, #3
 80062d2:	d40f      	bmi.n	80062f4 <HAL_PCD_MspInit+0xb8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80062dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 80062e6:	f002 fa45 	bl	8008774 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80062f2:	e7b4      	b.n	800625e <HAL_PCD_MspInit+0x22>
      HAL_PWREx_EnableVddUSB();
 80062f4:	f002 fa3e 	bl	8008774 <HAL_PWREx_EnableVddUSB>
}
 80062f8:	e7b1      	b.n	800625e <HAL_PCD_MspInit+0x22>
      Error_Handler();
 80062fa:	f7ff fefb 	bl	80060f4 <Error_Handler>
 80062fe:	e7b8      	b.n	8006272 <HAL_PCD_MspInit+0x36>
 8006300:	40021000 	.word	0x40021000

08006304 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006304:	e7fe      	b.n	8006304 <NMI_Handler>
 8006306:	bf00      	nop

08006308 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006308:	e7fe      	b.n	8006308 <HardFault_Handler>
 800630a:	bf00      	nop

0800630c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800630c:	e7fe      	b.n	800630c <MemManage_Handler>
 800630e:	bf00      	nop

08006310 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006310:	e7fe      	b.n	8006310 <BusFault_Handler>
 8006312:	bf00      	nop

08006314 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006314:	e7fe      	b.n	8006314 <UsageFault_Handler>
 8006316:	bf00      	nop

08006318 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop

08006320 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop

08006324 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006324:	f001 bf48 	b.w	80081b8 <HAL_IncTick>

08006328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006328:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800632a:	1e16      	subs	r6, r2, #0
 800632c:	dd07      	ble.n	800633e <_read+0x16>
 800632e:	460c      	mov	r4, r1
 8006330:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8006332:	f3af 8000 	nop.w
 8006336:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800633a:	42a5      	cmp	r5, r4
 800633c:	d1f9      	bne.n	8006332 <_read+0xa>
  }

  return len;
}
 800633e:	4630      	mov	r0, r6
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	bf00      	nop

08006344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006344:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006346:	1e16      	subs	r6, r2, #0
 8006348:	dd07      	ble.n	800635a <_write+0x16>
 800634a:	460c      	mov	r4, r1
 800634c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800634e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006352:	f7ff fce5 	bl	8005d20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006356:	42ac      	cmp	r4, r5
 8006358:	d1f9      	bne.n	800634e <_write+0xa>
  }
  return len;
}
 800635a:	4630      	mov	r0, r6
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	bf00      	nop

08006360 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006368:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800636c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800636e:	2000      	movs	r0, #0
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006374:	2001      	movs	r0, #1
 8006376:	4770      	bx	lr

08006378 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006378:	2000      	movs	r0, #0
 800637a:	4770      	bx	lr

0800637c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800637c:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800637e:	4a0d      	ldr	r2, [pc, #52]	@ (80063b4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8006380:	680b      	ldr	r3, [r1, #0]
{
 8006382:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006384:	4c0c      	ldr	r4, [pc, #48]	@ (80063b8 <_sbrk+0x3c>)
 8006386:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006388:	b12b      	cbz	r3, 8006396 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800638a:	4418      	add	r0, r3
 800638c:	4290      	cmp	r0, r2
 800638e:	d807      	bhi.n	80063a0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006390:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8006392:	4618      	mov	r0, r3
 8006394:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <_sbrk+0x40>)
 8006398:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800639a:	4418      	add	r0, r3
 800639c:	4290      	cmp	r0, r2
 800639e:	d9f7      	bls.n	8006390 <_sbrk+0x14>
    errno = ENOMEM;
 80063a0:	f004 fbc4 	bl	800ab2c <__errno>
 80063a4:	230c      	movs	r3, #12
 80063a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	20004ebc 	.word	0x20004ebc
 80063b4:	200a0000 	.word	0x200a0000
 80063b8:	00000400 	.word	0x00000400
 80063bc:	20005088 	.word	0x20005088

080063c0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80063c0:	4a03      	ldr	r2, [pc, #12]	@ (80063d0 <SystemInit+0x10>)
 80063c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80063ce:	4770      	bx	lr
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <shake128_inc_init>:
        outlen -= len;
        s_inc[25] = r - len;
    }
}

void shake128_inc_init(shake128incctx *state) {
 80063d4:	b510      	push	{r4, lr}
        s_inc[i] = 0;
 80063d6:	22c8      	movs	r2, #200	@ 0xc8
 80063d8:	2100      	movs	r1, #0
void shake128_inc_init(shake128incctx *state) {
 80063da:	4604      	mov	r4, r0
        s_inc[i] = 0;
 80063dc:	f004 fb48 	bl	800aa70 <memset>
    s_inc[25] = 0;
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_init(state->ctx);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	bf00      	nop

080063ec <shake128_inc_absorb>:

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 80063ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80063f0:	4615      	mov	r5, r2
 80063f2:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 80063f4:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 80063f8:	1953      	adds	r3, r2, r5
 80063fa:	f140 0000 	adc.w	r0, r0, #0
 80063fe:	2ba8      	cmp	r3, #168	@ 0xa8
 8006400:	f170 0000 	sbcs.w	r0, r0, #0
void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8006404:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 8006406:	d31f      	bcc.n	8006448 <shake128_inc_absorb+0x5c>
        s_inc[25] = 0;
 8006408:	f04f 0800 	mov.w	r8, #0
 800640c:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8006410:	f1c2 03a8 	rsb	r3, r2, #168	@ 0xa8
 8006414:	4631      	mov	r1, r6
 8006416:	4620      	mov	r0, r4
 8006418:	f7fb fd72 	bl	8001f00 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 800641c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 8006420:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 8006422:	f1a3 02a8 	sub.w	r2, r3, #168	@ 0xa8
        s_inc[25] = 0;
 8006426:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 800642a:	f1c3 03a8 	rsb	r3, r3, #168	@ 0xa8
        mlen -= (size_t)(r - s_inc[25]);
 800642e:	4415      	add	r5, r2
        m += r - s_inc[25];
 8006430:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 8006432:	f7fc f8e5 	bl	8002600 <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8006436:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 800643a:	1953      	adds	r3, r2, r5
 800643c:	f140 0000 	adc.w	r0, r0, #0
 8006440:	2ba8      	cmp	r3, #168	@ 0xa8
 8006442:	f170 0000 	sbcs.w	r0, r0, #0
 8006446:	d2e3      	bcs.n	8006410 <shake128_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8006448:	462b      	mov	r3, r5
 800644a:	4631      	mov	r1, r6
 800644c:	4620      	mov	r0, r4
 800644e:	f7fb fd57 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8006452:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 8006456:	195b      	adds	r3, r3, r5
 8006458:	f142 0200 	adc.w	r2, r2, #0
 800645c:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8006460:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08006464 <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
 8006464:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 8006466:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake128_inc_finalize(shake128incctx *state) {
 800646a:	b082      	sub	sp, #8
 800646c:	231f      	movs	r3, #31
 800646e:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 8006472:	f1a2 03a7 	sub.w	r3, r2, #167	@ 0xa7
 8006476:	430b      	orrs	r3, r1
void shake128_inc_finalize(shake128incctx *state) {
 8006478:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 800647a:	d014      	beq.n	80064a6 <shake128_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 800647c:	2301      	movs	r3, #1
 800647e:	f10d 0107 	add.w	r1, sp, #7
 8006482:	f7fb fd3d 	bl	8001f00 <KeccakF1600_StateXORBytes>
      p = 128;
 8006486:	2080      	movs	r0, #128	@ 0x80
 8006488:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 800648c:	2301      	movs	r3, #1
 800648e:	22a7      	movs	r2, #167	@ 0xa7
 8006490:	f10d 0107 	add.w	r1, sp, #7
 8006494:	4620      	mov	r0, r4
 8006496:	f7fb fd33 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80064a2:	b002      	add	sp, #8
 80064a4:	bd10      	pop	{r4, pc}
      p |= 128;
 80064a6:	219f      	movs	r1, #159	@ 0x9f
 80064a8:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80064ac:	2301      	movs	r3, #1
 80064ae:	22a7      	movs	r2, #167	@ 0xa7
 80064b0:	f10d 0107 	add.w	r1, sp, #7
 80064b4:	f7fb fd24 	bl	8001f00 <KeccakF1600_StateXORBytes>
 80064b8:	e7ef      	b.n	800649a <shake128_inc_finalize+0x36>
 80064ba:	bf00      	nop

080064bc <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 80064c0:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80064c4:	460c      	mov	r4, r1
    if(outlen < s_inc[25])
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	42b4      	cmp	r4, r6
 80064cc:	eb78 0309 	sbcs.w	r3, r8, r9
void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80064d0:	4615      	mov	r5, r2
 80064d2:	4601      	mov	r1, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80064d4:	f1c6 02a8 	rsb	r2, r6, #168	@ 0xa8
    if(outlen < s_inc[25])
 80064d8:	d20c      	bcs.n	80064f4 <shake128_inc_squeeze+0x38>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80064da:	4623      	mov	r3, r4
 80064dc:	4628      	mov	r0, r5
 80064de:	f7fb fe8f 	bl	8002200 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 80064e2:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 80064e6:	1b1b      	subs	r3, r3, r4
 80064e8:	f162 0200 	sbc.w	r2, r2, #0
 80064ec:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80064f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80064f4:	4633      	mov	r3, r6
    h += len;
 80064f6:	1987      	adds	r7, r0, r6
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7fb fe81 	bl	8002200 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 80064fe:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 8006502:	1b9b      	subs	r3, r3, r6
 8006504:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 8006508:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 800650c:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 8006510:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 8006512:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 8006516:	d0eb      	beq.n	80064f0 <shake128_inc_squeeze+0x34>
        KeccakF1600_StatePermute(s_inc);
 8006518:	2ea8      	cmp	r6, #168	@ 0xa8
 800651a:	4634      	mov	r4, r6
 800651c:	4628      	mov	r0, r5
 800651e:	bf28      	it	cs
 8006520:	24a8      	movcs	r4, #168	@ 0xa8
 8006522:	f7fc f86d 	bl	8002600 <KeccakF1600_StatePermute>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8006526:	4639      	mov	r1, r7
 8006528:	4623      	mov	r3, r4
 800652a:	2200      	movs	r2, #0
 800652c:	4628      	mov	r0, r5
 800652e:	f7fb fe67 	bl	8002200 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8006532:	f1c4 03a8 	rsb	r3, r4, #168	@ 0xa8
    while (outlen > 0) {
 8006536:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 8006538:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 800653c:	4427      	add	r7, r4
    while (outlen > 0) {
 800653e:	d1eb      	bne.n	8006518 <shake128_inc_squeeze+0x5c>
}
 8006540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006544 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    (void) state;
}

void shake256_inc_init(shake256incctx *state) {
 8006544:	b510      	push	{r4, lr}
 8006546:	22c8      	movs	r2, #200	@ 0xc8
 8006548:	2100      	movs	r1, #0
 800654a:	4604      	mov	r4, r0
 800654c:	f004 fa90 	bl	800aa70 <memset>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop

0800655c <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 800655c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006560:	4615      	mov	r5, r2
 8006562:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 8006564:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 8006568:	1953      	adds	r3, r2, r5
 800656a:	f140 0000 	adc.w	r0, r0, #0
 800656e:	2b88      	cmp	r3, #136	@ 0x88
 8006570:	f170 0000 	sbcs.w	r0, r0, #0
void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8006574:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 8006576:	d31f      	bcc.n	80065b8 <shake256_inc_absorb+0x5c>
        s_inc[25] = 0;
 8006578:	f04f 0800 	mov.w	r8, #0
 800657c:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8006580:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 8006584:	4631      	mov	r1, r6
 8006586:	4620      	mov	r0, r4
 8006588:	f7fb fcba 	bl	8001f00 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 800658c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 8006590:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 8006592:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        s_inc[25] = 0;
 8006596:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 800659a:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 800659e:	4415      	add	r5, r2
        m += r - s_inc[25];
 80065a0:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 80065a2:	f7fc f82d 	bl	8002600 <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 80065a6:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 80065aa:	1953      	adds	r3, r2, r5
 80065ac:	f140 0000 	adc.w	r0, r0, #0
 80065b0:	2b88      	cmp	r3, #136	@ 0x88
 80065b2:	f170 0000 	sbcs.w	r0, r0, #0
 80065b6:	d2e3      	bcs.n	8006580 <shake256_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 80065b8:	462b      	mov	r3, r5
 80065ba:	4631      	mov	r1, r6
 80065bc:	4620      	mov	r0, r4
 80065be:	f7fb fc9f 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 80065c2:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 80065c6:	195b      	adds	r3, r3, r5
 80065c8:	f142 0200 	adc.w	r2, r2, #0
 80065cc:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80065d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080065d4 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 80065d4:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 80065d6:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake256_inc_finalize(shake256incctx *state) {
 80065da:	b082      	sub	sp, #8
 80065dc:	231f      	movs	r3, #31
 80065de:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 80065e2:	f1a2 0387 	sub.w	r3, r2, #135	@ 0x87
 80065e6:	430b      	orrs	r3, r1
void shake256_inc_finalize(shake256incctx *state) {
 80065e8:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 80065ea:	d014      	beq.n	8006616 <shake256_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80065ec:	2301      	movs	r3, #1
 80065ee:	f10d 0107 	add.w	r1, sp, #7
 80065f2:	f7fb fc85 	bl	8001f00 <KeccakF1600_StateXORBytes>
      p = 128;
 80065f6:	2080      	movs	r0, #128	@ 0x80
 80065f8:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 80065fc:	2301      	movs	r3, #1
 80065fe:	2287      	movs	r2, #135	@ 0x87
 8006600:	f10d 0107 	add.w	r1, sp, #7
 8006604:	4620      	mov	r0, r4
 8006606:	f7fb fc7b 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8006612:	b002      	add	sp, #8
 8006614:	bd10      	pop	{r4, pc}
      p |= 128;
 8006616:	219f      	movs	r1, #159	@ 0x9f
 8006618:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 800661c:	2301      	movs	r3, #1
 800661e:	2287      	movs	r2, #135	@ 0x87
 8006620:	f10d 0107 	add.w	r1, sp, #7
 8006624:	f7fb fc6c 	bl	8001f00 <KeccakF1600_StateXORBytes>
 8006628:	e7ef      	b.n	800660a <shake256_inc_finalize+0x36>
 800662a:	bf00      	nop

0800662c <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 8006630:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8006634:	460c      	mov	r4, r1
    if(outlen < s_inc[25])
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	42b4      	cmp	r4, r6
 800663c:	eb78 0309 	sbcs.w	r3, r8, r9
void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8006640:	4615      	mov	r5, r2
 8006642:	4601      	mov	r1, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8006644:	f1c6 0288 	rsb	r2, r6, #136	@ 0x88
    if(outlen < s_inc[25])
 8006648:	d20c      	bcs.n	8006664 <shake256_inc_squeeze+0x38>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800664a:	4623      	mov	r3, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f7fb fdd7 	bl	8002200 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 8006652:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 8006656:	1b1b      	subs	r3, r3, r4
 8006658:	f162 0200 	sbc.w	r2, r2, #0
 800665c:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8006660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8006664:	4633      	mov	r3, r6
    h += len;
 8006666:	1987      	adds	r7, r0, r6
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8006668:	4628      	mov	r0, r5
 800666a:	f7fb fdc9 	bl	8002200 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 800666e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 8006672:	1b9b      	subs	r3, r3, r6
 8006674:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 8006678:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 800667c:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 8006680:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 8006682:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 8006686:	d0eb      	beq.n	8006660 <shake256_inc_squeeze+0x34>
        KeccakF1600_StatePermute(s_inc);
 8006688:	2e88      	cmp	r6, #136	@ 0x88
 800668a:	4634      	mov	r4, r6
 800668c:	4628      	mov	r0, r5
 800668e:	bf28      	it	cs
 8006690:	2488      	movcs	r4, #136	@ 0x88
 8006692:	f7fb ffb5 	bl	8002600 <KeccakF1600_StatePermute>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8006696:	4639      	mov	r1, r7
 8006698:	4623      	mov	r3, r4
 800669a:	2200      	movs	r2, #0
 800669c:	4628      	mov	r0, r5
 800669e:	f7fb fdaf 	bl	8002200 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 80066a2:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 80066a6:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 80066a8:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 80066ac:	4427      	add	r7, r4
    while (outlen > 0) {
 80066ae:	d1eb      	bne.n	8006688 <shake256_inc_squeeze+0x5c>
}
 80066b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080066b4 <shake256_squeezeblocks>:
  while(nblocks > 0)
 80066b4:	b189      	cbz	r1, 80066da <shake256_squeezeblocks+0x26>
#endif
}


void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state)
{
 80066b6:	b570      	push	{r4, r5, r6, lr}
 80066b8:	4605      	mov	r5, r0
 80066ba:	4616      	mov	r6, r2
 80066bc:	460c      	mov	r4, r1
    KeccakF1600_StatePermute(s);
 80066be:	4630      	mov	r0, r6
 80066c0:	f7fb ff9e 	bl	8002600 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h, 0, r);
 80066c4:	4629      	mov	r1, r5
 80066c6:	2388      	movs	r3, #136	@ 0x88
 80066c8:	2200      	movs	r2, #0
 80066ca:	4630      	mov	r0, r6
 80066cc:	f7fb fd98 	bl	8002200 <KeccakF1600_StateExtractBytes>
  while(nblocks > 0)
 80066d0:	3c01      	subs	r4, #1
    h += r;
 80066d2:	f105 0588 	add.w	r5, r5, #136	@ 0x88
  while(nblocks > 0)
 80066d6:	d1f2      	bne.n	80066be <shake256_squeezeblocks+0xa>
  keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	4770      	bx	lr

080066dc <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 80066dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e0:	b0b7      	sub	sp, #220	@ 0xdc
 80066e2:	461c      	mov	r4, r3
 80066e4:	4606      	mov	r6, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	4617      	mov	r7, r2
        s_inc[i] = 0;
 80066ea:	2100      	movs	r1, #0
 80066ec:	22c8      	movs	r2, #200	@ 0xc8
 80066ee:	a802      	add	r0, sp, #8
 80066f0:	f004 f9be 	bl	800aa70 <memset>
    s_inc[25] = 0;
 80066f4:	f04f 0800 	mov.w	r8, #0
 80066f8:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 80066fc:	2c87      	cmp	r4, #135	@ 0x87
    s_inc[25] = 0;
 80066fe:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
    while (mlen + s_inc[25] >= r) {
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	d91a      	bls.n	800673e <shake256+0x62>
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8006708:	4639      	mov	r1, r7
 800670a:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 800670e:	a802      	add	r0, sp, #8
 8006710:	f7fb fbf6 	bl	8001f00 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 8006714:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 8006716:	a802      	add	r0, sp, #8
        mlen -= (size_t)(r - s_inc[25]);
 8006718:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        m += r - s_inc[25];
 800671c:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 8006720:	4414      	add	r4, r2
        m += r - s_inc[25];
 8006722:	441f      	add	r7, r3
        s_inc[25] = 0;
 8006724:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 8006728:	f7fb ff6a 	bl	8002600 <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 800672c:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	@ 0xd0
 8006730:	1911      	adds	r1, r2, r4
 8006732:	f143 0300 	adc.w	r3, r3, #0
 8006736:	2988      	cmp	r1, #136	@ 0x88
 8006738:	f173 0300 	sbcs.w	r3, r3, #0
 800673c:	d2e4      	bcs.n	8006708 <shake256+0x2c>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 800673e:	4639      	mov	r1, r7
 8006740:	4623      	mov	r3, r4
 8006742:	a802      	add	r0, sp, #8
 8006744:	f7fb fbdc 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8006748:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800674a:	18e2      	adds	r2, r4, r3
 800674c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800674e:	9234      	str	r2, [sp, #208]	@ 0xd0
 8006750:	f04f 011f 	mov.w	r1, #31
 8006754:	f143 0300 	adc.w	r3, r3, #0
 8006758:	f88d 1007 	strb.w	r1, [sp, #7]
    if(s_inc[25] == r-1){
 800675c:	f1a2 0187 	sub.w	r1, r2, #135	@ 0x87
 8006760:	4319      	orrs	r1, r3
    s_inc[25] += mlen;
 8006762:	9335      	str	r3, [sp, #212]	@ 0xd4
    if(s_inc[25] == r-1){
 8006764:	d032      	beq.n	80067cc <shake256+0xf0>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8006766:	2301      	movs	r3, #1
 8006768:	f10d 0107 	add.w	r1, sp, #7
 800676c:	a802      	add	r0, sp, #8
 800676e:	f7fb fbc7 	bl	8001f00 <KeccakF1600_StateXORBytes>
      p = 128;
 8006772:	2380      	movs	r3, #128	@ 0x80
 8006774:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8006778:	f10d 0107 	add.w	r1, sp, #7
 800677c:	2301      	movs	r3, #1
 800677e:	2287      	movs	r2, #135	@ 0x87
 8006780:	a802      	add	r0, sp, #8
 8006782:	f7fb fbbd 	bl	8001f00 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800678e:	4631      	mov	r1, r6
 8006790:	2300      	movs	r3, #0
 8006792:	2288      	movs	r2, #136	@ 0x88
 8006794:	a802      	add	r0, sp, #8
 8006796:	f7fb fd33 	bl	8002200 <KeccakF1600_StateExtractBytes>
    while (outlen > 0) {
 800679a:	b1a5      	cbz	r5, 80067c6 <shake256+0xea>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800679c:	2700      	movs	r7, #0
        KeccakF1600_StatePermute(s_inc);
 800679e:	2d88      	cmp	r5, #136	@ 0x88
 80067a0:	462c      	mov	r4, r5
 80067a2:	a802      	add	r0, sp, #8
 80067a4:	bf28      	it	cs
 80067a6:	2488      	movcs	r4, #136	@ 0x88
 80067a8:	f7fb ff2a 	bl	8002600 <KeccakF1600_StatePermute>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80067ac:	4631      	mov	r1, r6
 80067ae:	4623      	mov	r3, r4
 80067b0:	2200      	movs	r2, #0
 80067b2:	a802      	add	r0, sp, #8
 80067b4:	f7fb fd24 	bl	8002200 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 80067b8:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 80067bc:	1b2d      	subs	r5, r5, r4
        s_inc[25] = r - len;
 80067be:	e9cd 3734 	strd	r3, r7, [sp, #208]	@ 0xd0
        h += len;
 80067c2:	4426      	add	r6, r4
    while (outlen > 0) {
 80067c4:	d1eb      	bne.n	800679e <shake256+0xc2>
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80067c6:	b037      	add	sp, #220	@ 0xdc
 80067c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p |= 128;
 80067cc:	229f      	movs	r2, #159	@ 0x9f
 80067ce:	f88d 2007 	strb.w	r2, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80067d2:	2301      	movs	r3, #1
 80067d4:	2287      	movs	r2, #135	@ 0x87
 80067d6:	f10d 0107 	add.w	r1, sp, #7
 80067da:	a802      	add	r0, sp, #8
 80067dc:	f7fb fb90 	bl	8001f00 <KeccakF1600_StateXORBytes>
 80067e0:	e7d1      	b.n	8006786 <shake256+0xaa>
 80067e2:	bf00      	nop

080067e4 <polyeta_pack>:
#else
#define DBENCH_START()
#define DBENCH_STOP(t)
#endif

void polyeta_pack(uint8_t *r, const poly *a) {
 80067e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067e8:	f501 5e10 	add.w	lr, r1, #9216	@ 0x2400
 80067ec:	b083      	sub	sp, #12
    t[2] = ETA - a->coeffs[8*i+2];
    t[3] = ETA - a->coeffs[8*i+3];
    t[4] = ETA - a->coeffs[8*i+4];
    t[5] = ETA - a->coeffs[8*i+5];
    t[6] = ETA - a->coeffs[8*i+6];
    t[7] = ETA - a->coeffs[8*i+7];
 80067ee:	69cb      	ldr	r3, [r1, #28]
 80067f0:	9301      	str	r3, [sp, #4]
    t[3] = ETA - a->coeffs[8*i+3];
 80067f2:	68cb      	ldr	r3, [r1, #12]
    t[4] = ETA - a->coeffs[8*i+4];
 80067f4:	690a      	ldr	r2, [r1, #16]
    t[2] = ETA - a->coeffs[8*i+2];
 80067f6:	688d      	ldr	r5, [r1, #8]
    t[6] = ETA - a->coeffs[8*i+6];
 80067f8:	698e      	ldr	r6, [r1, #24]
    t[1] = ETA - a->coeffs[8*i+1];
 80067fa:	684f      	ldr	r7, [r1, #4]
    t[5] = ETA - a->coeffs[8*i+5];
 80067fc:	694c      	ldr	r4, [r1, #20]
    t[0] = ETA - a->coeffs[8*i+0];
 80067fe:	f851 8b20 	ldr.w	r8, [r1], #32
    t[3] = ETA - a->coeffs[8*i+3];
 8006802:	f1c3 0901 	rsb	r9, r3, #1
    t[7] = ETA - a->coeffs[8*i+7];
 8006806:	9b01      	ldr	r3, [sp, #4]
    t[4] = ETA - a->coeffs[8*i+4];
 8006808:	f1c2 0201 	rsb	r2, r2, #1
    t[2] = ETA - a->coeffs[8*i+2];
 800680c:	f1c5 0501 	rsb	r5, r5, #1
    t[4] = ETA - a->coeffs[8*i+4];
 8006810:	b2d2      	uxtb	r2, r2
    t[7] = ETA - a->coeffs[8*i+7];
 8006812:	f1c3 0301 	rsb	r3, r3, #1
    t[2] = ETA - a->coeffs[8*i+2];
 8006816:	b2ed      	uxtb	r5, r5
    t[3] = ETA - a->coeffs[8*i+3];
 8006818:	fa5f f989 	uxtb.w	r9, r9
    t[6] = ETA - a->coeffs[8*i+6];
 800681c:	f1c6 0601 	rsb	r6, r6, #1
    t[7] = ETA - a->coeffs[8*i+7];
 8006820:	b2db      	uxtb	r3, r3
    t[1] = ETA - a->coeffs[8*i+1];
 8006822:	f1c7 0701 	rsb	r7, r7, #1

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8006826:	0112      	lsls	r2, r2, #4
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8006828:	b2ff      	uxtb	r7, r7
    t[5] = ETA - a->coeffs[8*i+5];
 800682a:	f1c4 0401 	rsb	r4, r4, #1
    t[6] = ETA - a->coeffs[8*i+6];
 800682e:	b2f6      	uxtb	r6, r6
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8006830:	ea4f 1c85 	mov.w	ip, r5, lsl #6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8006834:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8006838:	015b      	lsls	r3, r3, #5
    t[5] = ETA - a->coeffs[8*i+5];
 800683a:	b2e4      	uxtb	r4, r4
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 800683c:	ea4c 0cc7 	orr.w	ip, ip, r7, lsl #3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8006840:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
    t[0] = ETA - a->coeffs[8*i+0];
 8006844:	f1c8 0701 	rsb	r7, r8, #1
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8006848:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 800684c:	ea4c 0c07 	orr.w	ip, ip, r7
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8006850:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8006854:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  for(i = 0; i < 288; ++i) {
 8006858:	4571      	cmp	r1, lr
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 800685a:	f880 c000 	strb.w	ip, [r0]
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 800685e:	7042      	strb	r2, [r0, #1]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8006860:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < 288; ++i) {
 8006862:	f100 0003 	add.w	r0, r0, #3
 8006866:	d1c2      	bne.n	80067ee <polyeta_pack+0xa>
  }
#endif

  DBENCH_STOP(*tpack);
}
 8006868:	b003      	add	sp, #12
 800686a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800686e:	bf00      	nop

08006870 <polyeta_unpack>:

void polyeta_unpack(poly *r, const uint8_t *a) {
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	f500 5c10 	add.w	ip, r0, #9216	@ 0x2400
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
  }
#elif N==2304
  for(i = 0; i < 288; ++i) {
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 8006878:	780c      	ldrb	r4, [r1, #0]
  for(i = 0; i < 288; ++i) {
 800687a:	3020      	adds	r0, #32
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 800687c:	f004 0407 	and.w	r4, r4, #7
 8006880:	f840 4c20 	str.w	r4, [r0, #-32]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 8006884:	780e      	ldrb	r6, [r1, #0]
 8006886:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 800688a:	f840 6c1c 	str.w	r6, [r0, #-28]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 800688e:	784b      	ldrb	r3, [r1, #1]
 8006890:	780a      	ldrb	r2, [r1, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	f840 3c18 	str.w	r3, [r0, #-24]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 80068a0:	f891 e001 	ldrb.w	lr, [r1, #1]
 80068a4:	f3ce 0542 	ubfx	r5, lr, #1, #3
 80068a8:	f840 5c14 	str.w	r5, [r0, #-20]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 80068ac:	f891 8001 	ldrb.w	r8, [r1, #1]
 80068b0:	f3c8 1802 	ubfx	r8, r8, #4, #3
 80068b4:	f840 8c10 	str.w	r8, [r0, #-16]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 80068b8:	f1c3 0701 	rsb	r7, r3, #1
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 80068bc:	788b      	ldrb	r3, [r1, #2]
 80068be:	784a      	ldrb	r2, [r1, #1]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	f840 3c0c 	str.w	r3, [r0, #-12]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 80068ce:	788a      	ldrb	r2, [r1, #2]
 80068d0:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80068d4:	f840 2c08 	str.w	r2, [r0, #-8]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80068d8:	f1c5 0e01 	rsb	lr, r5, #1
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 80068dc:	788d      	ldrb	r5, [r1, #2]
 80068de:	096d      	lsrs	r5, r5, #5
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 80068e0:	f1c4 0401 	rsb	r4, r4, #1
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 80068e4:	f1c6 0601 	rsb	r6, r6, #1
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 80068e8:	f1c8 0801 	rsb	r8, r8, #1
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80068ec:	f1c3 0301 	rsb	r3, r3, #1
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 80068f0:	f1c2 0201 	rsb	r2, r2, #1
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 80068f4:	f1c5 0501 	rsb	r5, r5, #1
  for(i = 0; i < 288; ++i) {
 80068f8:	4584      	cmp	ip, r0
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 80068fa:	e940 4608 	strd	r4, r6, [r0, #-32]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80068fe:	e940 7e06 	strd	r7, lr, [r0, #-24]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 8006902:	e940 8304 	strd	r8, r3, [r0, #-16]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 8006906:	e940 2502 	strd	r2, r5, [r0, #-8]
  for(i = 0; i < 288; ++i) {
 800690a:	f101 0103 	add.w	r1, r1, #3
 800690e:	d1b3      	bne.n	8006878 <polyeta_unpack+0x8>
  }
#endif

  DBENCH_STOP(*tpack);
}
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006914 <polyt1_pack>:

void polyt1_pack(uint8_t *r, const poly *a) {
 8006914:	b410      	push	{r4}
 8006916:	f500 6246 	add.w	r2, r0, #3168	@ 0xc60
  }
  

#elif N==2304
  for(i = 0; i < 288; ++i) { //11
    r[11*i+ 0] = (a->coeffs[8*i+0] >>  0);                          
 800691a:	680b      	ldr	r3, [r1, #0]
 800691c:	7003      	strb	r3, [r0, #0]
    r[11*i+ 1] = (a->coeffs[8*i+0] >>  8) | (a->coeffs[8*i+1] << 3);
 800691e:	684b      	ldr	r3, [r1, #4]
 8006920:	680c      	ldr	r4, [r1, #0]
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8006928:	7043      	strb	r3, [r0, #1]
    r[11*i+ 2] = (a->coeffs[8*i+1] >>  5) | (a->coeffs[8*i+2] << 6);
 800692a:	688b      	ldr	r3, [r1, #8]
 800692c:	684c      	ldr	r4, [r1, #4]
 800692e:	019b      	lsls	r3, r3, #6
 8006930:	ea43 1364 	orr.w	r3, r3, r4, asr #5
 8006934:	7083      	strb	r3, [r0, #2]
    r[11*i+ 3] = (a->coeffs[8*i+2] >>  2);                          
 8006936:	688b      	ldr	r3, [r1, #8]
  for(i = 0; i < 288; ++i) { //11
 8006938:	300b      	adds	r0, #11
    r[11*i+ 3] = (a->coeffs[8*i+2] >>  2);                          
 800693a:	109b      	asrs	r3, r3, #2
 800693c:	f800 3c08 	strb.w	r3, [r0, #-8]
    r[11*i+ 4] = (a->coeffs[8*i+2] >> 10) | (a->coeffs[8*i+3] << 1);
 8006940:	68cb      	ldr	r3, [r1, #12]
 8006942:	688c      	ldr	r4, [r1, #8]
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	ea43 23a4 	orr.w	r3, r3, r4, asr #10
 800694a:	f800 3c07 	strb.w	r3, [r0, #-7]
    r[11*i+ 5] = (a->coeffs[8*i+3] >>  7) | (a->coeffs[8*i+4] << 4);
 800694e:	690b      	ldr	r3, [r1, #16]
 8006950:	68cc      	ldr	r4, [r1, #12]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	ea43 13e4 	orr.w	r3, r3, r4, asr #7
 8006958:	f800 3c06 	strb.w	r3, [r0, #-6]
    r[11*i+ 6] = (a->coeffs[8*i+4] >>  4) | (a->coeffs[8*i+5] << 7);
 800695c:	694b      	ldr	r3, [r1, #20]
 800695e:	690c      	ldr	r4, [r1, #16]
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 8006966:	f800 3c05 	strb.w	r3, [r0, #-5]
    r[11*i+ 7] = (a->coeffs[8*i+5] >>  1);                          
 800696a:	694b      	ldr	r3, [r1, #20]
  for(i = 0; i < 288; ++i) { //11
 800696c:	3120      	adds	r1, #32
    r[11*i+ 7] = (a->coeffs[8*i+5] >>  1);                          
 800696e:	105b      	asrs	r3, r3, #1
 8006970:	f800 3c04 	strb.w	r3, [r0, #-4]
    r[11*i+ 8] = (a->coeffs[8*i+5] >>  9) | (a->coeffs[8*i+6] << 2);
 8006974:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8006978:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	ea43 2364 	orr.w	r3, r3, r4, asr #9
 8006982:	f800 3c03 	strb.w	r3, [r0, #-3]
    r[11*i+ 9] = (a->coeffs[8*i+6] >>  6) | (a->coeffs[8*i+7] << 5);
 8006986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698a:	f851 4c08 	ldr.w	r4, [r1, #-8]
 800698e:	015b      	lsls	r3, r3, #5
 8006990:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 8006994:	f800 3c02 	strb.w	r3, [r0, #-2]
    r[11*i+10] = (a->coeffs[8*i+7] >>  3);                          
 8006998:	f851 3c04 	ldr.w	r3, [r1, #-4]
  for(i = 0; i < 288; ++i) { //11
 800699c:	4290      	cmp	r0, r2
    r[11*i+10] = (a->coeffs[8*i+7] >>  3);                          
 800699e:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80069a2:	f800 3c01 	strb.w	r3, [r0, #-1]
  for(i = 0; i < 288; ++i) { //11
 80069a6:	d1b8      	bne.n	800691a <polyt1_pack+0x6>
  }

#endif
  DBENCH_STOP(*tpack);
}
 80069a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop

080069b0 <polyt1_unpack>:

void polyt1_unpack(poly *r, const uint8_t *a) {
 80069b0:	b500      	push	{lr}
 80069b2:	f501 6246 	add.w	r2, r1, #3168	@ 0xc60



#elif N==2304
  for(i = 0; i < 288; ++i) {
    r->coeffs[8*i+0] = ((a[11*i+0] >> 0) | ((uint32_t)a[11*i+ 1] << 8)) & 0x7FF;                               
 80069b6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80069ba:	780b      	ldrb	r3, [r1, #0]
 80069bc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  for(i = 0; i < 288; ++i) {
 80069c0:	310b      	adds	r1, #11
    r->coeffs[8*i+0] = ((a[11*i+0] >> 0) | ((uint32_t)a[11*i+ 1] << 8)) & 0x7FF;                               
 80069c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069c6:	6003      	str	r3, [r0, #0]
    r->coeffs[8*i+1] = ((a[11*i+1] >> 3) | ((uint32_t)a[11*i+ 2] << 5)) & 0x7FF;                               
 80069c8:	f811 3c09 	ldrb.w	r3, [r1, #-9]
 80069cc:	f811 cc0a 	ldrb.w	ip, [r1, #-10]
 80069d0:	015b      	lsls	r3, r3, #5
 80069d2:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
 80069d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069da:	6043      	str	r3, [r0, #4]
    r->coeffs[8*i+2] = ((a[11*i+2] >> 6) | ((uint32_t)a[11*i+ 3] << 2) | ((uint32_t)a[11*i+4] << 10 )) & 0x7FF;
 80069dc:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 80069e0:	f811 ec09 	ldrb.w	lr, [r1, #-9]
 80069e4:	f811 cc07 	ldrb.w	ip, [r1, #-7]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	ea43 139e 	orr.w	r3, r3, lr, lsr #6
 80069ee:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
 80069f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069f6:	6083      	str	r3, [r0, #8]
    r->coeffs[8*i+3] = ((a[11*i+4] >> 1) | ((uint32_t)a[11*i+ 5] << 7)) & 0x7FF;                               
 80069f8:	f811 3c06 	ldrb.w	r3, [r1, #-6]
 80069fc:	f811 cc07 	ldrb.w	ip, [r1, #-7]
 8006a00:	01db      	lsls	r3, r3, #7
 8006a02:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
 8006a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0a:	60c3      	str	r3, [r0, #12]
    r->coeffs[8*i+4] = ((a[11*i+5] >> 4) | ((uint32_t)a[11*i+ 6] << 4)) & 0x7FF;                               
 8006a0c:	f811 3c05 	ldrb.w	r3, [r1, #-5]
 8006a10:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8006a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a1e:	6103      	str	r3, [r0, #16]
    r->coeffs[8*i+5] = ((a[11*i+6] >> 7) | ((uint32_t)a[11*i+ 7] << 1) | ((uint32_t)a[11*i+8] <<  9)) & 0x7FF; 
 8006a20:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8006a24:	f811 ec05 	ldrb.w	lr, [r1, #-5]
 8006a28:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
 8006a32:	ea43 234c 	orr.w	r3, r3, ip, lsl #9
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+6] = ((a[11*i+8] >> 2) | ((uint32_t)a[11*i+ 9] << 6)) & 0x7FF;                               
 8006a3c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8006a40:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8006a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a4e:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+7] = ((a[11*i+9] >> 5) | ((uint32_t)a[11*i+10] << 3)) & 0x7FF;                               
 8006a50:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8006a54:	f811 cc02 	ldrb.w	ip, [r1, #-2]
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	ea43 135c 	orr.w	r3, r3, ip, lsr #5
  for(i = 0; i < 288; ++i) {
 8006a5e:	428a      	cmp	r2, r1
    r->coeffs[8*i+7] = ((a[11*i+9] >> 5) | ((uint32_t)a[11*i+10] << 3)) & 0x7FF;                               
 8006a60:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < 288; ++i) {
 8006a62:	f100 0020 	add.w	r0, r0, #32
 8006a66:	d1a6      	bne.n	80069b6 <polyt1_unpack+0x6>
  }                               

#endif
  DBENCH_STOP(*tpack);
}
 8006a68:	f85d fb04 	ldr.w	pc, [sp], #4

08006a6c <polyt0_pack>:
void polyt0_pack(uint8_t *r, const poly *a) {
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	f501 5410 	add.w	r4, r1, #9216	@ 0x2400
 8006a74:	b083      	sub	sp, #12
#elif N==2304
  for(i = 0; i < 288; ++i) {
    t[0] = (1 << 12) - a->coeffs[8*i+0];
    t[1] = (1 << 12) - a->coeffs[8*i+1];
    t[2] = (1 << 12) - a->coeffs[8*i+2];
    t[3] = (1 << 12) - a->coeffs[8*i+3];
 8006a76:	68cb      	ldr	r3, [r1, #12]
    t[4] = (1 << 12) - a->coeffs[8*i+4];
    t[5] = (1 << 12) - a->coeffs[8*i+5];
 8006a78:	694e      	ldr	r6, [r1, #20]
    t[3] = (1 << 12) - a->coeffs[8*i+3];
 8006a7a:	f5c3 5580 	rsb	r5, r3, #4096	@ 0x1000
    t[6] = (1 << 12) - a->coeffs[8*i+6];
    t[7] = (1 << 12) - a->coeffs[8*i+7];
 8006a7e:	69cb      	ldr	r3, [r1, #28]
 8006a80:	9301      	str	r3, [sp, #4]
    t[4] = (1 << 12) - a->coeffs[8*i+4];
 8006a82:	690b      	ldr	r3, [r1, #16]
    t[2] = (1 << 12) - a->coeffs[8*i+2];
 8006a84:	e9d1 7201 	ldrd	r7, r2, [r1, #4]
    t[4] = (1 << 12) - a->coeffs[8*i+4];
 8006a88:	f5c3 5880 	rsb	r8, r3, #4096	@ 0x1000
    t[6] = (1 << 12) - a->coeffs[8*i+6];
 8006a8c:	698b      	ldr	r3, [r1, #24]
 8006a8e:	f5c3 5980 	rsb	r9, r3, #4096	@ 0x1000
    t[0] = (1 << 12) - a->coeffs[8*i+0];
 8006a92:	680b      	ldr	r3, [r1, #0]
    t[1] = (1 << 12) - a->coeffs[8*i+1];
 8006a94:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
    t[0] = (1 << 12) - a->coeffs[8*i+0];
 8006a98:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000

    r[13*i+ 0] = (t[0] >>  0);              
    r[13*i+ 1] = (t[0] >>  8) | (t[1] << 5);
 8006a9c:	ea4f 1e47 	mov.w	lr, r7, lsl #5
    t[2] = (1 << 12) - a->coeffs[8*i+2];
 8006aa0:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
    r[13*i+ 2] = (t[1] >>  3);
    r[13*i+ 3] = (t[1] >> 11) | (t[2] << 2);              
    r[13*i+ 4] = (t[2] >>  6) | (t[3] << 7);
 8006aa4:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
    r[13*i+ 0] = (t[0] >>  0);              
 8006aa8:	f04f 0a00 	mov.w	sl, #0
    r[13*i+ 4] = (t[2] >>  6) | (t[3] << 7);
 8006aac:	ea4b 1b92 	orr.w	fp, fp, r2, lsr #6
    t[5] = (1 << 12) - a->coeffs[8*i+5];
 8006ab0:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
    r[13*i+ 0] = (t[0] >>  0);              
 8006ab4:	f36c 0a07 	bfi	sl, ip, #0, #8
    r[13*i+ 1] = (t[0] >>  8) | (t[1] << 5);
 8006ab8:	ea4e 2c1c 	orr.w	ip, lr, ip, lsr #8
    r[13*i+ 0] = (t[0] >>  0);              
 8006abc:	f04f 0e00 	mov.w	lr, #0
 8006ac0:	f36b 0e07 	bfi	lr, fp, #0, #8
 8006ac4:	f36c 2a0f 	bfi	sl, ip, #8, #8
    r[13*i+ 5] = (t[3] >>  1);
    r[13*i+ 6] = (t[3] >>  9) | (t[4] << 4);
    r[13*i+ 7] = (t[4] >>  4);              
    r[13*i+ 8] = (t[4] >> 12) | (t[5] << 1);
 8006ac8:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    r[13*i+ 2] = (t[1] >>  3);
 8006acc:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
    t[7] = (1 << 12) - a->coeffs[8*i+7];
 8006ad0:	9b01      	ldr	r3, [sp, #4]
    r[13*i+ 3] = (t[1] >> 11) | (t[2] << 2);              
 8006ad2:	0092      	lsls	r2, r2, #2
    r[13*i+ 8] = (t[4] >> 12) | (t[5] << 1);
 8006ad4:	ea4b 3b18 	orr.w	fp, fp, r8, lsr #12
    r[13*i+ 3] = (t[1] >> 11) | (t[2] << 2);              
 8006ad8:	ea42 22d7 	orr.w	r2, r2, r7, lsr #11
    r[13*i+ 0] = (t[0] >>  0);              
 8006adc:	f36c 4a17 	bfi	sl, ip, #16, #8
    r[13*i+ 9] = (t[5] >>  7) | (t[6] << 6);
 8006ae0:	ea4f 1789 	mov.w	r7, r9, lsl #6
    r[13*i+ 0] = (t[0] >>  0);              
 8006ae4:	f04f 0c00 	mov.w	ip, #0
    t[7] = (1 << 12) - a->coeffs[8*i+7];
 8006ae8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
    r[13*i+ 0] = (t[0] >>  0);              
 8006aec:	f36b 0c07 	bfi	ip, fp, #0, #8
 8006af0:	f362 6a1f 	bfi	sl, r2, #24, #8
    r[13*i+ 5] = (t[3] >>  1);
 8006af4:	ea4f 0b55 	mov.w	fp, r5, lsr #1
    r[13*i+ 6] = (t[3] >>  9) | (t[4] << 4);
 8006af8:	ea4f 1208 	mov.w	r2, r8, lsl #4
    r[13*i+ 9] = (t[5] >>  7) | (t[6] << 6);
 8006afc:	ea47 16d6 	orr.w	r6, r7, r6, lsr #7
    r[13*i+ 6] = (t[3] >>  9) | (t[4] << 4);
 8006b00:	ea42 2555 	orr.w	r5, r2, r5, lsr #9
    r[13*i+ 0] = (t[0] >>  0);              
 8006b04:	f366 2c0f 	bfi	ip, r6, #8, #8
    r[13*i+10] = (t[6] >>  2);              
    r[13*i+11] = (t[6] >> 10) | (t[7] << 3);              
 8006b08:	00da      	lsls	r2, r3, #3
    r[13*i+ 0] = (t[0] >>  0);              
 8006b0a:	f36b 2e0f 	bfi	lr, fp, #8, #8
    r[13*i+10] = (t[6] >>  2);              
 8006b0e:	ea4f 0699 	mov.w	r6, r9, lsr #2
    r[13*i+ 0] = (t[0] >>  0);              
 8006b12:	f365 4e17 	bfi	lr, r5, #16, #8
    r[13*i+ 7] = (t[4] >>  4);              
 8006b16:	ea4f 1818 	mov.w	r8, r8, lsr #4
    r[13*i+ 0] = (t[0] >>  0);              
 8006b1a:	f366 4c17 	bfi	ip, r6, #16, #8
    r[13*i+11] = (t[6] >> 10) | (t[7] << 3);              
 8006b1e:	ea42 2299 	orr.w	r2, r2, r9, lsr #10
  for(i = 0; i < 288; ++i) {
 8006b22:	3120      	adds	r1, #32
    r[13*i+ 0] = (t[0] >>  0);              
 8006b24:	f368 6e1f 	bfi	lr, r8, #24, #8
 8006b28:	f362 6c1f 	bfi	ip, r2, #24, #8
    r[13*i+12] = (t[7] >>  5);              
 8006b2c:	095b      	lsrs	r3, r3, #5
  for(i = 0; i < 288; ++i) {
 8006b2e:	428c      	cmp	r4, r1
    r[13*i+ 0] = (t[0] >>  0);              
 8006b30:	f8c0 a000 	str.w	sl, [r0]
 8006b34:	f8c0 e004 	str.w	lr, [r0, #4]
 8006b38:	f8c0 c008 	str.w	ip, [r0, #8]
    r[13*i+12] = (t[7] >>  5);              
 8006b3c:	7303      	strb	r3, [r0, #12]
  for(i = 0; i < 288; ++i) {
 8006b3e:	f100 000d 	add.w	r0, r0, #13
 8006b42:	d198      	bne.n	8006a76 <polyt0_pack+0xa>
  }

#endif
  DBENCH_STOP(*tpack);
}
 8006b44:	b003      	add	sp, #12
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	bf00      	nop

08006b4c <polyt0_unpack>:

void polyt0_unpack(poly *r, const uint8_t *a) {
 8006b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b50:	f501 6c6a 	add.w	ip, r1, #3744	@ 0xea0
    r->coeffs[2*i+1] = (1 << 11) - r->coeffs[2*i+1];
  }

#elif N==2304
  for(i = 0; i < 288; ++i) {
    r->coeffs[8*i+0] = ((a[13*i+ 0] >> 0) | ((uint32_t)a[13*i+ 1] << 8)) & 0x1FFF;                               
 8006b54:	784b      	ldrb	r3, [r1, #1]
 8006b56:	780f      	ldrb	r7, [r1, #0]
 8006b58:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  for(i = 0; i < 288; ++i) {
 8006b5c:	310d      	adds	r1, #13
    r->coeffs[8*i+0] = ((a[13*i+ 0] >> 0) | ((uint32_t)a[13*i+ 1] << 8)) & 0x1FFF;                               
 8006b5e:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8006b62:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] =(((a[13*i+ 1] >> 5) | ((uint32_t)a[13*i+ 2] << 3)) | ((uint32_t)a[13*i+ 3] << 11)) & 0x1FFF;                               
 8006b64:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006b68:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
 8006b6c:	f811 3c0a 	ldrb.w	r3, [r1, #-10]
 8006b70:	00ed      	lsls	r5, r5, #3
 8006b72:	ea45 1552 	orr.w	r5, r5, r2, lsr #5
 8006b76:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
 8006b7a:	f3c5 050c 	ubfx	r5, r5, #0, #13
 8006b7e:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+2] = ((a[13*i+ 3] >> 2) | ((uint32_t)a[13*i+ 4] << 6)) & 0x1FFF;
 8006b80:	f811 6c09 	ldrb.w	r6, [r1, #-9]
 8006b84:	f811 3c0a 	ldrb.w	r3, [r1, #-10]
 8006b88:	01b6      	lsls	r6, r6, #6
 8006b8a:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8006b8e:	f3c6 060c 	ubfx	r6, r6, #0, #13
 8006b92:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+3] =(((a[13*i+ 4] >> 7) | ((uint32_t)a[13*i+ 5] << 1)) | ((uint32_t)a[13*i+ 6] <<  9)) & 0x1FFF;                               
 8006b94:	f811 4c08 	ldrb.w	r4, [r1, #-8]
 8006b98:	f811 2c09 	ldrb.w	r2, [r1, #-9]
 8006b9c:	f811 3c07 	ldrb.w	r3, [r1, #-7]
 8006ba0:	0064      	lsls	r4, r4, #1
 8006ba2:	ea44 14d2 	orr.w	r4, r4, r2, lsr #7
 8006ba6:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
 8006baa:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8006bae:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+4] =(((a[13*i+ 6] >> 4) | ((uint32_t)a[13*i+ 7] << 4)) | ((uint32_t)a[13*i+ 8] << 12)) & 0x1FFF;                               
 8006bb0:	f811 2c06 	ldrb.w	r2, [r1, #-6]
 8006bb4:	f811 ec07 	ldrb.w	lr, [r1, #-7]
 8006bb8:	f811 3c05 	ldrb.w	r3, [r1, #-5]
 8006bbc:	0112      	lsls	r2, r2, #4
 8006bbe:	ea42 121e 	orr.w	r2, r2, lr, lsr #4
 8006bc2:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
 8006bc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006bca:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+5] = ((a[13*i+ 8] >> 1) | ((uint32_t)a[13*i+ 9] << 7)) & 0x1FFF;
 8006bcc:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8006bd0:	f811 ec05 	ldrb.w	lr, [r1, #-5]
 8006bd4:	01db      	lsls	r3, r3, #7
 8006bd6:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
 8006bda:	f3c3 0e0c 	ubfx	lr, r3, #0, #13
 8006bde:	f8c0 e014 	str.w	lr, [r0, #20]
    r->coeffs[8*i+6] =(((a[13*i+ 9] >> 6) | ((uint32_t)a[13*i+10] << 2)) | ((uint32_t)a[13*i+11] << 10)) & 0x1FFF;                               
 8006be2:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 8006be6:	f811 9c04 	ldrb.w	r9, [r1, #-4]
 8006bea:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	ea43 1399 	orr.w	r3, r3, r9, lsr #6
 8006bf4:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
 8006bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bfc:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+7] = ((a[13*i+11] >> 3) | ((uint32_t)a[13*i+12] << 5)) & 0x1FFF;                               
 8006bfe:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8006c02:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8006c06:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8006c0a:	ea48 08d9 	orr.w	r8, r8, r9, lsr #3

    r->coeffs[8*i+0] = (1 << 12) - r->coeffs[8*i+0];
 8006c0e:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
    r->coeffs[8*i+1] = (1 << 12) - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = (1 << 12) - r->coeffs[8*i+2];
    r->coeffs[8*i+3] = (1 << 12) - r->coeffs[8*i+3];
 8006c12:	f5c4 5980 	rsb	r9, r4, #4096	@ 0x1000
    r->coeffs[8*i+1] = (1 << 12) - r->coeffs[8*i+1];
 8006c16:	f5c5 5580 	rsb	r5, r5, #4096	@ 0x1000
    r->coeffs[8*i+4] = (1 << 12) - r->coeffs[8*i+4];
 8006c1a:	f5c2 5480 	rsb	r4, r2, #4096	@ 0x1000
    r->coeffs[8*i+2] = (1 << 12) - r->coeffs[8*i+2];
 8006c1e:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
    r->coeffs[8*i+5] = (1 << 12) - r->coeffs[8*i+5];
 8006c22:	f5ce 5280 	rsb	r2, lr, #4096	@ 0x1000
    r->coeffs[8*i+6] = (1 << 12) - r->coeffs[8*i+6];
 8006c26:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
    r->coeffs[8*i+7] = (1 << 12) - r->coeffs[8*i+7];
 8006c2a:	f5c8 5880 	rsb	r8, r8, #4096	@ 0x1000
  for(i = 0; i < 288; ++i) {
 8006c2e:	458c      	cmp	ip, r1
    r->coeffs[8*i+1] = (1 << 12) - r->coeffs[8*i+1];
 8006c30:	e9c0 7500 	strd	r7, r5, [r0]
    r->coeffs[8*i+3] = (1 << 12) - r->coeffs[8*i+3];
 8006c34:	e9c0 6902 	strd	r6, r9, [r0, #8]
    r->coeffs[8*i+5] = (1 << 12) - r->coeffs[8*i+5];
 8006c38:	e9c0 4204 	strd	r4, r2, [r0, #16]
    r->coeffs[8*i+7] = (1 << 12) - r->coeffs[8*i+7];
 8006c3c:	e9c0 3806 	strd	r3, r8, [r0, #24]
  for(i = 0; i < 288; ++i) {
 8006c40:	f100 0020 	add.w	r0, r0, #32
 8006c44:	d186      	bne.n	8006b54 <polyt0_unpack+0x8>
  }

#endif
  DBENCH_STOP(*tpack);
}
 8006c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	bf00      	nop

08006c4c <polyz_unpack>:

#endif
	DBENCH_STOP(*tpack);
}

void polyz_unpack(poly *r, const uint8_t *a) {
 8006c4c:	b530      	push	{r4, r5, lr}
		r->coeffs[8 * i + 6] = GAMMA1 - r->coeffs[8 * i + 6];
		r->coeffs[8 * i + 7] = GAMMA1 - r->coeffs[8 * i + 7];
	}

#elif N == 2304
	for (i = 0; i < 1152; ++i)
 8006c4e:	f04f 0c00 	mov.w	ip, #0
 8006c52:	f100 0e04 	add.w	lr, r0, #4
	{
		r->coeffs[2 * i + 0] = ((a[5 * i + 0] >> 0) | ((uint32_t)a[5 * i + 1] << 8) | ((uint32_t)a[5 * i + 2] << 16)) & 0xFFFFF;
 8006c56:	788b      	ldrb	r3, [r1, #2]
 8006c58:	784c      	ldrb	r4, [r1, #1]
 8006c5a:	780a      	ldrb	r2, [r1, #0]
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c68:	f840 303c 	str.w	r3, [r0, ip, lsl #3]
		r->coeffs[2 * i + 1] = ((a[5 * i + 2] >> 4) | ((uint32_t)a[5 * i + 3] << 4) | ((uint32_t)a[5 * i + 4] << 12)) & 0xFFFFF;
 8006c6c:	78ca      	ldrb	r2, [r1, #3]
 8006c6e:	788d      	ldrb	r5, [r1, #2]
 8006c70:	790c      	ldrb	r4, [r1, #4]
 8006c72:	0112      	lsls	r2, r2, #4
 8006c74:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8006c78:	ea42 3204 	orr.w	r2, r2, r4, lsl #12

		r->coeffs[2 * i + 0] = GAMMA1 - r->coeffs[2 * i + 0];
 8006c7c:	f5c3 2300 	rsb	r3, r3, #524288	@ 0x80000
		r->coeffs[2 * i + 1] = GAMMA1 - r->coeffs[2 * i + 1];
 8006c80:	f5c2 2200 	rsb	r2, r2, #524288	@ 0x80000
		r->coeffs[2 * i + 0] = GAMMA1 - r->coeffs[2 * i + 0];
 8006c84:	f840 303c 	str.w	r3, [r0, ip, lsl #3]
		r->coeffs[2 * i + 1] = GAMMA1 - r->coeffs[2 * i + 1];
 8006c88:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	for (i = 0; i < 1152; ++i)
 8006c8c:	f10c 0c01 	add.w	ip, ip, #1
 8006c90:	f5bc 6f90 	cmp.w	ip, #1152	@ 0x480
 8006c94:	f101 0105 	add.w	r1, r1, #5
 8006c98:	d1dd      	bne.n	8006c56 <polyz_unpack+0xa>
	}

#endif
	DBENCH_STOP(*tpack);
}
 8006c9a:	bd30      	pop	{r4, r5, pc}

08006c9c <polyw1_pack>:

void polyw1_pack(uint8_t *r, const poly *a) {
 8006c9c:	b500      	push	{lr}
 8006c9e:	468c      	mov	ip, r1
 8006ca0:	3801      	subs	r0, #1
    r[5*i+3]  = (a->coeffs[8*i+4] >> 4) | (a->coeffs[8*i+5] << 1) | (a->coeffs[8*i+6] << 6);  
    r[5*i+4]  = (a->coeffs[8*i+6] >> 2) | (a->coeffs[8*i+7] << 3);                            
  }

#elif N==2304
  for(i = 0; i < 1152; ++i){
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f101 0e04 	add.w	lr, r1, #4
    r[i]  = (a->coeffs[2*i+0] >> 0) | (a->coeffs[2*i+1] << 4);                          
 8006ca8:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
 8006cac:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
  for(i = 0; i < 1152; ++i){
 8006cb0:	3301      	adds	r3, #1
    r[i]  = (a->coeffs[2*i+0] >> 0) | (a->coeffs[2*i+1] << 4);                          
 8006cb2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  for(i = 0; i < 1152; ++i){
 8006cb6:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
    r[i]  = (a->coeffs[2*i+0] >> 0) | (a->coeffs[2*i+1] << 4);                          
 8006cba:	f800 2f01 	strb.w	r2, [r0, #1]!
  for(i = 0; i < 1152; ++i){
 8006cbe:	d1f3      	bne.n	8006ca8 <polyw1_pack+0xc>
  }

#endif
  DBENCH_STOP(*tpack);
}
 8006cc0:	f85d fb04 	ldr.w	pc, [sp], #4

08006cc4 <pack_pk>:

void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t zeta[SEEDBYTES],
             const poly *t1)
{
 8006cc4:	1c4b      	adds	r3, r1, #1
 8006cc6:	1ac3      	subs	r3, r0, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	468c      	mov	ip, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	d91a      	bls.n	8006d06 <pack_pk+0x42>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = zeta[i];
 8006cd0:	f8dc 3000 	ldr.w	r3, [ip]
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006cda:	6043      	str	r3, [r0, #4]
 8006cdc:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006ce0:	6083      	str	r3, [r0, #8]
 8006ce2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8006ce6:	60c3      	str	r3, [r0, #12]
 8006ce8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006cec:	6103      	str	r3, [r0, #16]
 8006cee:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006cf2:	6143      	str	r3, [r0, #20]
 8006cf4:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006cf8:	6183      	str	r3, [r0, #24]
 8006cfa:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006cfe:	61c3      	str	r3, [r0, #28]
  pk += SEEDBYTES;

  polyt1_pack(pk, t1);
 8006d00:	3020      	adds	r0, #32
 8006d02:	f7ff be07 	b.w	8006914 <polyt1_pack>
{
 8006d06:	b500      	push	{lr}
 8006d08:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006d0c:	f100 3eff 	add.w	lr, r0, #4294967295
 8006d10:	f10c 0c1f 	add.w	ip, ip, #31
    pk[i] = zeta[i];
 8006d14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006d18:	f80e 2f01 	strb.w	r2, [lr, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006d1c:	4563      	cmp	r3, ip
 8006d1e:	d1f9      	bne.n	8006d14 <pack_pk+0x50>
}
 8006d20:	f85d eb04 	ldr.w	lr, [sp], #4
  polyt1_pack(pk, t1);
 8006d24:	3020      	adds	r0, #32
 8006d26:	f7ff bdf5 	b.w	8006914 <polyt1_pack>
 8006d2a:	bf00      	nop

08006d2c <unpack_pk>:
               poly *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8006d2c:	f102 0c01 	add.w	ip, r2, #1
 8006d30:	eba0 0c0c 	sub.w	ip, r0, ip
 8006d34:	f1bc 0f02 	cmp.w	ip, #2
{
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	4608      	mov	r0, r1
 8006d40:	d915      	bls.n	8006d6e <unpack_pk+0x42>
    zeta[i] = pk[i];
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	6862      	ldr	r2, [r4, #4]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	68a2      	ldr	r2, [r4, #8]
 8006d4c:	609a      	str	r2, [r3, #8]
 8006d4e:	68e2      	ldr	r2, [r4, #12]
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	6922      	ldr	r2, [r4, #16]
 8006d54:	611a      	str	r2, [r3, #16]
 8006d56:	6962      	ldr	r2, [r4, #20]
 8006d58:	615a      	str	r2, [r3, #20]
 8006d5a:	69a2      	ldr	r2, [r4, #24]
 8006d5c:	619a      	str	r2, [r3, #24]
 8006d5e:	69e2      	ldr	r2, [r4, #28]
 8006d60:	61da      	str	r2, [r3, #28]
  pk += SEEDBYTES;

  polyt1_unpack(t1, pk);
 8006d62:	f104 0120 	add.w	r1, r4, #32
}
 8006d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  polyt1_unpack(t1, pk);
 8006d6a:	f7ff be21 	b.w	80069b0 <polyt1_unpack>
 8006d6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8006d72:	3b01      	subs	r3, #1
 8006d74:	321f      	adds	r2, #31
    zeta[i] = pk[i];
 8006d76:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8006d7a:	f803 ef01 	strb.w	lr, [r3, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006d7e:	4594      	cmp	ip, r2
 8006d80:	d1f9      	bne.n	8006d76 <unpack_pk+0x4a>
  polyt1_unpack(t1, pk);
 8006d82:	f104 0120 	add.w	r1, r4, #32
}
 8006d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  polyt1_unpack(t1, pk);
 8006d8a:	f7ff be11 	b.w	80069b0 <polyt1_unpack>
 8006d8e:	bf00      	nop

08006d90 <pack_sk>:
             const uint8_t tr[SEEDBYTES],
             const uint8_t key[SEEDBYTES],
             const poly *t0,
             const poly *s1,
             const poly *s2)
{
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	1c48      	adds	r0, r1, #1
 8006d96:	1a20      	subs	r0, r4, r0
 8006d98:	2802      	cmp	r0, #2
 8006d9a:	468c      	mov	ip, r1
 8006d9c:	9d06      	ldr	r5, [sp, #24]
 8006d9e:	e9dd 1607 	ldrd	r1, r6, [sp, #28]
 8006da2:	d94f      	bls.n	8006e44 <pack_sk+0xb4>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = zeta[i];
 8006da4:	f8dc 0000 	ldr.w	r0, [ip]
 8006da8:	6020      	str	r0, [r4, #0]
 8006daa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006dae:	6060      	str	r0, [r4, #4]
 8006db0:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006db4:	60a0      	str	r0, [r4, #8]
 8006db6:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8006dba:	60e0      	str	r0, [r4, #12]
 8006dbc:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8006dc0:	6120      	str	r0, [r4, #16]
 8006dc2:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8006dc6:	6160      	str	r0, [r4, #20]
 8006dc8:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8006dcc:	61a0      	str	r0, [r4, #24]
 8006dce:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8006dd2:	61e0      	str	r0, [r4, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8006dd4:	1ae0      	subs	r0, r4, r3
 8006dd6:	301f      	adds	r0, #31
 8006dd8:	2802      	cmp	r0, #2
 8006dda:	d943      	bls.n	8006e64 <pack_sk+0xd4>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	6220      	str	r0, [r4, #32]
 8006de0:	6858      	ldr	r0, [r3, #4]
 8006de2:	6260      	str	r0, [r4, #36]	@ 0x24
 8006de4:	6898      	ldr	r0, [r3, #8]
 8006de6:	62a0      	str	r0, [r4, #40]	@ 0x28
 8006de8:	68d8      	ldr	r0, [r3, #12]
 8006dea:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	6320      	str	r0, [r4, #48]	@ 0x30
 8006df0:	6958      	ldr	r0, [r3, #20]
 8006df2:	6360      	str	r0, [r4, #52]	@ 0x34
 8006df4:	6998      	ldr	r0, [r3, #24]
 8006df6:	63a0      	str	r0, [r4, #56]	@ 0x38
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	63e3      	str	r3, [r4, #60]	@ 0x3c
  for(i = 0; i < SEEDBYTES; ++i)
 8006dfc:	1aa3      	subs	r3, r4, r2
 8006dfe:	333f      	adds	r3, #63	@ 0x3f
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d93d      	bls.n	8006e80 <pack_sk+0xf0>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = tr[i];
 8006e04:	6813      	ldr	r3, [r2, #0]
 8006e06:	6423      	str	r3, [r4, #64]	@ 0x40
 8006e08:	6853      	ldr	r3, [r2, #4]
 8006e0a:	6463      	str	r3, [r4, #68]	@ 0x44
 8006e0c:	6893      	ldr	r3, [r2, #8]
 8006e0e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006e10:	68d3      	ldr	r3, [r2, #12]
 8006e12:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006e14:	6913      	ldr	r3, [r2, #16]
 8006e16:	6523      	str	r3, [r4, #80]	@ 0x50
 8006e18:	6953      	ldr	r3, [r2, #20]
 8006e1a:	6563      	str	r3, [r4, #84]	@ 0x54
 8006e1c:	6993      	ldr	r3, [r2, #24]
 8006e1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006e20:	69d3      	ldr	r3, [r2, #28]
 8006e22:	65e3      	str	r3, [r4, #92]	@ 0x5c
  sk += SEEDBYTES;

  polyeta_pack(sk, s1);
 8006e24:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8006e28:	f7ff fcdc 	bl	80067e4 <polyeta_pack>
  sk += POLYETA_PACKEDBYTES;

  polyeta_pack(sk, s2);
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	f504 7070 	add.w	r0, r4, #960	@ 0x3c0
 8006e32:	f7ff fcd7 	bl	80067e4 <polyeta_pack>
  sk += POLYETA_PACKEDBYTES;

  polyt0_pack(sk, t0);
 8006e36:	4629      	mov	r1, r5
 8006e38:	f504 60e4 	add.w	r0, r4, #1824	@ 0x720
}
 8006e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  polyt0_pack(sk, t0);
 8006e40:	f7ff be14 	b.w	8006a6c <polyt0_pack>
 8006e44:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006e48:	f104 3eff 	add.w	lr, r4, #4294967295
 8006e4c:	f10c 0c1f 	add.w	ip, ip, #31
    sk[i] = zeta[i];
 8006e50:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006e54:	f80e 7f01 	strb.w	r7, [lr, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006e58:	4560      	cmp	r0, ip
 8006e5a:	d1f9      	bne.n	8006e50 <pack_sk+0xc0>
 8006e5c:	1ae0      	subs	r0, r4, r3
 8006e5e:	301f      	adds	r0, #31
 8006e60:	2802      	cmp	r0, #2
 8006e62:	d8bb      	bhi.n	8006ddc <pack_sk+0x4c>
 8006e64:	1e58      	subs	r0, r3, #1
 8006e66:	f104 0c1f 	add.w	ip, r4, #31
 8006e6a:	331f      	adds	r3, #31
    sk[i] = key[i];
 8006e6c:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 8006e70:	f80c ef01 	strb.w	lr, [ip, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006e74:	4283      	cmp	r3, r0
 8006e76:	d1f9      	bne.n	8006e6c <pack_sk+0xdc>
 8006e78:	1aa3      	subs	r3, r4, r2
 8006e7a:	333f      	adds	r3, #63	@ 0x3f
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d8c1      	bhi.n	8006e04 <pack_sk+0x74>
 8006e80:	1e53      	subs	r3, r2, #1
 8006e82:	f104 003f 	add.w	r0, r4, #63	@ 0x3f
 8006e86:	321f      	adds	r2, #31
    sk[i] = tr[i];
 8006e88:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8006e8c:	f800 cf01 	strb.w	ip, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d1f9      	bne.n	8006e88 <pack_sk+0xf8>
 8006e94:	e7c6      	b.n	8006e24 <pack_sk+0x94>
 8006e96:	bf00      	nop

08006e98 <unpack_sk>:
               uint8_t key[SEEDBYTES],
               poly *t0,
               poly *s1,
               poly *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	e9dd 6407 	ldrd	r6, r4, [sp, #28]
 8006e9e:	4684      	mov	ip, r0
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	1c63      	adds	r3, r4, #1
 8006ea4:	ebac 0303 	sub.w	r3, ip, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	9806      	ldr	r0, [sp, #24]
 8006eac:	d951      	bls.n	8006f52 <unpack_sk+0xba>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    zeta[i] = sk[i];
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	f8cc 3000 	str.w	r3, [ip]
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	f8cc 3004 	str.w	r3, [ip, #4]
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	f8cc 3008 	str.w	r3, [ip, #8]
 8006ec0:	68e3      	ldr	r3, [r4, #12]
 8006ec2:	f8cc 300c 	str.w	r3, [ip, #12]
 8006ec6:	6923      	ldr	r3, [r4, #16]
 8006ec8:	f8cc 3010 	str.w	r3, [ip, #16]
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	f8cc 3014 	str.w	r3, [ip, #20]
 8006ed2:	69a3      	ldr	r3, [r4, #24]
 8006ed4:	f8cc 3018 	str.w	r3, [ip, #24]
 8006ed8:	69e3      	ldr	r3, [r4, #28]
 8006eda:	f8cc 301c 	str.w	r3, [ip, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8006ede:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d944      	bls.n	8006f72 <unpack_sk+0xda>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
 8006ee8:	6a23      	ldr	r3, [r4, #32]
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006eee:	6053      	str	r3, [r2, #4]
 8006ef0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ef2:	6093      	str	r3, [r2, #8]
 8006ef4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006ef6:	60d3      	str	r3, [r2, #12]
 8006ef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006efa:	6113      	str	r3, [r2, #16]
 8006efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006efe:	6153      	str	r3, [r2, #20]
 8006f00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f02:	6193      	str	r3, [r2, #24]
 8006f04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f06:	61d3      	str	r3, [r2, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8006f08:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8006f0c:	1acb      	subs	r3, r1, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d93f      	bls.n	8006f92 <unpack_sk+0xfa>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    tr[i] = sk[i];
 8006f12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f14:	600b      	str	r3, [r1, #0]
 8006f16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006f18:	604b      	str	r3, [r1, #4]
 8006f1a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f20:	60cb      	str	r3, [r1, #12]
 8006f22:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006f24:	610b      	str	r3, [r1, #16]
 8006f26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006f28:	614b      	str	r3, [r1, #20]
 8006f2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f2c:	618b      	str	r3, [r1, #24]
 8006f2e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f30:	61cb      	str	r3, [r1, #28]
  sk += SEEDBYTES;

  polyeta_unpack(s1, sk);
 8006f32:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8006f36:	f7ff fc9b 	bl	8006870 <polyeta_unpack>
  sk += POLYETA_PACKEDBYTES;

  polyeta_unpack(s2, sk);
 8006f3a:	f504 7170 	add.w	r1, r4, #960	@ 0x3c0
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff fc96 	bl	8006870 <polyeta_unpack>
  sk += POLYETA_PACKEDBYTES;

  polyt0_unpack(t0, sk);
 8006f44:	f504 61e4 	add.w	r1, r4, #1824	@ 0x720
 8006f48:	4628      	mov	r0, r5
}
 8006f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  polyt0_unpack(t0, sk);
 8006f4e:	f7ff bdfd 	b.w	8006b4c <polyt0_unpack>
 8006f52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f56:	1e63      	subs	r3, r4, #1
 8006f58:	f104 071f 	add.w	r7, r4, #31
    zeta[i] = sk[i];
 8006f5c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8006f60:	f80c ef01 	strb.w	lr, [ip, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006f64:	42bb      	cmp	r3, r7
 8006f66:	d1f9      	bne.n	8006f5c <unpack_sk+0xc4>
 8006f68:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d8ba      	bhi.n	8006ee8 <unpack_sk+0x50>
 8006f72:	3a01      	subs	r2, #1
 8006f74:	f104 031f 	add.w	r3, r4, #31
 8006f78:	f104 073f 	add.w	r7, r4, #63	@ 0x3f
    key[i] = sk[i];
 8006f7c:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8006f80:	f802 cf01 	strb.w	ip, [r2, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006f84:	429f      	cmp	r7, r3
 8006f86:	d1f9      	bne.n	8006f7c <unpack_sk+0xe4>
 8006f88:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8006f8c:	1acb      	subs	r3, r1, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d8bf      	bhi.n	8006f12 <unpack_sk+0x7a>
 8006f92:	3901      	subs	r1, #1
 8006f94:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 8006f98:	f104 075f 	add.w	r7, r4, #95	@ 0x5f
    tr[i] = sk[i];
 8006f9c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006fa0:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8006fa4:	42bb      	cmp	r3, r7
 8006fa6:	d1f9      	bne.n	8006f9c <unpack_sk+0x104>
 8006fa8:	e7c3      	b.n	8006f32 <unpack_sk+0x9a>
 8006faa:	bf00      	nop

08006fac <pack_sig>:

void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const poly *z,
              const poly *h)
{
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	4605      	mov	r5, r0
  unsigned int i;

  for(i=0; i < SEEDBYTES; ++i)
 8006fb2:	1c48      	adds	r0, r1, #1
 8006fb4:	1a28      	subs	r0, r5, r0
 8006fb6:	2802      	cmp	r0, #2
{
 8006fb8:	4616      	mov	r6, r2
 8006fba:	d966      	bls.n	800708a <pack_sig+0xde>
    sig[i] = c[i];
 8006fbc:	680a      	ldr	r2, [r1, #0]
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	684a      	ldr	r2, [r1, #4]
 8006fc2:	606a      	str	r2, [r5, #4]
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	60aa      	str	r2, [r5, #8]
 8006fc8:	68ca      	ldr	r2, [r1, #12]
 8006fca:	60ea      	str	r2, [r5, #12]
 8006fcc:	690a      	ldr	r2, [r1, #16]
 8006fce:	612a      	str	r2, [r5, #16]
 8006fd0:	694a      	ldr	r2, [r1, #20]
 8006fd2:	616a      	str	r2, [r5, #20]
 8006fd4:	698a      	ldr	r2, [r1, #24]
 8006fd6:	61aa      	str	r2, [r5, #24]
 8006fd8:	69ca      	ldr	r2, [r1, #28]
 8006fda:	61ea      	str	r2, [r5, #28]
  sig += SEEDBYTES;
 8006fdc:	f105 0020 	add.w	r0, r5, #32
	for (i = 0; i < 1152; ++i)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	1d37      	adds	r7, r6, #4
		t[0] = GAMMA1 - a->coeffs[2 * i + 0];
 8006fe4:	f856 4032 	ldr.w	r4, [r6, r2, lsl #3]
		t[1] = GAMMA1 - a->coeffs[2 * i + 1];
 8006fe8:	f857 1032 	ldr.w	r1, [r7, r2, lsl #3]
		t[0] = GAMMA1 - a->coeffs[2 * i + 0];
 8006fec:	f5c4 2e00 	rsb	lr, r4, #524288	@ 0x80000
		t[1] = GAMMA1 - a->coeffs[2 * i + 1];
 8006ff0:	f5c1 2100 	rsb	r1, r1, #524288	@ 0x80000
		r[5 * i + 0] = (t[0] >> 0);
 8006ff4:	f04f 0c00 	mov.w	ip, #0
		r[5 * i + 2] = (t[0] >> 16) | (t[1] << 4);
 8006ff8:	010c      	lsls	r4, r1, #4
		r[5 * i + 0] = (t[0] >> 0);
 8006ffa:	f36e 0c07 	bfi	ip, lr, #0, #8
		r[5 * i + 1] = (t[0] >> 8);
 8006ffe:	ea4f 281e 	mov.w	r8, lr, lsr #8
		r[5 * i + 0] = (t[0] >> 0);
 8007002:	f368 2c0f 	bfi	ip, r8, #8, #8
		r[5 * i + 2] = (t[0] >> 16) | (t[1] << 4);
 8007006:	ea44 4e1e 	orr.w	lr, r4, lr, lsr #16
		r[5 * i + 0] = (t[0] >> 0);
 800700a:	f36e 4c17 	bfi	ip, lr, #16, #8
		r[5 * i + 3] = (t[1] >> 4);
 800700e:	090c      	lsrs	r4, r1, #4
	for (i = 0; i < 1152; ++i)
 8007010:	3201      	adds	r2, #1
		r[5 * i + 0] = (t[0] >> 0);
 8007012:	f364 6c1f 	bfi	ip, r4, #24, #8
		r[5 * i + 4] = (t[1] >> 12);
 8007016:	0b09      	lsrs	r1, r1, #12
	for (i = 0; i < 1152; ++i)
 8007018:	f5b2 6f90 	cmp.w	r2, #1152	@ 0x480
		r[5 * i + 0] = (t[0] >> 0);
 800701c:	f8c0 c000 	str.w	ip, [r0]
		r[5 * i + 4] = (t[1] >> 12);
 8007020:	7101      	strb	r1, [r0, #4]
	for (i = 0; i < 1152; ++i)
 8007022:	f100 0005 	add.w	r0, r0, #5
 8007026:	d1dd      	bne.n	8006fe4 <pack_sig+0x38>
 8007028:	f505 51b4 	add.w	r1, r5, #5760	@ 0x1680
 800702c:	f505 50bd 	add.w	r0, r5, #6048	@ 0x17a0
 8007030:	311f      	adds	r1, #31
 8007032:	301f      	adds	r0, #31
  sig += POLYZ_PACKEDBYTES;

  /* Encode h */
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
  {
	  sig[i]  = (h->coeffs[8 * i + 0] << 0);
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	f801 2f01 	strb.w	r2, [r1, #1]!
	  sig[i] |= (h->coeffs[8 * i + 1] << 1);
 800703a:	685c      	ldr	r4, [r3, #4]
 800703c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 2] << 2);
 8007044:	689c      	ldr	r4, [r3, #8]
 8007046:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 3] << 3);
 800704e:	68dc      	ldr	r4, [r3, #12]
 8007050:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 4] << 4);
 8007058:	691c      	ldr	r4, [r3, #16]
 800705a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 5] << 5);
 8007062:	695c      	ldr	r4, [r3, #20]
 8007064:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 6] << 6);
 800706c:	699c      	ldr	r4, [r3, #24]
 800706e:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	700a      	strb	r2, [r1, #0]
	  sig[i] |= (h->coeffs[8 * i + 7] << 7);
 8007076:	69dc      	ldr	r4, [r3, #28]
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 8007078:	4288      	cmp	r0, r1
	  sig[i] |= (h->coeffs[8 * i + 7] << 7);
 800707a:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 800707e:	f103 0320 	add.w	r3, r3, #32
	  sig[i] |= (h->coeffs[8 * i + 7] << 7);
 8007082:	700a      	strb	r2, [r1, #0]
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 8007084:	d1d6      	bne.n	8007034 <pack_sig+0x88>
  }
}
 8007086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800708a:	1e4a      	subs	r2, r1, #1
 800708c:	1e68      	subs	r0, r5, #1
 800708e:	311f      	adds	r1, #31
    sig[i] = c[i];
 8007090:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8007094:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i=0; i < SEEDBYTES; ++i)
 8007098:	428a      	cmp	r2, r1
 800709a:	d1f9      	bne.n	8007090 <pack_sig+0xe4>
 800709c:	e79e      	b.n	8006fdc <pack_sig+0x30>
 800709e:	bf00      	nop

080070a0 <unpack_sig>:

int unpack_sig(uint8_t c[SEEDBYTES],
               poly *z,
               poly *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	461c      	mov	r4, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	1ac3      	subs	r3, r0, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	4684      	mov	ip, r0
 80070ac:	4615      	mov	r5, r2
 80070ae:	4608      	mov	r0, r1
 80070b0:	d94f      	bls.n	8007152 <unpack_sig+0xb2>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    c[i] = sig[i];
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f8cc 3000 	str.w	r3, [ip]
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	f8cc 3004 	str.w	r3, [ip, #4]
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	f8cc 3008 	str.w	r3, [ip, #8]
 80070c4:	68e3      	ldr	r3, [r4, #12]
 80070c6:	f8cc 300c 	str.w	r3, [ip, #12]
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	f8cc 3010 	str.w	r3, [ip, #16]
 80070d0:	6963      	ldr	r3, [r4, #20]
 80070d2:	f8cc 3014 	str.w	r3, [ip, #20]
 80070d6:	69a3      	ldr	r3, [r4, #24]
 80070d8:	f8cc 3018 	str.w	r3, [ip, #24]
 80070dc:	69e3      	ldr	r3, [r4, #28]
 80070de:	f8cc 301c 	str.w	r3, [ip, #28]
  sig += SEEDBYTES;

  polyz_unpack(z, sig);
 80070e2:	f104 0120 	add.w	r1, r4, #32
 80070e6:	f7ff fdb1 	bl	8006c4c <polyz_unpack>
  sig += POLYZ_PACKEDBYTES;

  /* Decode h */
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 80070ea:	f504 53b4 	add.w	r3, r4, #5760	@ 0x1680
 80070ee:	462a      	mov	r2, r5
 80070f0:	331f      	adds	r3, #31
 80070f2:	f505 5010 	add.w	r0, r5, #9216	@ 0x2400
  {
	  h->coeffs[8 * i + 0] = (sig[i] >> 0) & 0x1;
 80070f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 80070fa:	3220      	adds	r2, #32
	  h->coeffs[8 * i + 0] = (sig[i] >> 0) & 0x1;
 80070fc:	f001 0101 	and.w	r1, r1, #1
 8007100:	f842 1c20 	str.w	r1, [r2, #-32]
	  h->coeffs[8 * i + 1] = (sig[i] >> 1) & 0x1;
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800710a:	f842 1c1c 	str.w	r1, [r2, #-28]
	  h->coeffs[8 * i + 2] = (sig[i] >> 2) & 0x1;
 800710e:	7819      	ldrb	r1, [r3, #0]
 8007110:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007114:	f842 1c18 	str.w	r1, [r2, #-24]
	  h->coeffs[8 * i + 3] = (sig[i] >> 3) & 0x1;
 8007118:	7819      	ldrb	r1, [r3, #0]
 800711a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800711e:	f842 1c14 	str.w	r1, [r2, #-20]
	  h->coeffs[8 * i + 4] = (sig[i] >> 4) & 0x1;
 8007122:	7819      	ldrb	r1, [r3, #0]
 8007124:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8007128:	f842 1c10 	str.w	r1, [r2, #-16]
	  h->coeffs[8 * i + 5] = (sig[i] >> 5) & 0x1;
 800712c:	7819      	ldrb	r1, [r3, #0]
 800712e:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8007132:	f842 1c0c 	str.w	r1, [r2, #-12]
	  h->coeffs[8 * i + 6] = (sig[i] >> 6) & 0x1;
 8007136:	7819      	ldrb	r1, [r3, #0]
 8007138:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800713c:	f842 1c08 	str.w	r1, [r2, #-8]
	  h->coeffs[8 * i + 7] = (sig[i] >> 7) & 0x1;
 8007140:	7819      	ldrb	r1, [r3, #0]
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 8007142:	4282      	cmp	r2, r0
	  h->coeffs[8 * i + 7] = (sig[i] >> 7) & 0x1;
 8007144:	ea4f 11d1 	mov.w	r1, r1, lsr #7
 8007148:	f842 1c04 	str.w	r1, [r2, #-4]
  for (i = 0; i < POLYH_PACKEDBYTES; i++)
 800714c:	d1d3      	bne.n	80070f6 <unpack_sig+0x56>
  }

  return 0;
}
 800714e:	2000      	movs	r0, #0
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	f104 3eff 	add.w	lr, r4, #4294967295
 8007156:	f10c 3cff 	add.w	ip, ip, #4294967295
 800715a:	f104 011f 	add.w	r1, r4, #31
    c[i] = sig[i];
 800715e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8007162:	f80c 3f01 	strb.w	r3, [ip, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8007166:	4571      	cmp	r1, lr
 8007168:	d1f9      	bne.n	800715e <unpack_sig+0xbe>
 800716a:	e7ba      	b.n	80070e2 <unpack_sig+0x42>

0800716c <ntt>:
int32_t merging_zetas_inv_radix3[] = {2464829, 2271677, 4350612, 1814060, 1939669, 8186128, 314137, 2912272, 1900577, 4534509, 5904510, 4163563, 1282920, 533826, 3861250, 5005777, 2272455, 7871167, 5171, 4315644, 5589833, 6133316, 3982608, 7918049, 95719, 6435240, 7220026, 2347886, 5626630, 3870484, 2654400, 5492721, 381949, 6273668, 6793207, 457832, 2353594, 5074975, 4429564, 6080505, 6325147, 3310759, 5478527, 3915945, 8353976, 3219804, 1022118, 5989962, 5770663, 5185189, 4916655, 8385734, 870345, 2131325, 6144348, 3665474, 2109110, 1784620, 1392640, 3677636, 896483, 5094234, 7998805, 2324488, 5027996, 4668464, 5859631, 2905760, 3364627, 2634625, 4884425, 3920084, 7211174, 7036900, 54531, 2192083, 8080628, 5811362, 6413093, 7485516, 8056564, 2593631, 2308834, 1266532, 3784661, 3736529, 4949529, 3000607, 7294528, 6860547, 3356541, 312129, 8222125, 1368093, 1150270, 4484909, 2661757, 11870, 5324446, 435993, 2716628, 4321672, 6906161, 6717052, 152225, 447433, 367196, 7078558, 7832421, 4828241, 5141860, 7787269, 5113633, 3576752, 4232317, 4769105, 3361268, 8393123, 2042885, 6099328, 4481427, 7090428, 6796318, 5264234, 3688063, 7957560, 2366377, 1687941, 4417675, 789821, 1406511, 8319640, 1772678, 3239835, 3557943, 3474471, 5279069, 4775680, 848264, 7795544, 7734185, 5859416, 7585393, 5948592, 2039821, 2545577, 7560401, 8015515, 7619603, 7615172, 4879722, 1018070, 8386286, 180372, 7853498, 5774063, 3686733, 3629313, 2943865, 4930522, 3675238, 1379127, 8291926, 1857019, 7716711, 3037922, 1613754, 1059493, 692999, 4007567, 3372081, 6194277, 4092037, 3809026, 718176, 1126554, 8225795, 4595967, 317605, 7045489, 2041022, 7025866, 2762178, 2186047, 4060268, 7573404, 3219729, 5666045, 3038166, 4397426, 8020815, 7345500, 4260335, 8028382, 7201589, 7693381, 6204090, 3270288, 5550621, 6684114, 169391, 3074810, 3969814, 8298717, 5406836, 6651157, 6841511, 1668062, 997291, 1753836, 1266753, 6345098, 4816104, 376611, 2894875, 8352176, 965861, 7922106, 1214956, 5939545, 2252566, 5330183, 7568212, 1720879, 8202130, 1431440, 3004946, 5525361, 3207541, 946412, 2785171, 2769322, 8364969, 4993111, 1992100, 2150546, 3673436, 2541662, 6150636, 1762506, 64503, 5863331, 4950070, 5939523, 1595299, 6973553, 6680549, 4531828, 500835, 3581986, 7375821, 8067023, 5045022, 3411882, 7327274, 5635671, 895337, 2331060, 506665, 1528970, 3424947, 419475, 1951098, 6158940, 3769452, 3641049, 7506945, 1885976, 453984, 6185432, 894087, 1866609, 5704375, 2219561, 440987, 4060524, 1188585, 6073933, 4634377, 8025549, 6267765, 4217036, 6800749, 7714402, 5872427, 4763944, 8019193, 2246053, 2810040, 2084296, 6018885, 6134076, 903145, 4834469, 4151445, 2308598, 5030915, 5345923, 1721847, 4869211, 5377306, 4942479, 3502978, 2023942, 2972725, 3462514, 3972, 1775399, 4467637, 6320697, 968824, 4332540, 237691, 6953507, 5029038, 2671562, 1500272, 3059070, 264222, 6096395, 6077734, 3007582, 7115744, 5481009, 2603546, 2413090, 5952899, 7972448, 218750, 7069678, 697451, 7214046, 507868, 8255511, 6574256, 8261352, 674355, 149482, 4484841, 1077775, 6129117, 5397411, 4317154, 7828807, 5305236, 1816635, 3019244, 5331527, 2289253, 1335315, 3940319, 432545, 1567076, 4696166, 7127620, 2760594, 4009955, 75450, 157050, 3788961, 2766170, 5197781, 6871858, 3791089, 7625955, 6363238, 1144927, 1316798, 2910037, 2041755, 7779373, 5273231, 1774201, 3708827, 2178601, 5105759, 8065641, 82262, 1817568, 718839, 7313662, 3207212, 421707, 4616032, 2451650, 3015634, 7613071, 762092, 6829268, 4368947, 2471360, 1888100, 7344113, 8051541, 8188964, 2299407, 5543522, 1869603, 6593856, 5572126, 5059624, 6535390, 3937664, 4015495, 7947821, 5389359, 533274, 7460226, 177974, 5315041, 5771123, 2631695, 8396540, 353452, 4046305, 6516893, 5748567, 3946092, 6226430, 2289957, 976425, 5572756, 4351720, 2748229, 693664, 7388898, 3195343, 6880487, 2555131, 1561442, 3588951, 1205804, 8274913, 6843551, 3353002, 4556661, 2918981, 4458901, 7133391, 3954033, 4697693, 2421586, 5512376, 3851399, 5601588, 1016095, 7613492, 5656764, 3091737, 4352011, 3915096, 560295, 3859759, 7413130, 437663, 6615176, 2983411, 4209424, 1726649, 4780898, 2420073, 6175918, 7359327, 6135708, 174133, 2229075, 8232807, 3217561, 375157, 4052982, 3684852, 4345891, 991639, 727916, 5650605, 6736213, 7527237, 4195569, 62725, 1789817, 6435538, 5137886, 7118156, 6409638, 1482220, 736241, 6466997, 4230204, 4756030, 3069701, 2735629, 5596643, 3221793, 5807867, 6272327, 5126435, 174400, 2597126, 477281, 3805942, 2589239, 3267107, 151844, 951646, 3119881, 2329536, 2678934, 3812512, 5081858, 5335292, 5162778, 4174789, 4593587, 3885835, 8205940, 2913982, 6795210, 8139648, 6547840, 1127008, 7418556, 5873073, 2092273, 7931618, 2745579, 4481889, 7724559, 5509692, 6918050, 3923104, 8077002, 5607728, 2160136, 4519158, 8099460, 6636700, 7011568, 3412460, 5315714, 7395871, 7919056, 2531920, 2181784, 7277985, 4717052, 3883437, 6611016, 5536459, 584941, 7855704, 7065598, 3514420, 706342, 3628681, 3908318, 8086293, 7582299, 458872, 7484634, 6557861, 2537893, 7946121, 1982417, 3079392, 8168042, 4521556, 4588604, 1667288, 6422738, 3564737, 914324, 5995331, 983744, 4776312, 133956, 4890573, 1894809, 5819845, 5756481, 4608494, 1961831, 3485804, 658962, 6505330, 3421193, 6974472, 6168458, 3763800, 6057592, 3165117, 3502520, 6975046, 4298993, 5239876, 8214102, 2055283, 2944985, 2585148, 4625077, 5075383, 2519493, 1178652, 5671898, 7773611, 1147738, 1430521, 7172708, 1899663, 5326987, 2595432, 5403300, 4270537, 1211043, 6690694, 1543152, 5734035, 3622502, 6141750, 6938518, 1608477, 4318191, 7505496, 3049450, 6116147, 2686639, 899497, 6636229, 4427451, 1568611, 5809561, 2896708, 3445189, 5831477, 4203909, 5804160, 3371040, 7540957, 2263243, 3410547, 2670958, 2354428, 6493102, 3914354, 1065881, 5737960, 5990095, 6208098, 6237621, 8013322, 4066565, 8278041, 1048190, 1801241, 2551138, 7700925, 7282022, 5840661, 5853855, 1318, 1651667, 6133565, 1911891, 4154213, 5114650, 7218460, 7541292, 7483684, 3617019, 3274096, 4338428, 2254675, 2167372, 6620121, 624194, 1767232, 8280989, 2920976, 4447869, 2033326, 3522244, 8110560, 45645, 3327370, 5100172, 7810093, 5629084, 7330106, 592408, 2368070, 2775909, 4611268, 4493514, 4467406, 7780799, 1967458, 4114652, 5504828, 5724366, 1123779, 5505080, 6552967, 8359348, 6269352, 4882749, 3397834, 6102195, 7333617, 2340044, 412224, 5892222, 7231488, 2170880, 8061699, 2775993, 2144811, 5095641, 6072751, 4068434, 1752194, 6084101, 4016976, 4336559, 6800798, 263222, 2497407, 2302798, 5408457, 8254981, 505285, 2792843, 1390285, 6408478, 2723088, 5629000, 7078619, 6234113, 1049030, 7437456, 5766847, 3744266, 167415, 623588, 1203031, 4122970, 5874020, 5474186, 5784151, 2433674, 611502, 4048985, 8282850, 3995724, 2366396, 4356008, 6016740, 6097774, 2673938, 967537, 6650272, 8118694, 3588481, 1466137, 1811911, 7793251, 8096703, 2930807, 834406, 4282023, 7367899, 519065, 5229322, 1841386, 3743461, 1743587, 3638382, 5191998, 1061958, 7333661, 1610526, 3865230, 6386271, 3201575, 4373588, 38378, 7937146, 5203418, 3548609, 672255, 5684755, 7885928, 4423591, 5230376, 5279006, 4384295, 7589002, 5042961, 978845, 1071332, 2905059, 3212995, 5870687, 509260, 2587542, 1498944, 5837260, 715780, 7290660, 3376792, 4225794, 6337410, 5815323, 7704745, 1452296, 7883819, 5565476, 2627822, 5070150, 521174, 8104291, 7053190, 7154775, 7895733, 7639276, 6004614, 1824523, 8214005, 6665935, 977770, 637742, 2067583, 4471806, 5028201, 2537991, 6905721, 3637370, 7739477, 4668027, 8301347, 1982674, 376345, 6826138, 1507849, 4167752, 1811141, 2510101, 6173449, 767639, 4483655, 6551063, 2231544, 2830604, 1404203, 793704, 1499272, 708975, 4860000, 6527496, 311869, 7172898, 5507933, 6865201, 6897144, 2916807, 8028648, 988967, 5838453, 4439605, 8316926, 1581710, 1195741, 5186522, 6370499, 2894488, 107856, 2066004, 8276705, 1081993, 7359364, 8003572, 526760, 8368587, 1045629, 310111, 1303597, 6193997, 2566540, 8386746, 6897259, 6062213, 5710165, 3075932, 7271297, 2112047, 8297137, 6938462, 2034494, 6568929, 2953483, 6247182, 7621356, 3385844, 1187691, 5021465, 2727360, 479648, 795378, 2680586, 5828065, 2961805, 1093831, 7770178, 4483145, 6635754, 7311162, 4096279, 1983069, 4215311, 5451510, 6856973, 7210505, 6078801, 376555, 3950454, 310194, 6950031, 7609615, 5328189, 5677633, 4337644, 1374539, 2504481, 3790101, 1736951, 5284644, 6532576, 1574520, 6041494, 4746641, 5940881, 4660600, 982111, 6570868, 4600007, 3191301, 3626545, 1834125, 340723, 1626292, 7183623, 7030454, 4984262, 4765821, 3348787, 6035139, 1637781, 1955976, 343384, 3658352, 167912, 6830473, 3195651, 1162358, 4154272, 840575, 2490560, 7716893, 4496549, 3339816, 8247820, 6145620, 1668269, 5935419, 1125823, 6372467, 227895, 3113125, 2268660, 2032526, 7017340, 5457520, 3301396, 7242635, 5147187, 6452941, 255063, 7097777, 2333198, 7213042, 3553115, 2259373, 4581463, 5065177, 1173116, 3120509, 2566023, 4780621, 4111973, 888371, 7069324, 2265359, 3261819, 7795168, 6260406, 7967034, 7315705, 4999598, 7850887, 259933, 7492045, 3405395, 3213265, 278546, 913830, 5284484, 7073645, 2525292, 7616321, 2682550, 2363371, 1375226, 4419272, 609825, 3955830, 6139634, 5949954, 7467500, 2653192, 575205, 6400065, 823267, 4040621, 7126946, 490026, 2532345, 2804122, 818246, 7111435, 7653679, 8129046, 2995310, 3888624, 751314, 569126, 3355612, 6996581, 937493, 561663, 1717263, 5283241, 8285746, 6463460, 8228884, 4019854, 5872648, 4637472, 1278047, 1755205, 3496090, 5396981, 8315072, 2650310, 2914854, 4551327, 2735042, 3221086, 2592676, 7000082, 6127876, 7407794, 7219580, 6198884, 664902, 7491541, 1185413, 6709211, 5507530, 5706061, 4908903, 5976856, 3399944, 7943119, 1218973, 40015, 7129659, 4974429, 5812317, 6346292, 5669951, 5669300, 5096072, 6160780, 6257384, 413620, 5003254, 7097227, 284068, 4429432, 1935392, 6206544, 6197725, 5300985, 4510640, 6201675, 3646488, 1051446, 3894353, 2483174, 6938646, 3077175, 3308921, 3534051, 3930556, 1238975, 2888804, 5714851, 2363031, 2219476, 6469601, 6712164, 8120925, 2836572, 950939, 2089292, 5154271, 2577273, 3488737, 5837469, 6280616, 2235894, 3259656, 6360043, 2317176, 1967591, 4066608, 1174089, 2318147, 914530, 4338385, 3090279, 6748393, 6223732, 7454054, 7835433, 193770, 4899274, 3268115, 2127721, 815886, 3410505, 5145337, 7987800, 2124377, 5183998, 5082060, 4742723, 3074642, 7953248, 7094463, 7277837, 4452082, 4583311, 3738240, 7575010, 6057032, 374951, 2496004, 3887702, 7919340, 4088045, 5908989, 4962817, 2427710, 4931505, 3322933, 6388949, 3966429, 2818941, 2734099, 8215964, 5570646, 769120, 4666753, 7898754, 3952911, 6156769, 285441, 6522625, 2177869, 7506900, 7784571, 1908653, 332874, 5305231, 7947725, 7823426, 168591, 4955017, 3274433, 5548711, 4452061, 407967, 5130560, 7562931, 7327303, 5746488, 8119552, 5472635, 4784935, 7932492, 454032, 2143940, 5452302, 4142954, 457268, 3150419, 8072119, 720722, 476767, 4889378, 4223300, 6198651, 8189481, 2894702, 8066679, 4224353, 7288556, 5237729, 5037301, 8233115, 1323693, 8171543, 6897522, 2448537, 7081300, 3157279, 7073044, 4026319, 7928226, 642322, 6559208, 190494, 5514068, 3644378, 5546993, 6887926, 1116437, 8043159, 338314, 1153340, 4328392, 2058495, 7459760, 2837528, 326314, 3170047, 2042027, 6078806, 3042257, 7551265, 987276, 4284267, 7170841, 6911327, 4774106, 290431, 1234152, 4220099, 3368571, 6128178, 4076601, 7324321, 6816133, 5430434, 5315668, 3845450, 6225608, 3398406, 5362736, 2443041, 6362966, 2888055, 7084835, 2094713, 5096328, 3297810, 888158, 5140808, 500603, 5575682, 4574566, 4145792, 6430065, 5945015, 4575922, 7394476, 2826879, 1223069, 3829071, 1777361, 5462724, 5271973, 1320158, 1204573, 3327482, 8194029, 5109907, 5398103, 1267257, 5473969, 3830427, 6986220, 7904390, 5332655, 3737833, 775053, 2839405, 3417454, 3373132, 305524, 1160638, 3282636, 2462383, 5050410, 6619500, 4945626, 1171142, 1979224, 809890, 6413332, 7233851, 4855026, 5835515, 1400157, 4667160, 4633305, 1970528, 6146867, 1952340, 1229586, 4010547, 6769323, 5942610, 5879116, 7244355, 6393823, 7945547, 4996965, 3167354, 2339794, 471908, 1690967, 4915437, 2687103, 7079287, 7953767, 6151525, 1292506, 1135517, 2246699, 7176255, 6258634, 7269476, 7066224, 7551195, 2556701, 459446, 2482432, 3686699, 1792226, 5692079, 2521994, 4302871, 4767061, 1325706, 1600644, 3489556, 159577, 456826, 1535099, 6869137, 6500772, 1250762, 8253804, 2190915, 2825359, 5624167, 5789815, 1384982, 6550595, 6904771, 7662488, 7367986, 406171, 1500222, 3477546, 6874929, 76719, 7948167, 2089037, 1153908, 3627118, 1841808, 7873001, 5368915, 2585818, 2780826, 4994580, 6214078, 7171632, 6773664, 6241097, 3991427, 200210, 4567637, 8318036, 345586, 7418037, 8267993, 3190779, 2544430, 7130109, 4296289, 3983219, 1402935, 8067790, 4108704, 6289421, 4430637, 8009340, 1631329, 7383307, 1748521, 1016086, 913101, 4676572, 8287716, 2960884, 137000, 5398894, 8059407, 2600386, 6722545, 5065261, 5880107, 5561365, 1318705, 6985765, 6340538, 2423427, 4803834, 7429373, 3686115, 2339278, 1334881, 5085005, 1123889, 1204287, 7070112, 6048652, 6122539, 6920201, 1682448, 5042866, 7464427, 4296225, 2003667, 64479, 7214988, 1114166, 3601159, 4164473, 2064455, 6357485, 936471, 2167149, 4706406, 4218374, 6521372, 4933087, 361211, 4569434, 7825265, 5739839, 74855, 861518, 6158913, 6603656, 7576844, 3088345, 2246080, 5296878, 5941644, 3559563, 7468522, 7046327, 7938055, 5316226, 1011326, 98416, 2460326, 1220102, 579728, 4099298, 8043782, 2695898, 390337, 4415594, 43185, 2199724, 5477152, 6449055, 1257674, 1061927, 2642775, 7862474, 1730507, 1061026, 1515132, 4810963, 8171341, 2386297, 6889861, 4089620, 8119927, 4544227, 8014656, 1205793, 1024022, 256852, 2120844, 8101442, 1558317, 2868962, 5762218, 7006888, 7147319, 4822348, 1556014, 3601184, 8165137, 3718955, 1291499, 523805, 738616, 7542783, 6945729, 4617399, 7553490, 3798532, 4002748, 1019926, 5739205, 775088, 4402245, 3408152, 8237228, 6272386, 6848979, 5915709, 6477821, 7595908, 704511, 3706138, 3762892, 4882442, 1459264, 432750, 7666377, 6184712, 7852813, 6780739, 3028286, 1584807, 6203244, 5777692, 6210202, 4030085, 6270213, 3556943, 1807289, 1308532, 7378744, 4377683, 8388148, 4884289, 1026249, 2508166, 4068464, 7961863, 552180, 4233387, 6193357, 8304009, 1255109, 182827, 2002037, 2560193, 2134780, 3017256, 2194791, 3190534, 170608, 7195223, 5425338, 5734707, 489340, 6717711, 2610921, 7596703, 7968938, 4695563, 1837824, 1275616, 8029437, 7736376, 1552256, 2672259, 375556, 5655169, 53285, 2952259, 8234385, 5869587, 4163177, 8218140, 2008432, 1151372, 5049782, 6904101, 436055, 6347835, 5794072, 2490863, 7251227, 4875941, 712751, 1845114, 6395159, 1176741, 3722818, 2030009, 5499146, 8247009, 43705, 923239, 5602465, 7561898, 455315, 874428, 2802528, 1020684, 3489312, 2734127, 1153766, 5899177, 4178133, 7754677, 7294932, 4975695, 6315216, 6792039, 2905847, 5471251, 4682175, 1968406, 1707967, 7329055, 8044247, 8108525, 4647167, 5449879, 4288762, 7564399, 3062647, 2234481, 6062626, 7456006, 7173753, 1910632, 3249057, 4760469, 1231240, 595299, 7709814, 1721544, 6697026, 1957313, 7537819, 4020, 7770593, 3734452, 6813007, 8403952, 5342346, 2928390, 4116231, 122290, 2973376, 1118784, 7032873, 6679782, 4244195, 7314433, 753361, 1487418, 3192952, 6205316, 854167, 5147067, 7889000, 7290967, 2254012, 2645777, 515993, 3567907, 7437147, 8240463, 5431617, 1615887, 3007373, 7445307, 3827543, 7950325, 6516880, 286150, 5212041, 6348454, 7651632, 1682318, 7814418, 2434996, 7272087, 4594806, 7356075, 577673, 5266195, 3887307, 8069514, 198719, 8360147, 1458408, 927381, 5597631, 7201097, 316758, 7477612, 3947129, 7020596, 7833721, 590575, 3918781, 4062299, 2134627, 7769572, 6137798, 8199468, 5801151, 335479, 3998155, 3138798, 6080344, 6085359, 4020654, 5330058, 6303576, 7915425, 2278413, 693033, 3929613, 1487097, 4324123, 3146260, 1535266, 5959433, 1065441, 4378748, 2986542, 2445560, 654376, 997529, 2350266, 2319634, 1502833, 5071781, 2051694, 826626, 82329, 2884498, 4775139, 6917896, 3496258, 7711960, 688220, 2387596, 4402060, 4550163, 1954392, 7709678, 4816015, 6844641, 2685500, 1583099, 6698800, 7499523, 308157, 4687868, 4840800, 6073363, 4724656, 3717125, 6030946, 887784, 1059673, 6017397, 4245121, 4513011, 6448849, 1482126, 8143183, 833038, 3542387, 6821894, 3877418, 1560352, 2966254, 5719616, 7967488, 8077987, 3409280, 2756715, 4928233, 4729155, 1731939, 4555215, 4616282, 5500491, 4575684, 5782587, 1037511, 5942850, 1356060, 2622406, 7016262, 7311930, 1906899, 2685377, 6894862, 2267012, 7245500, 2815114, 6300791, 5455581, 1385379, 3849778, 2084479, 3675838, 1982341, 6053228, 7227670, 1643945, 233076, 7195237, 7149337, 3007404, 1630666, 4263175, 3435061, 4948878, 6565165, 2368989, 2675293, 790345, 6236896, 6036004, 3958285, 3053419, 3427919, 2351765, 3206900, 3797749, 4080321, 2597113, 3173353, 4012934, 1195165, 4141818, 1693494, 5397589, 6392363, 1261986, 4184278, 1768178, 7483526, 1687276, 7669702, 2708046, 965528, 7764035, 6826739, 27987, 4968594, 7601153, 1845714, 7923061, 1004253, 803840, 7341160, 1046318, 1289222, 7143007, 561790, 2226114, 6124052, 1289973, 2490308, 964338, 220591, 640958, 6623753, 5696947, 4307141, 2795100, 7729595, 6677606, 2516353, 7641739, 7060028, 5326383, 37923, 5186657, 1207855, 5700774, 1978525, 8095411, 4221177, 1629460, 5480542, 309582, 5417020, 4423403, 5969652, 5609893, 4189694, 6955843, 4815956, 90881, 4579567, 6368024, 5928489, 3218336, 1918808, 3078610, 4831078, 5967779, 3682426, 593495, 5661133, 7655428, 7301990, 3087154, 4883958, 5120096, 2836279, 1960853, 2887591, 2295982, 1761601, 4128440, 3581890, 6109011, 7405893, 4370531, 3776738, 2437214, 8103639, 7215594, 5987846, 7928632, 1708002, 2889477, 3053345, 3284897, 433795, 5317839, 6713958, 3876720, 5164872, 4515800, 1661017, 7235603, 2338364, 2776396, 197274, 5894153, 3043161, 6546235, 6258932, 4608563, 7068951, 745421, 8200884, 3796430, 8379093, 4724763, 6883480, 4528273, 1525979, 3521817, 6838166, 2017962, 7454905, 719370, 1076883, 2510840, 6533880, 5628597, 8265246, 5131280, 7603213, 1681972, 2965391, 7517826, 7205603, 2837987, 926563, 6266243, 1573250, 365669, 2124750, 8128402, 7100721, 239145, 4698559, 276591, 3841362, 5379076, 2803881, 3273713, 3283020, 3077132, 56522, 5496949, 1307768, 1405381, 7123335, 2138750, 5187630, 5567006};
#endif

void ntt(int32_t * Out, int32_t * A){

	if(Out!=A){
 800716c:	4288      	cmp	r0, r1
void ntt(int32_t * Out, int32_t * A){
 800716e:	b510      	push	{r4, lr}
 8007170:	4604      	mov	r4, r0
	if(Out!=A){
 8007172:	d003      	beq.n	800717c <ntt+0x10>
		memcpy(Out,A,sizeof(int32_t)*N);
 8007174:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 8007178:	f003 fd05 	bl	800ab86 <memcpy>
#if NIMS_TRI_NTT_MODE == 3
	asm_ntt_3(Out, merging_zetas);
#endif

#if NIMS_TRI_NTT_MODE == 5
	asm_ntt_5(Out, merging_zetas);
 800717c:	4620      	mov	r0, r4
 800717e:	4904      	ldr	r1, [pc, #16]	@ (8007190 <ntt+0x24>)
 8007180:	f7fd fefe 	bl	8004f80 <asm_ntt_5>
	asm_ntt_5_radix3(Out, merging_zetas_radix3);
 8007184:	4620      	mov	r0, r4
 8007186:	4903      	ldr	r1, [pc, #12]	@ (8007194 <ntt+0x28>)

#endif


}
 8007188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	asm_ntt_5_radix3(Out, merging_zetas_radix3);
 800718c:	f7fe ba8e 	b.w	80056ac <asm_ntt_5_radix3>
 8007190:	20004400 	.word	0x20004400
 8007194:	20002400 	.word	0x20002400

08007198 <invntt_tomont>:
void invntt_tomont(int32_t * Out, int32_t * A){

	if(Out!=A){
 8007198:	4288      	cmp	r0, r1
void invntt_tomont(int32_t * Out, int32_t * A){
 800719a:	b510      	push	{r4, lr}
 800719c:	4604      	mov	r4, r0
	if(Out!=A){
 800719e:	d003      	beq.n	80071a8 <invntt_tomont+0x10>
		memcpy(Out,A,sizeof(int32_t)*N);
 80071a0:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80071a4:	f003 fcef 	bl	800ab86 <memcpy>
#endif
#if NIMS_TRI_NTT_MODE == 3
	asm_intt_3(Out, merging_zetas_inv);
#endif
#if NIMS_TRI_NTT_MODE == 5
	asm_intt_5_radix3(Out, merging_zetas_inv_radix3);
 80071a8:	4620      	mov	r0, r4
 80071aa:	4904      	ldr	r1, [pc, #16]	@ (80071bc <invntt_tomont+0x24>)
 80071ac:	f7fa fc98 	bl	8001ae0 <asm_intt_5_radix3>
	asm_intt_5(Out, merging_zetas_inv);
 80071b0:	4620      	mov	r0, r4
 80071b2:	4903      	ldr	r1, [pc, #12]	@ (80071c0 <invntt_tomont+0x28>)
#endif
}
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	asm_intt_5(Out, merging_zetas_inv);
 80071b8:	f7fa b89c 	b.w	80012f4 <asm_intt_5>
 80071bc:	20000004 	.word	0x20000004
 80071c0:	20002004 	.word	0x20002004

080071c4 <poly_base_mul>:
	#elif NIMS_TRI_NTT_MODE==3 //2차식 곱셈(poly)
	asm_pointwise_montgomery_3(c->coeffs, a->coeffs, b->coeffs, zetas+255);


	#elif NIMS_TRI_NTT_MODE==5//pointwise 곱셈
	asm_pointwise_montgomery_5(c->coeffs, a->coeffs, b->coeffs);
 80071c4:	f7fc beec 	b.w	8003fa0 <asm_pointwise_montgomery_5>

080071c8 <poly_caddq>:

	for (i = 0; i < N; i++)
		res->coeffs[i] = c[i];	
}

void poly_caddq(poly *a) {
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	f500 550f 	add.w	r5, r0, #9152	@ 0x23c0
 80071ce:	1f04      	subs	r4, r0, #4
 80071d0:	353c      	adds	r5, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		a->coeffs[i] = caddq(a->coeffs[i]);
 80071d2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80071d6:	f000 fbab 	bl	8007930 <caddq>
	for (i = 0; i < N; ++i)
 80071da:	42ac      	cmp	r4, r5
		a->coeffs[i] = caddq(a->coeffs[i]);
 80071dc:	6020      	str	r0, [r4, #0]
	for (i = 0; i < N; ++i)
 80071de:	d1f8      	bne.n	80071d2 <poly_caddq+0xa>

	DBENCH_STOP(*tred);
}
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	bf00      	nop

080071e4 <poly_add>:

void poly_add(poly *c, const poly *a, const poly *b) {
 80071e4:	b500      	push	{lr}
 80071e6:	f501 5e0f 	add.w	lr, r1, #9152	@ 0x23c0
 80071ea:	f1a2 0c04 	sub.w	ip, r2, #4
 80071ee:	3904      	subs	r1, #4
 80071f0:	1f02      	subs	r2, r0, #4
 80071f2:	f10e 0e3c 	add.w	lr, lr, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 80071f6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80071fa:	f85c 0f04 	ldr.w	r0, [ip, #4]!
	for (i = 0; i < N; ++i)
 80071fe:	4571      	cmp	r1, lr
		c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8007200:	4403      	add	r3, r0
 8007202:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < N; ++i)
 8007206:	d1f6      	bne.n	80071f6 <poly_add+0x12>

	DBENCH_STOP(*tadd);
}
 8007208:	f85d fb04 	ldr.w	pc, [sp], #4

0800720c <poly_sub>:
	for (i = 0; i < N; ++i)
		c->coeffs[i] = mod_add(a->coeffs[i], b->coeffs[i]);

}

void poly_sub(poly *c, poly *a, poly *b) {
 800720c:	b500      	push	{lr}
 800720e:	f501 5e0f 	add.w	lr, r1, #9152	@ 0x23c0
 8007212:	f1a2 0c04 	sub.w	ip, r2, #4
 8007216:	3904      	subs	r1, #4
 8007218:	1f02      	subs	r2, r0, #4
 800721a:	f10e 0e3c 	add.w	lr, lr, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800721e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8007222:	f85c 0f04 	ldr.w	r0, [ip, #4]!
	for (i = 0; i < N; ++i)
 8007226:	4571      	cmp	r1, lr
		c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8007228:	eba3 0300 	sub.w	r3, r3, r0
 800722c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < N; ++i)
 8007230:	d1f5      	bne.n	800721e <poly_sub+0x12>

	DBENCH_STOP(*tadd);
}
 8007232:	f85d fb04 	ldr.w	pc, [sp], #4
 8007236:	bf00      	nop

08007238 <poly_shiftl>:

void poly_shiftl(poly *a) {
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
 8007238:	f500 510f 	add.w	r1, r0, #9152	@ 0x23c0
 800723c:	1f03      	subs	r3, r0, #4
 800723e:	313c      	adds	r1, #60	@ 0x3c
		a->coeffs[i] <<= D;
 8007240:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8007244:	0352      	lsls	r2, r2, #13
	for (i = 0; i < N; ++i)
 8007246:	428b      	cmp	r3, r1
		a->coeffs[i] <<= D;
 8007248:	601a      	str	r2, [r3, #0]
	for (i = 0; i < N; ++i)
 800724a:	d1f9      	bne.n	8007240 <poly_shiftl+0x8>

	DBENCH_STOP(*tmul);
}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop

08007250 <poly_power2round>:

void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	f502 570f 	add.w	r7, r2, #9152	@ 0x23c0
 8007256:	1f14      	subs	r4, r2, #4
 8007258:	460d      	mov	r5, r1
 800725a:	1f06      	subs	r6, r0, #4
 800725c:	373c      	adds	r7, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 800725e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8007262:	4628      	mov	r0, r5
 8007264:	f000 fb78 	bl	8007958 <power2round>
	for (i = 0; i < N; ++i)
 8007268:	42bc      	cmp	r4, r7
		a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 800726a:	f846 0f04 	str.w	r0, [r6, #4]!
	for (i = 0; i < N; ++i)
 800726e:	f105 0504 	add.w	r5, r5, #4
 8007272:	d1f4      	bne.n	800725e <poly_power2round+0xe>

	DBENCH_STOP(*tround);
}
 8007274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007276:	bf00      	nop

08007278 <poly_decompose>:

void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	f502 570f 	add.w	r7, r2, #9152	@ 0x23c0
 800727e:	1f14      	subs	r4, r2, #4
 8007280:	460d      	mov	r5, r1
 8007282:	1f06      	subs	r6, r0, #4
 8007284:	373c      	adds	r7, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8007286:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800728a:	4628      	mov	r0, r5
 800728c:	f000 fb7c 	bl	8007988 <decompose>
	for (i = 0; i < N; ++i)
 8007290:	42bc      	cmp	r4, r7
		a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8007292:	f846 0f04 	str.w	r0, [r6, #4]!
	for (i = 0; i < N; ++i)
 8007296:	f105 0504 	add.w	r5, r5, #4
 800729a:	d1f4      	bne.n	8007286 <poly_decompose+0xe>

	DBENCH_STOP(*tround);
}
 800729c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800729e:	bf00      	nop

080072a0 <poly_make_hint>:

unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	f501 570f 	add.w	r7, r1, #9152	@ 0x23c0
 80072a8:	1f0c      	subs	r4, r1, #4
 80072aa:	1f16      	subs	r6, r2, #4
 80072ac:	1f05      	subs	r5, r0, #4
 80072ae:	373c      	adds	r7, #60	@ 0x3c
	unsigned int i, s = 0;
 80072b0:	f04f 0800 	mov.w	r8, #0
	DBENCH_START();

	for (i = 0; i < N; ++i) {
		h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 80072b4:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80072b8:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80072bc:	f000 fba4 	bl	8007a08 <make_hint>
	for (i = 0; i < N; ++i) {
 80072c0:	42bc      	cmp	r4, r7
		h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 80072c2:	f845 0f04 	str.w	r0, [r5, #4]!
		s += h->coeffs[i];
 80072c6:	4480      	add	r8, r0
	for (i = 0; i < N; ++i) {
 80072c8:	d1f4      	bne.n	80072b4 <poly_make_hint+0x14>
	}

	DBENCH_STOP(*tround);
	return s;
}
 80072ca:	4640      	mov	r0, r8
 80072cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072d0 <poly_use_hint>:

void poly_use_hint(poly *b, const poly *a, const poly *h) {
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	f501 570f 	add.w	r7, r1, #9152	@ 0x23c0
 80072d6:	1f0c      	subs	r4, r1, #4
 80072d8:	1f16      	subs	r6, r2, #4
 80072da:	1f05      	subs	r5, r0, #4
 80072dc:	373c      	adds	r7, #60	@ 0x3c
	unsigned int i;
	DBENCH_START();

	for (i = 0; i < N; ++i)
		b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 80072de:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80072e2:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80072e6:	f000 fba5 	bl	8007a34 <use_hint>
	for (i = 0; i < N; ++i)
 80072ea:	42bc      	cmp	r4, r7
		b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 80072ec:	f845 0f04 	str.w	r0, [r5, #4]!
	for (i = 0; i < N; ++i)
 80072f0:	d1f5      	bne.n	80072de <poly_use_hint+0xe>

	DBENCH_STOP(*tround);
}
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072f4 <poly_chknorm>:
int poly_chknorm(poly *a, int32_t B) {
	unsigned int i;
	int32_t t;
	DBENCH_START();

	if (B > (Q - 1) / 8)
 80072f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <poly_chknorm+0x30>)
 80072f6:	4299      	cmp	r1, r3
 80072f8:	dc0f      	bgt.n	800731a <poly_chknorm+0x26>
 80072fa:	f500 5c0f 	add.w	ip, r0, #9152	@ 0x23c0
 80072fe:	f10c 0c3c 	add.w	ip, ip, #60	@ 0x3c
 8007302:	3804      	subs	r0, #4
 8007304:	e001      	b.n	800730a <poly_chknorm+0x16>
		return 1;

	for (i = 0; i < N; ++i) {
 8007306:	4560      	cmp	r0, ip
 8007308:	d009      	beq.n	800731e <poly_chknorm+0x2a>
		/* Absolute value */
		t = a->coeffs[i] >> 31;
 800730a:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800730e:	17da      	asrs	r2, r3, #31
		t = a->coeffs[i] - (t & 2 * a->coeffs[i]);
 8007310:	ea02 0243 	and.w	r2, r2, r3, lsl #1
 8007314:	1a9b      	subs	r3, r3, r2

		if (t >= B) {
 8007316:	4299      	cmp	r1, r3
 8007318:	dcf5      	bgt.n	8007306 <poly_chknorm+0x12>
		return 1;
 800731a:	2001      	movs	r0, #1
			return 1;
		}
	}
	DBENCH_STOP(*tsample);
	return 0;
}
 800731c:	4770      	bx	lr
	return 0;
 800731e:	2000      	movs	r0, #0
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	00100800 	.word	0x00100800

08007328 <poly_uniform>:
//#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#define POLY_UNIFORM_NBLOCKS ((N*3 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
	const uint8_t seed[SEEDBYTES],
	uint16_t nonce)
{
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	f5ad 5de3 	sub.w	sp, sp, #7264	@ 0x1c60
 8007330:	b083      	sub	sp, #12
	stream128_state state;



	stream128_init(&state, seed, nonce);
	stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8007332:	af35      	add	r7, sp, #212	@ 0xd4
{
 8007334:	4606      	mov	r6, r0
	stream128_init(&state, seed, nonce);
 8007336:	4668      	mov	r0, sp
 8007338:	f000 feae 	bl	8008098 <NIMS_shake128_stream_init>
	stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 800733c:	f507 55dc 	add.w	r5, r7, #7040	@ 0x1b80
 8007340:	466a      	mov	r2, sp
 8007342:	f641 3190 	movw	r1, #7056	@ 0x1b90
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff f8b8 	bl	80064bc <shake128_inc_squeeze>
	while (ctr < len && pos + 3 <= buflen) {
 800734c:	3510      	adds	r5, #16
		if (t < Q && t != 0)
 800734e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8007434 <poly_uniform+0x10c>

	ctr = rej_uniform(a->coeffs, N, buf, buflen);
 8007352:	463a      	mov	r2, r7
	ctr = pos = 0;
 8007354:	2400      	movs	r4, #0
 8007356:	e002      	b.n	800735e <poly_uniform+0x36>
			a[ctr++] = t;
 8007358:	4604      	mov	r4, r0
	while (ctr < len && pos + 3 <= buflen) {
 800735a:	42aa      	cmp	r2, r5
 800735c:	d017      	beq.n	800738e <poly_uniform+0x66>
		t |= (uint32_t)buf[pos++] << 16;
 800735e:	7893      	ldrb	r3, [r2, #2]
		t |= (uint32_t)buf[pos++] << 8;
 8007360:	7850      	ldrb	r0, [r2, #1]
		t = buf[pos++];
 8007362:	7811      	ldrb	r1, [r2, #0]
		t |= (uint32_t)buf[pos++] << 16;
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800736a:	430b      	orrs	r3, r1
		if (t < Q && t != 0)
 800736c:	1e59      	subs	r1, r3, #1
 800736e:	4561      	cmp	r1, ip
	while (ctr < len && pos + 3 <= buflen) {
 8007370:	f102 0203 	add.w	r2, r2, #3
			a[ctr++] = t;
 8007374:	f104 0001 	add.w	r0, r4, #1
		if (t < Q && t != 0)
 8007378:	d2ef      	bcs.n	800735a <poly_uniform+0x32>
	while (ctr < len && pos + 3 <= buflen) {
 800737a:	f5b0 6f10 	cmp.w	r0, #2304	@ 0x900
			a[ctr++] = t;
 800737e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	while (ctr < len && pos + 3 <= buflen) {
 8007382:	d1e9      	bne.n	8007358 <poly_uniform+0x30>
		stream128_squeezeblocks(buf + off, 1, &state);
		buflen = STREAM128_BLOCKBYTES + off;
		ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
	}

}
 8007384:	f50d 5de3 	add.w	sp, sp, #7264	@ 0x1c60
 8007388:	b003      	add	sp, #12
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		off = buflen % 3;
 800738e:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8007438 <poly_uniform+0x110>
 8007392:	f641 3090 	movw	r0, #7056	@ 0x1b90
			buf[i] = buf[buflen - off + i];
 8007396:	f10d 09d4 	add.w	r9, sp, #212	@ 0xd4
		off = buflen % 3;
 800739a:	fba8 2300 	umull	r2, r3, r8, r0
 800739e:	f023 0a01 	bic.w	sl, r3, #1
 80073a2:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
		for (i = 0; i < off; ++i)
 80073a6:	ebb0 0a0a 	subs.w	sl, r0, sl
		ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 80073aa:	f5c4 6510 	rsb	r5, r4, #2304	@ 0x900
		for (i = 0; i < off; ++i)
 80073ae:	d03a      	beq.n	8007426 <poly_uniform+0xfe>
			buf[i] = buf[buflen - off + i];
 80073b0:	eba0 000a 	sub.w	r0, r0, sl
		for (i = 0; i < off; ++i)
 80073b4:	f1ba 0f02 	cmp.w	sl, #2
			buf[i] = buf[buflen - off + i];
 80073b8:	f819 3000 	ldrb.w	r3, [r9, r0]
 80073bc:	f889 3000 	strb.w	r3, [r9]
		for (i = 0; i < off; ++i)
 80073c0:	d103      	bne.n	80073ca <poly_uniform+0xa2>
			buf[i] = buf[buflen - off + i];
 80073c2:	4448      	add	r0, r9
 80073c4:	7843      	ldrb	r3, [r0, #1]
 80073c6:	f889 3001 	strb.w	r3, [r9, #1]
		stream128_squeezeblocks(buf + off, 1, &state);
 80073ca:	eb07 000a 	add.w	r0, r7, sl
 80073ce:	466a      	mov	r2, sp
 80073d0:	21a8      	movs	r1, #168	@ 0xa8
 80073d2:	f7ff f873 	bl	80064bc <shake128_inc_squeeze>
		buflen = STREAM128_BLOCKBYTES + off;
 80073d6:	f10a 00a8 	add.w	r0, sl, #168	@ 0xa8
		if (t < Q && t != 0)
 80073da:	f8df e058 	ldr.w	lr, [pc, #88]	@ 8007434 <poly_uniform+0x10c>
		buflen = STREAM128_BLOCKBYTES + off;
 80073de:	463a      	mov	r2, r7
	ctr = pos = 0;
 80073e0:	2100      	movs	r1, #0
	while (ctr < len && pos + 3 <= buflen) {
 80073e2:	f1c7 0c03 	rsb	ip, r7, #3
 80073e6:	e001      	b.n	80073ec <poly_uniform+0xc4>
 80073e8:	4558      	cmp	r0, fp
 80073ea:	d317      	bcc.n	800741c <poly_uniform+0xf4>
		t |= (uint32_t)buf[pos++] << 16;
 80073ec:	7893      	ldrb	r3, [r2, #2]
		t |= (uint32_t)buf[pos++] << 8;
 80073ee:	f892 b001 	ldrb.w	fp, [r2, #1]
		t = buf[pos++];
 80073f2:	f892 a000 	ldrb.w	sl, [r2]
		t |= (uint32_t)buf[pos++] << 16;
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 80073fc:	ea43 030a 	orr.w	r3, r3, sl
		if (t < Q && t != 0)
 8007400:	f103 3aff 	add.w	sl, r3, #4294967295
 8007404:	45f2      	cmp	sl, lr
			a[ctr++] = t;
 8007406:	eb04 0a01 	add.w	sl, r4, r1
 800740a:	bf3c      	itt	cc
 800740c:	3101      	addcc	r1, #1
 800740e:	f846 302a 	strcc.w	r3, [r6, sl, lsl #2]
	while (ctr < len && pos + 3 <= buflen) {
 8007412:	3203      	adds	r2, #3
 8007414:	42a9      	cmp	r1, r5
 8007416:	eb0c 0b02 	add.w	fp, ip, r2
 800741a:	d3e5      	bcc.n	80073e8 <poly_uniform+0xc0>
		ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 800741c:	440c      	add	r4, r1
	while (ctr < N) {
 800741e:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 8007422:	d3ba      	bcc.n	800739a <poly_uniform+0x72>
 8007424:	e7ae      	b.n	8007384 <poly_uniform+0x5c>
		stream128_squeezeblocks(buf + off, 1, &state);
 8007426:	4638      	mov	r0, r7
 8007428:	466a      	mov	r2, sp
 800742a:	21a8      	movs	r1, #168	@ 0xa8
 800742c:	f7ff f846 	bl	80064bc <shake128_inc_squeeze>
		buflen = STREAM128_BLOCKBYTES + off;
 8007430:	20a8      	movs	r0, #168	@ 0xa8
 8007432:	e7d2      	b.n	80073da <poly_uniform+0xb2>
 8007434:	00804000 	.word	0x00804000
 8007438:	aaaaaaab 	.word	0xaaaaaaab

0800743c <poly_uniform_eta>:

#define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
void poly_uniform_eta(poly *a,
	const uint8_t seed[CRHBYTES],
	uint16_t nonce)
{
 800743c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007440:	b0d7      	sub	sp, #348	@ 0x15c
	unsigned int ctr;
	unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
	uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES];
	stream256_state state;

	stream256_init(&state, seed, nonce);
 8007442:	ad22      	add	r5, sp, #136	@ 0x88
{
 8007444:	4606      	mov	r6, r0
	stream256_init(&state, seed, nonce);
 8007446:	4628      	mov	r0, r5
 8007448:	f000 fe3e 	bl	80080c8 <NIMS_shake256_stream_init>
	stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 800744c:	2188      	movs	r1, #136	@ 0x88
 800744e:	462a      	mov	r2, r5
 8007450:	4668      	mov	r0, sp
 8007452:	f7ff f8eb 	bl	800662c <shake256_inc_squeeze>
	ctr = pos = 0;
 8007456:	2400      	movs	r4, #0

	ctr = rej_eta(a->coeffs, N, buf, buflen);
 8007458:	4669      	mov	r1, sp
		t0 = buf[pos] & 0x03;
 800745a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800745e:	f003 0203 	and.w	r2, r3, #3
		if (t0 < 3) {
 8007462:	2a03      	cmp	r2, #3
 8007464:	f3c3 0081 	ubfx	r0, r3, #2, #2
		t2 = (buf[pos] >> 4) & 0x03;
 8007468:	f3c3 1701 	ubfx	r7, r3, #4, #2
		t3 = buf[pos++] >> 6;
 800746c:	ea4f 1393 	mov.w	r3, r3, lsr #6
		if (t0 < 3) {
 8007470:	d00d      	beq.n	800748e <poly_uniform_eta+0x52>
			a[ctr++] = 1 - t0;
 8007472:	f1c2 0201 	rsb	r2, r2, #1
		if (t1 < 3 && ctr < len) {
 8007476:	2803      	cmp	r0, #3
			a[ctr++] = 1 - t0;
 8007478:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 800747c:	f104 0401 	add.w	r4, r4, #1
		if (t1 < 3 && ctr < len) {
 8007480:	d00c      	beq.n	800749c <poly_uniform_eta+0x60>
 8007482:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 8007486:	d106      	bne.n	8007496 <poly_uniform_eta+0x5a>

	while (ctr < N) {
		stream256_squeezeblocks(buf, 1, &state);
		ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
	}
}
 8007488:	b057      	add	sp, #348	@ 0x15c
 800748a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (t1 < 3 && ctr < len) {
 800748e:	2803      	cmp	r0, #3
 8007490:	d05d      	beq.n	800754e <poly_uniform_eta+0x112>
 8007492:	f06f 0201 	mvn.w	r2, #1
			a[ctr++] = 1 - t0;
 8007496:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 800749a:	3401      	adds	r4, #1
		if (t2 < 3 && ctr < len) {
 800749c:	2f03      	cmp	r7, #3
 800749e:	d005      	beq.n	80074ac <poly_uniform_eta+0x70>
 80074a0:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 80074a4:	d0f0      	beq.n	8007488 <poly_uniform_eta+0x4c>
			a[ctr++] = 1 - t0;
 80074a6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 80074aa:	3401      	adds	r4, #1
		if (t3 < 3 && ctr < len) {
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d005      	beq.n	80074bc <poly_uniform_eta+0x80>
 80074b0:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 80074b4:	d0e8      	beq.n	8007488 <poly_uniform_eta+0x4c>
			a[ctr++] = 1 - t0;
 80074b6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 80074ba:	3401      	adds	r4, #1
	while (ctr < len && pos < buflen) {
 80074bc:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 80074c0:	d0e2      	beq.n	8007488 <poly_uniform_eta+0x4c>
 80074c2:	428d      	cmp	r5, r1
 80074c4:	d1c9      	bne.n	800745a <poly_uniform_eta+0x1e>
 80074c6:	e005      	b.n	80074d4 <poly_uniform_eta+0x98>
		if (t1 < 3 && ctr < len) {
 80074c8:	4298      	cmp	r0, r3
 80074ca:	d83a      	bhi.n	8007542 <poly_uniform_eta+0x106>
		ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 80074cc:	441c      	add	r4, r3
	while (ctr < N) {
 80074ce:	f5b4 6f10 	cmp.w	r4, #2304	@ 0x900
 80074d2:	d2d9      	bcs.n	8007488 <poly_uniform_eta+0x4c>
		stream256_squeezeblocks(buf, 1, &state);
 80074d4:	4668      	mov	r0, sp
 80074d6:	462a      	mov	r2, r5
 80074d8:	2188      	movs	r1, #136	@ 0x88
 80074da:	f7ff f8a7 	bl	800662c <shake256_inc_squeeze>
		ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 80074de:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 80074e2:	f5c4 6010 	rsb	r0, r4, #2304	@ 0x900
 80074e6:	46ec      	mov	ip, sp
	ctr = pos = 0;
 80074e8:	2300      	movs	r3, #0
		t0 = buf[pos] & 0x03;
 80074ea:	f81c 2b01 	ldrb.w	r2, [ip], #1
 80074ee:	f002 0103 	and.w	r1, r2, #3
		if (t0 < 3) {
 80074f2:	2903      	cmp	r1, #3
 80074f4:	f3c2 0e81 	ubfx	lr, r2, #2, #2
		t2 = (buf[pos] >> 4) & 0x03;
 80074f8:	f3c2 1801 	ubfx	r8, r2, #4, #2
		t3 = buf[pos++] >> 6;
 80074fc:	ea4f 1292 	mov.w	r2, r2, lsr #6
		if (t0 < 3) {
 8007500:	d004      	beq.n	800750c <poly_uniform_eta+0xd0>
			a[ctr++] = 1 - t0;
 8007502:	f1c1 0901 	rsb	r9, r1, #1
 8007506:	f847 9023 	str.w	r9, [r7, r3, lsl #2]
 800750a:	3301      	adds	r3, #1
		if (t1 < 3 && ctr < len) {
 800750c:	f1be 0f03 	cmp.w	lr, #3
 8007510:	d1da      	bne.n	80074c8 <poly_uniform_eta+0x8c>
		if (t2 < 3 && ctr < len) {
 8007512:	f1b8 0f03 	cmp.w	r8, #3
 8007516:	d006      	beq.n	8007526 <poly_uniform_eta+0xea>
 8007518:	4298      	cmp	r0, r3
 800751a:	d9d7      	bls.n	80074cc <poly_uniform_eta+0x90>
			a[ctr++] = 1 - t0;
 800751c:	f1c1 0e01 	rsb	lr, r1, #1
 8007520:	f847 e023 	str.w	lr, [r7, r3, lsl #2]
 8007524:	3301      	adds	r3, #1
		if (t3 < 3 && ctr < len) {
 8007526:	2a03      	cmp	r2, #3
 8007528:	d006      	beq.n	8007538 <poly_uniform_eta+0xfc>
 800752a:	4298      	cmp	r0, r3
 800752c:	d9ce      	bls.n	80074cc <poly_uniform_eta+0x90>
			a[ctr++] = 1 - t0;
 800752e:	f1c1 0101 	rsb	r1, r1, #1
 8007532:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8007536:	3301      	adds	r3, #1
	while (ctr < len && pos < buflen) {
 8007538:	4298      	cmp	r0, r3
 800753a:	d9c7      	bls.n	80074cc <poly_uniform_eta+0x90>
 800753c:	4565      	cmp	r5, ip
 800753e:	d1d4      	bne.n	80074ea <poly_uniform_eta+0xae>
 8007540:	e7c4      	b.n	80074cc <poly_uniform_eta+0x90>
			a[ctr++] = 1 - t0;
 8007542:	f1c1 0e01 	rsb	lr, r1, #1
 8007546:	f847 e023 	str.w	lr, [r7, r3, lsl #2]
 800754a:	3301      	adds	r3, #1
 800754c:	e7e1      	b.n	8007512 <poly_uniform_eta+0xd6>
		if (t2 < 3 && ctr < len) {
 800754e:	2f03      	cmp	r7, #3
 8007550:	d002      	beq.n	8007558 <poly_uniform_eta+0x11c>
 8007552:	f06f 0201 	mvn.w	r2, #1
 8007556:	e7a6      	b.n	80074a6 <poly_uniform_eta+0x6a>
		if (t3 < 3 && ctr < len) {
 8007558:	2b03      	cmp	r3, #3
 800755a:	d0b2      	beq.n	80074c2 <poly_uniform_eta+0x86>
 800755c:	f06f 0201 	mvn.w	r2, #1
 8007560:	e7a9      	b.n	80074b6 <poly_uniform_eta+0x7a>
 8007562:	bf00      	nop

08007564 <poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((POLYZ_PACKEDBYTES + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)

void poly_uniform_gamma1(poly *a,
	const uint8_t seed[CRHBYTES],
	uint16_t nonce)
{
 8007564:	b510      	push	{r4, lr}
 8007566:	f5ad 5dbd 	sub.w	sp, sp, #6048	@ 0x17a0
 800756a:	b082      	sub	sp, #8
 800756c:	4604      	mov	r4, r0
	uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
	stream256_state state;

	stream256_init(&state, seed, nonce);
 800756e:	4668      	mov	r0, sp
 8007570:	f000 fdaa 	bl	80080c8 <NIMS_shake256_stream_init>
	stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8007574:	466a      	mov	r2, sp
 8007576:	a834      	add	r0, sp, #208	@ 0xd0
 8007578:	f241 61d8 	movw	r1, #5848	@ 0x16d8
 800757c:	f7ff f856 	bl	800662c <shake256_inc_squeeze>
	polyz_unpack(a, buf);
 8007580:	a934      	add	r1, sp, #208	@ 0xd0
 8007582:	4620      	mov	r0, r4
 8007584:	f7ff fb62 	bl	8006c4c <polyz_unpack>
}
 8007588:	f50d 5dbd 	add.w	sp, sp, #6048	@ 0x17a0
 800758c:	b002      	add	sp, #8
 800758e:	bd10      	pop	{r4, pc}

08007590 <poly_challenge>:
//sample in ball
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	b0d6      	sub	sp, #344	@ 0x158
 8007594:	460c      	mov	r4, r1
 8007596:	4605      	mov	r5, r0
	unsigned int i, b, pos;
	uint32_t signs;
	uint8_t buf[SHAKE256_RATE];
	shake256incctx state;

	shake256_inc_init(&state);
 8007598:	a822      	add	r0, sp, #136	@ 0x88
 800759a:	f7fe ffd3 	bl	8006544 <shake256_inc_init>
	shake256_inc_absorb(&state, seed, SEEDBYTES);
 800759e:	4621      	mov	r1, r4
 80075a0:	2220      	movs	r2, #32
 80075a2:	a822      	add	r0, sp, #136	@ 0x88
 80075a4:	f7fe ffda 	bl	800655c <shake256_inc_absorb>
	shake256_inc_finalize(&state);
 80075a8:	a822      	add	r0, sp, #136	@ 0x88
 80075aa:	f7ff f813 	bl	80065d4 <shake256_inc_finalize>
	shake256_inc_squeezeblocks(buf, 1, &state);
 80075ae:	aa22      	add	r2, sp, #136	@ 0x88
 80075b0:	2188      	movs	r1, #136	@ 0x88
 80075b2:	4668      	mov	r0, sp
 80075b4:	f7ff f83a 	bl	800662c <shake256_inc_squeeze>

	signs = 0;
	for (i = 0; i < 4; ++i)
		signs |= (uint32_t)buf[i] << 8 * i;
 80075b8:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80075bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80075c0:	0224      	lsls	r4, r4, #8
 80075c2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80075c6:	f89d 3000 	ldrb.w	r3, [sp]
 80075ca:	431c      	orrs	r4, r3
 80075cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
	pos = 4;

	for (i = 0; i < N; ++i)
		c->coeffs[i] = 0;
 80075d0:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80075d4:	2100      	movs	r1, #0
 80075d6:	4628      	mov	r0, r5
		signs |= (uint32_t)buf[i] << 8 * i;
 80075d8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
#if (N==2304)
	for (i = N - TAU; i < N; ++i) {
 80075dc:	f44f 660e 	mov.w	r6, #2272	@ 0x8e0
		c->coeffs[i] = 0;
 80075e0:	f003 fa46 	bl	800aa70 <memset>
	pos = 4;
 80075e4:	f04f 0c04 	mov.w	ip, #4
 80075e8:	e01a      	b.n	8007620 <poly_challenge+0x90>
		do {
			if (pos >= SHAKE256_RATE) {
				shake256_squeezeblocks(buf, 1, &state);
 80075ea:	f7ff f863 	bl	80066b4 <shake256_squeezeblocks>
				pos = 0;
			}

			b = (uint32_t)buf[pos++] << 4;
			b |= (buf[pos++] & 0xF);
 80075ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
			b = (uint32_t)buf[pos++] << 4;
 80075f2:	f89d 2000 	ldrb.w	r2, [sp]
			b |= (buf[pos++] & 0xF);
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		} while (b > i);
 80075fe:	42b3      	cmp	r3, r6
 8007600:	bf88      	it	hi
 8007602:	2202      	movhi	r2, #2
 8007604:	d915      	bls.n	8007632 <poly_challenge+0xa2>
			b |= (buf[pos++] & 0xF);
 8007606:	eb0d 0302 	add.w	r3, sp, r2
			b = (uint32_t)buf[pos++] << 4;
 800760a:	f81d 1002 	ldrb.w	r1, [sp, r2]
			b |= (buf[pos++] & 0xF);
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
		} while (b > i);
 8007618:	429e      	cmp	r6, r3
			b |= (buf[pos++] & 0xF);
 800761a:	f102 0c02 	add.w	ip, r2, #2
		} while (b > i);
 800761e:	d20a      	bcs.n	8007636 <poly_challenge+0xa6>
			if (pos >= SHAKE256_RATE) {
 8007620:	f1bc 0f87 	cmp.w	ip, #135	@ 0x87
				shake256_squeezeblocks(buf, 1, &state);
 8007624:	aa22      	add	r2, sp, #136	@ 0x88
 8007626:	f04f 0101 	mov.w	r1, #1
 800762a:	4668      	mov	r0, sp
			if (pos >= SHAKE256_RATE) {
 800762c:	d8dd      	bhi.n	80075ea <poly_challenge+0x5a>
 800762e:	4662      	mov	r2, ip
 8007630:	e7e9      	b.n	8007606 <poly_challenge+0x76>
 8007632:	f04f 0c02 	mov.w	ip, #2

		c->coeffs[i] = c->coeffs[b];
 8007636:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800763a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
		c->coeffs[b] = 1 - 2 * (signs & 1);
 800763e:	f004 0201 	and.w	r2, r4, #1
 8007642:	0052      	lsls	r2, r2, #1
	for (i = N - TAU; i < N; ++i) {
 8007644:	3601      	adds	r6, #1
		c->coeffs[b] = 1 - 2 * (signs & 1);
 8007646:	f1c2 0201 	rsb	r2, r2, #1
	for (i = N - TAU; i < N; ++i) {
 800764a:	f5b6 6f10 	cmp.w	r6, #2304	@ 0x900
		c->coeffs[b] = 1 - 2 * (signs & 1);
 800764e:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		signs >>= 1;
 8007652:	ea4f 0454 	mov.w	r4, r4, lsr #1
	for (i = N - TAU; i < N; ++i) {
 8007656:	d1e3      	bne.n	8007620 <poly_challenge+0x90>
		c->coeffs[i] = c->coeffs[b];
		c->coeffs[b] = 1 - 2 * (signs & 1);
		signs >>= 1;
	}
#endif
}
 8007658:	b056      	add	sp, #344	@ 0x158
 800765a:	bd70      	pop	{r4, r5, r6, pc}

0800765c <poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007](딜리시움).
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	f500 550f 	add.w	r5, r0, #9152	@ 0x23c0
 8007662:	1f04      	subs	r4, r0, #4
 8007664:	353c      	adds	r5, #60	@ 0x3c
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8007666:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800766a:	f000 f969 	bl	8007940 <reduce32>
  for(i = 0; i < N; ++i)
 800766e:	42ac      	cmp	r4, r5
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8007670:	6020      	str	r0, [r4, #0]
  for(i = 0; i < N; ++i)
 8007672:	d1f8      	bne.n	8007666 <poly_reduce+0xa>
  //asm_reduce32(a->coeffs);

  DBENCH_STOP(*tred);
}
 8007674:	bd38      	pop	{r3, r4, r5, pc}
 8007676:	bf00      	nop

08007678 <surf>:

#define ROTATE(x, b) (((x) << (b)) | ((x) >> (32 - (b))))
#define MUSH(i, b) x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x, b));

static void surf(uint32_t out[8])
{
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t r;
  int32_t i;
  int32_t loop;

  for (i = 0; i < 12; ++i) {
    t[i] = in[i] ^ seed[12 + i];
 800767c:	4b6d      	ldr	r3, [pc, #436]	@ (8007834 <surf+0x1bc>)
{
 800767e:	b091      	sub	sp, #68	@ 0x44
    t[i] = in[i] ^ seed[12 + i];
 8007680:	689a      	ldr	r2, [r3, #8]
{
 8007682:	900d      	str	r0, [sp, #52]	@ 0x34
 8007684:	4606      	mov	r6, r0
    t[i] = in[i] ^ seed[12 + i];
 8007686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800768a:	f082 0b09 	eor.w	fp, r2, #9
  }
  for (i = 0; i < 8; ++i) {
    out[i] = seed[24 + i];
 800768e:	4a6a      	ldr	r2, [pc, #424]	@ (8007838 <surf+0x1c0>)
    t[i] = in[i] ^ seed[12 + i];
 8007690:	699f      	ldr	r7, [r3, #24]
 8007692:	f081 0507 	eor.w	r5, r1, #7
    out[i] = seed[24 + i];
 8007696:	4611      	mov	r1, r2
 8007698:	4632      	mov	r2, r6
 800769a:	3204      	adds	r2, #4
 800769c:	920e      	str	r2, [sp, #56]	@ 0x38
    t[i] = in[i] ^ seed[12 + i];
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	69de      	ldr	r6, [r3, #28]
 80076a2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80076a4:	f080 0409 	eor.w	r4, r0, #9
 80076a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80076aa:	f082 0902 	eor.w	r9, r2, #2
 80076ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80076b0:	695a      	ldr	r2, [r3, #20]
 80076b2:	6a1d      	ldr	r5, [r3, #32]
 80076b4:	f082 0803 	eor.w	r8, r2, #3
 80076b8:	f084 0202 	eor.w	r2, r4, #2
 80076bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80076be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076c0:	f082 0e06 	eor.w	lr, r2, #6
 80076c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f082 0c04 	eor.w	ip, r2, #4
    out[i] = seed[24 + i];
 80076cc:	4a5b      	ldr	r2, [pc, #364]	@ (800783c <surf+0x1c4>)
 80076ce:	9201      	str	r2, [sp, #4]
 80076d0:	2205      	movs	r2, #5
 80076d2:	9204      	str	r2, [sp, #16]
 80076d4:	2209      	movs	r2, #9
 80076d6:	9207      	str	r2, [sp, #28]
 80076d8:	2207      	movs	r2, #7
 80076da:	9205      	str	r2, [sp, #20]
 80076dc:	2002      	movs	r0, #2
 80076de:	2208      	movs	r2, #8
    t[i] = in[i] ^ seed[12 + i];
 80076e0:	f083 0a03 	eor.w	sl, r3, #3
    out[i] = seed[24 + i];
 80076e4:	460c      	mov	r4, r1
 80076e6:	2303      	movs	r3, #3
 80076e8:	e9cd 0208 	strd	r0, r2, [sp, #32]
 80076ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076f0:	9306      	str	r3, [sp, #24]
 80076f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076f4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80076f6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80076f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076fa:	4623      	mov	r3, r4
 80076fc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80076fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007702:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
  x = t[11];
  for (loop = 0; loop < 2; ++loop) {
 8007706:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	@ 0x28
 800770a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    t[i] = in[i] ^ seed[12 + i];
 800770c:	f087 0708 	eor.w	r7, r7, #8
 8007710:	f086 0604 	eor.w	r6, r6, #4
 8007714:	f085 0506 	eor.w	r5, r5, #6
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	f103 53e4 	add.w	r3, r3, #478150656	@ 0x1c800000
 800771e:	f503 2306 	add.w	r3, r3, #548864	@ 0x86000
 8007722:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
    for (r = 0; r < 16; ++r) {
      sum += 0x9e3779b9;
 8007726:	f1a3 43c3 	sub.w	r3, r3, #1635778560	@ 0x61800000
 800772a:	f5a3 0391 	sub.w	r3, r3, #4751360	@ 0x488000
 800772e:	f2a3 6347 	subw	r3, r3, #1607	@ 0x647
      MUSH(0, 5)
 8007732:	f08c 0203 	eor.w	r2, ip, #3
 8007736:	441a      	add	r2, r3
 8007738:	ea82 62fc 	eor.w	r2, r2, ip, ror #27
 800773c:	4411      	add	r1, r2
      MUSH(1, 7)
 800773e:	f081 0201 	eor.w	r2, r1, #1
 8007742:	441a      	add	r2, r3
 8007744:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 8007748:	4410      	add	r0, r2
      MUSH(2, 9)
 800774a:	f080 0204 	eor.w	r2, r0, #4
 800774e:	441a      	add	r2, r3
 8007750:	ea82 52f0 	eor.w	r2, r2, r0, ror #23
 8007754:	4493      	add	fp, r2
      MUSH(3, 13)
 8007756:	f08b 0201 	eor.w	r2, fp, #1
 800775a:	441a      	add	r2, r3
 800775c:	ea82 42fb 	eor.w	r2, r2, fp, ror #19
 8007760:	4492      	add	sl, r2
      MUSH(4, 5)
 8007762:	f08a 0205 	eor.w	r2, sl, #5
 8007766:	441a      	add	r2, r3
 8007768:	ea82 62fa 	eor.w	r2, r2, sl, ror #27
 800776c:	4491      	add	r9, r2
      MUSH(5, 7)
 800776e:	f089 0209 	eor.w	r2, r9, #9
 8007772:	441a      	add	r2, r3
 8007774:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 8007778:	4490      	add	r8, r2
      MUSH(6, 9)
 800777a:	f088 0202 	eor.w	r2, r8, #2
 800777e:	441a      	add	r2, r3
 8007780:	ea82 52f8 	eor.w	r2, r2, r8, ror #23
 8007784:	4417      	add	r7, r2
      MUSH(7, 13)
 8007786:	f087 0206 	eor.w	r2, r7, #6
 800778a:	441a      	add	r2, r3
 800778c:	ea82 42f7 	eor.w	r2, r2, r7, ror #19
 8007790:	4416      	add	r6, r2
      MUSH(8, 5)
 8007792:	f086 0205 	eor.w	r2, r6, #5
 8007796:	441a      	add	r2, r3
 8007798:	ea82 62f6 	eor.w	r2, r2, r6, ror #27
 800779c:	4415      	add	r5, r2
      MUSH(9, 7)
 800779e:	f085 0203 	eor.w	r2, r5, #3
 80077a2:	441a      	add	r2, r3
 80077a4:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 80077a8:	4414      	add	r4, r2
      MUSH(10, 9)
 80077aa:	f084 0205 	eor.w	r2, r4, #5
 80077ae:	441a      	add	r2, r3
 80077b0:	ea82 52f4 	eor.w	r2, r2, r4, ror #23
 80077b4:	4496      	add	lr, r2
      MUSH(11, 13)
 80077b6:	f08e 0208 	eor.w	r2, lr, #8
 80077ba:	441a      	add	r2, r3
 80077bc:	ea82 42fe 	eor.w	r2, r2, lr, ror #19
 80077c0:	4494      	add	ip, r2
    for (r = 0; r < 16; ++r) {
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d1ae      	bne.n	8007726 <surf+0xae>
    }
    for (i = 0; i < 8; ++i) {
      out[i] ^= t[i + 4];
 80077c8:	9b02      	ldr	r3, [sp, #8]
 80077ca:	ea83 0309 	eor.w	r3, r3, r9
 80077ce:	9302      	str	r3, [sp, #8]
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	ea83 0308 	eor.w	r3, r3, r8
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077da:	407b      	eors	r3, r7
 80077dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077de:	9b06      	ldr	r3, [sp, #24]
 80077e0:	4073      	eors	r3, r6
 80077e2:	9306      	str	r3, [sp, #24]
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	406b      	eors	r3, r5
 80077e8:	9308      	str	r3, [sp, #32]
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	4063      	eors	r3, r4
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	9b07      	ldr	r3, [sp, #28]
 80077f2:	ea83 030e 	eor.w	r3, r3, lr
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	ea83 030c 	eor.w	r3, r3, ip
 80077fe:	9304      	str	r3, [sp, #16]
  for (loop = 0; loop < 2; ++loop) {
 8007800:	4613      	mov	r3, r2
 8007802:	4a0f      	ldr	r2, [pc, #60]	@ (8007840 <surf+0x1c8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d001      	beq.n	800780c <surf+0x194>
 8007808:	9201      	str	r2, [sp, #4]
 800780a:	e785      	b.n	8007718 <surf+0xa0>
 800780c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800780e:	9a02      	ldr	r2, [sp, #8]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	9a03      	ldr	r2, [sp, #12]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	9a06      	ldr	r2, [sp, #24]
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	611a      	str	r2, [r3, #16]
 8007822:	9a05      	ldr	r2, [sp, #20]
 8007824:	615a      	str	r2, [r3, #20]
 8007826:	9a07      	ldr	r2, [sp, #28]
 8007828:	619a      	str	r2, [r3, #24]
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	61da      	str	r2, [r3, #28]
    }
  }
}
 800782e:	b011      	add	sp, #68	@ 0x44
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	20004f08 	.word	0x20004f08
 8007838:	0800b55c 	.word	0x0800b55c
 800783c:	e3779b90 	.word	0xe3779b90
 8007840:	c6ef3720 	.word	0xc6ef3720

08007844 <randombytes_regen>:

void randombytes_regen(void);
void randombytes_regen(void)
{
 8007844:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t out[8];
  if (!++in[0]) {
 8007846:	4d29      	ldr	r5, [pc, #164]	@ (80078ec <randombytes_regen+0xa8>)
 8007848:	682f      	ldr	r7, [r5, #0]
 800784a:	1c7a      	adds	r2, r7, #1
{
 800784c:	b089      	sub	sp, #36	@ 0x24
  if (!++in[0]) {
 800784e:	602a      	str	r2, [r5, #0]
 8007850:	bb22      	cbnz	r2, 800789c <randombytes_regen+0x58>
    if (!++in[1]) {
 8007852:	686b      	ldr	r3, [r5, #4]
 8007854:	3301      	adds	r3, #1
 8007856:	606b      	str	r3, [r5, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d03e      	beq.n	80078da <randombytes_regen+0x96>
      if (!++in[2]) {
        ++in[3];
      }
    }
  }
  surf(out);
 800785c:	466c      	mov	r4, sp
 800785e:	4620      	mov	r0, r4
 8007860:	f7ff ff0a 	bl	8007678 <surf>
  memcpy(out_buf, out, sizeof(out));
  if (!++in[0]) {
 8007864:	2301      	movs	r3, #1
  memcpy(out_buf, out, sizeof(out));
 8007866:	46a4      	mov	ip, r4
  if (!++in[0]) {
 8007868:	602b      	str	r3, [r5, #0]
  memcpy(out_buf, out, sizeof(out));
 800786a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800786e:	4e20      	ldr	r6, [pc, #128]	@ (80078f0 <randombytes_regen+0xac>)
 8007870:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007872:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007876:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      if (!++in[2]) {
        ++in[3];
      }
    }
  }
  surf(out);
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff fefc 	bl	8007678 <surf>
  memcpy(out_buf + sizeof(out), out, sizeof(out));
  outleft = sizeof(out_buf);
 8007880:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <randombytes_regen+0xb0>)
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 8007882:	46a4      	mov	ip, r4
  outleft = sizeof(out_buf);
 8007884:	2240      	movs	r2, #64	@ 0x40
 8007886:	601a      	str	r2, [r3, #0]
  memcpy(out_buf + sizeof(out), out, sizeof(out));
 8007888:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800788c:	4c1a      	ldr	r4, [pc, #104]	@ (80078f8 <randombytes_regen+0xb4>)
 800788e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007890:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007898:	b009      	add	sp, #36	@ 0x24
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  surf(out);
 800789c:	466c      	mov	r4, sp
 800789e:	4620      	mov	r0, r4
 80078a0:	f7ff feea 	bl	8007678 <surf>
  memcpy(out_buf, out, sizeof(out));
 80078a4:	46a4      	mov	ip, r4
 80078a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80078aa:	4e11      	ldr	r6, [pc, #68]	@ (80078f0 <randombytes_regen+0xac>)
 80078ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80078ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
  if (!++in[0]) {
 80078b2:	3702      	adds	r7, #2
  memcpy(out_buf, out, sizeof(out));
 80078b4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  if (!++in[0]) {
 80078b8:	602f      	str	r7, [r5, #0]
 80078ba:	2f00      	cmp	r7, #0
 80078bc:	d1dd      	bne.n	800787a <randombytes_regen+0x36>
    if (!++in[1]) {
 80078be:	686b      	ldr	r3, [r5, #4]
 80078c0:	3301      	adds	r3, #1
 80078c2:	606b      	str	r3, [r5, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1d8      	bne.n	800787a <randombytes_regen+0x36>
      if (!++in[2]) {
 80078c8:	68ab      	ldr	r3, [r5, #8]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60ab      	str	r3, [r5, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1d3      	bne.n	800787a <randombytes_regen+0x36>
        ++in[3];
 80078d2:	68eb      	ldr	r3, [r5, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60eb      	str	r3, [r5, #12]
 80078d8:	e7cf      	b.n	800787a <randombytes_regen+0x36>
      if (!++in[2]) {
 80078da:	68ab      	ldr	r3, [r5, #8]
 80078dc:	3301      	adds	r3, #1
 80078de:	60ab      	str	r3, [r5, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1bb      	bne.n	800785c <randombytes_regen+0x18>
        ++in[3];
 80078e4:	68eb      	ldr	r3, [r5, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60eb      	str	r3, [r5, #12]
 80078ea:	e7b7      	b.n	800785c <randombytes_regen+0x18>
 80078ec:	20004f08 	.word	0x20004f08
 80078f0:	20004ec4 	.word	0x20004ec4
 80078f4:	20004ec0 	.word	0x20004ec0
 80078f8:	20004ee4 	.word	0x20004ee4

080078fc <randombytes>:

void randombytes(uint8_t* buf, size_t xlen)
{
  while (xlen > 0) {
 80078fc:	b191      	cbz	r1, 8007924 <randombytes+0x28>
{
 80078fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!outleft) {
 8007900:	4e09      	ldr	r6, [pc, #36]	@ (8007928 <randombytes+0x2c>)
 8007902:	4f0a      	ldr	r7, [pc, #40]	@ (800792c <randombytes+0x30>)
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	4604      	mov	r4, r0
 8007908:	1845      	adds	r5, r0, r1
 800790a:	b13b      	cbz	r3, 800791c <randombytes+0x20>
      randombytes_regen();
    }
    *buf = out_buf[--outleft];
 800790c:	3b01      	subs	r3, #1
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	5cfa      	ldrb	r2, [r7, r3]
 8007912:	f804 2b01 	strb.w	r2, [r4], #1
  while (xlen > 0) {
 8007916:	42ac      	cmp	r4, r5
 8007918:	d1f7      	bne.n	800790a <randombytes+0xe>
  return;

	/*for (int i = 0; i < xlen; i++) {
		buf[i] = i;
	}*/
}
 800791a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      randombytes_regen();
 800791c:	f7ff ff92 	bl	8007844 <randombytes_regen>
    *buf = out_buf[--outleft];
 8007920:	6833      	ldr	r3, [r6, #0]
 8007922:	e7f3      	b.n	800790c <randombytes+0x10>
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20004ec0 	.word	0x20004ec0
 800792c:	20004ec4 	.word	0x20004ec4

08007930 <caddq>:
  return t;
}


int32_t caddq(int32_t a) {
  a += (a >> 31) & Q; 
 8007930:	4b02      	ldr	r3, [pc, #8]	@ (800793c <caddq+0xc>)
 8007932:	ea03 73e0 	and.w	r3, r3, r0, asr #31
  return a;
}
 8007936:	4418      	add	r0, r3
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	00804001 	.word	0x00804001

08007940 <reduce32>:
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 8007940:	f500 0380 	add.w	r3, r0, #4194304	@ 0x400000
 8007944:	15db      	asrs	r3, r3, #23
  t = a - t*Q;
 8007946:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 800794a:	ebc3 2242 	rsb	r2, r3, r2, lsl #9
 800794e:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
  //t=a%Q;
  return t;
}
 8007952:	4418      	add	r0, r3
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop

08007958 <power2round>:
  int32_t powerd = 1 << D;
  int32_t halfpowerd = powerd >> 1;
  // a1 = (a + (1 << (D-1)) - 1) >> D;
  // *a0 = a - (a1 << D);
  // return a1;  // a = a % Q;
  if(a<0)
 8007958:	2900      	cmp	r1, #0
 800795a:	da04      	bge.n	8007966 <power2round+0xe>
  {
    a = a+Q;
 800795c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8007960:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 8007964:	3101      	adds	r1, #1
  }
  a0tmp = a % powerd;
 8007966:	424a      	negs	r2, r1
 8007968:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800796c:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8007970:	bf58      	it	pl
 8007972:	4253      	negpl	r3, r2
  if(a0tmp > halfpowerd)
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  {
    a0tmp = a0tmp - powerd;
 8007978:	bfc8      	it	gt
 800797a:	f5a3 5300 	subgt.w	r3, r3, #8192	@ 0x2000
  }
  a1 = a - a0tmp;
 800797e:	1ac9      	subs	r1, r1, r3
  a1 = a1 >> D;

  *a0 = a0tmp;
 8007980:	6003      	str	r3, [r0, #0]
  return a1;
}
 8007982:	1348      	asrs	r0, r1, #13
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <decompose>:

int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a = a % Q;
 8007988:	4b1a      	ldr	r3, [pc, #104]	@ (80079f4 <decompose+0x6c>)
 800798a:	fb83 3201 	smull	r3, r2, r3, r1
 800798e:	17cb      	asrs	r3, r1, #31
 8007990:	ebc3 5362 	rsb	r3, r3, r2, asr #21
 8007994:	eb03 2243 	add.w	r2, r3, r3, lsl #9
 8007998:	eb03 3382 	add.w	r3, r3, r2, lsl #14
  if (a < 0)
 800799c:	1acb      	subs	r3, r1, r3
int32_t decompose(int32_t *a0, int32_t a) {
 800799e:	b410      	push	{r4}
  if (a < 0)
 80079a0:	d504      	bpl.n	80079ac <decompose+0x24>
	  a += Q;
 80079a2:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 80079a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80079aa:	3301      	adds	r3, #1
  *a0 = a % (2 * GAMMA2);
 80079ac:	4a12      	ldr	r2, [pc, #72]	@ (80079f8 <decompose+0x70>)
  if (*a0 > GAMMA2)
 80079ae:	4913      	ldr	r1, [pc, #76]	@ (80079fc <decompose+0x74>)
  *a0 = a % (2 * GAMMA2);
 80079b0:	fba2 4203 	umull	r4, r2, r2, r3
 80079b4:	0cd2      	lsrs	r2, r2, #19
 80079b6:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 80079ba:	eba3 2282 	sub.w	r2, r3, r2, lsl #10
  if (*a0 > GAMMA2)
 80079be:	428a      	cmp	r2, r1
	  *a0 -= (2*GAMMA2);
 80079c0:	bfc4      	itt	gt
 80079c2:	f5a2 2200 	subgt.w	r2, r2, #524288	@ 0x80000
 80079c6:	f5a2 6280 	subgt.w	r2, r2, #1024	@ 0x400
  if (a - (*a0) == (Q - 1)) 
 80079ca:	490d      	ldr	r1, [pc, #52]	@ (8007a00 <decompose+0x78>)
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	428b      	cmp	r3, r1
 80079d0:	d009      	beq.n	80079e6 <decompose+0x5e>
	  a1 = 0;
	  *a0 = *a0 - 1;
  }
  else
  {
	  a1 = (a - (*a0)) / (2 * GAMMA2);
 80079d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007a04 <decompose+0x7c>)
  *a0 = a % (2 * GAMMA2);
 80079d4:	6002      	str	r2, [r0, #0]
	  a1 = (a - (*a0)) / (2 * GAMMA2);
 80079d6:	17d9      	asrs	r1, r3, #31
 80079d8:	fb84 4303 	smull	r4, r3, r4, r3
 80079dc:	ebc1 40a3 	rsb	r0, r1, r3, asr #18
  }
  return a1;
}
 80079e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079e4:	4770      	bx	lr
	  *a0 = *a0 - 1;
 80079e6:	3a01      	subs	r2, #1
 80079e8:	6002      	str	r2, [r0, #0]
}
 80079ea:	f85d 4b04 	ldr.w	r4, [sp], #4
	  a1 = 0;
 80079ee:	2000      	movs	r0, #0
}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	3fe00f79 	.word	0x3fe00f79
 80079f8:	ff803fe1 	.word	0xff803fe1
 80079fc:	00040200 	.word	0x00040200
 8007a00:	00804000 	.word	0x00804000
 8007a04:	7fc01ff1 	.word	0x7fc01ff1

08007a08 <make_hint>:

unsigned int make_hint(int32_t a0, int32_t a1) { // a0:w-cs2+ct0의 lowbits, a1:w-cs2의 highbits
  if(a0 > GAMMA2 || a0 < - GAMMA2 || (a0 == -GAMMA2 && a1 != 0)) //if(a0 <= GAMMA2 || a0 > Q - GAMMA2 || (a0 == Q - GAMMA2 && a1 == 0)) //Q는 왜 있지?-> ct0더할때 modQ로 양수로 만들어버렸으니까
 8007a08:	4a08      	ldr	r2, [pc, #32]	@ (8007a2c <make_hint+0x24>)
 8007a0a:	f500 2380 	add.w	r3, r0, #262144	@ 0x40000
 8007a0e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d808      	bhi.n	8007a28 <make_hint+0x20>
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <make_hint+0x28>)
 8007a18:	4298      	cmp	r0, r3
 8007a1a:	d001      	beq.n	8007a20 <make_hint+0x18>
    return 1;

  return 0;
 8007a1c:	2000      	movs	r0, #0
}
 8007a1e:	4770      	bx	lr
  if(a0 > GAMMA2 || a0 < - GAMMA2 || (a0 == -GAMMA2 && a1 != 0)) //if(a0 <= GAMMA2 || a0 > Q - GAMMA2 || (a0 == Q - GAMMA2 && a1 == 0)) //Q는 왜 있지?-> ct0더할때 modQ로 양수로 만들어버렸으니까
 8007a20:	1e08      	subs	r0, r1, #0
 8007a22:	bf18      	it	ne
 8007a24:	2001      	movne	r0, #1
 8007a26:	4770      	bx	lr
    return 1;
 8007a28:	2001      	movs	r0, #1
 8007a2a:	4770      	bx	lr
 8007a2c:	00080400 	.word	0x00080400
 8007a30:	fffbfe00 	.word	0xfffbfe00

08007a34 <use_hint>:
  a = a % Q;
 8007a34:	4b26      	ldr	r3, [pc, #152]	@ (8007ad0 <use_hint+0x9c>)
 8007a36:	fb83 2300 	smull	r2, r3, r3, r0
 8007a3a:	17c2      	asrs	r2, r0, #31
 8007a3c:	ebc2 5363 	rsb	r3, r2, r3, asr #21
 8007a40:	eb03 2243 	add.w	r2, r3, r3, lsl #9
 8007a44:	eb03 3382 	add.w	r3, r3, r2, lsl #14
  if (a < 0)
 8007a48:	1ac3      	subs	r3, r0, r3

int32_t use_hint(int32_t a, unsigned int hint) {
 8007a4a:	b410      	push	{r4}
  if (a < 0)
 8007a4c:	d504      	bpl.n	8007a58 <use_hint+0x24>
	  a += Q;
 8007a4e:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8007a52:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8007a56:	3301      	adds	r3, #1
  *a0 = a % (2 * GAMMA2);
 8007a58:	481e      	ldr	r0, [pc, #120]	@ (8007ad4 <use_hint+0xa0>)
  if (*a0 > GAMMA2)
 8007a5a:	4c1f      	ldr	r4, [pc, #124]	@ (8007ad8 <use_hint+0xa4>)
  *a0 = a % (2 * GAMMA2);
 8007a5c:	fba0 c203 	umull	ip, r2, r0, r3
 8007a60:	0cd2      	lsrs	r2, r2, #19
 8007a62:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 8007a66:	eba3 2282 	sub.w	r2, r3, r2, lsl #10
  if (*a0 > GAMMA2)
 8007a6a:	42a2      	cmp	r2, r4
 8007a6c:	dd10      	ble.n	8007a90 <use_hint+0x5c>
	  *a0 -= (2*GAMMA2);
 8007a6e:	f5a2 2200 	sub.w	r2, r2, #524288	@ 0x80000
  if (a - (*a0) == (Q - 1)) 
 8007a72:	4c1a      	ldr	r4, [pc, #104]	@ (8007adc <use_hint+0xa8>)
	  *a0 -= (2*GAMMA2);
 8007a74:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
  if (a - (*a0) == (Q - 1)) 
 8007a78:	1a9a      	subs	r2, r3, r2
 8007a7a:	42a2      	cmp	r2, r4
 8007a7c:	d01b      	beq.n	8007ab6 <use_hint+0x82>
	  a1 = (a - (*a0)) / (2 * GAMMA2);
 8007a7e:	fba0 0202 	umull	r0, r2, r0, r2
 8007a82:	0cd0      	lsrs	r0, r2, #19
  int32_t a0, a1;
  
  a1 = decompose(&a0, a);
  if(hint == 0)
 8007a84:	b1a1      	cbz	r1, 8007ab0 <use_hint+0x7c>
    return (a1 ==  0) ? 31 : a1 - 1;
#elif N==2304
  if(a0 > 0)
    return (a1 == 15) ?  0 : a1 + 1;
  else
    return (a1 ==  0) ? 15 : a1 - 1;
 8007a86:	b308      	cbz	r0, 8007acc <use_hint+0x98>
 8007a88:	3801      	subs	r0, #1
  if(a0 > 0)
    return (a1 == 20) ?  0 : a1 + 1;
  else
    return (a1 ==  0) ? 20 : a1 - 1;
#endif
}
 8007a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a8e:	4770      	bx	lr
  if (a - (*a0) == (Q - 1)) 
 8007a90:	4812      	ldr	r0, [pc, #72]	@ (8007adc <use_hint+0xa8>)
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	4283      	cmp	r3, r0
 8007a96:	d00e      	beq.n	8007ab6 <use_hint+0x82>
	  a1 = (a - (*a0)) / (2 * GAMMA2);
 8007a98:	4c11      	ldr	r4, [pc, #68]	@ (8007ae0 <use_hint+0xac>)
 8007a9a:	17d8      	asrs	r0, r3, #31
 8007a9c:	fb84 4303 	smull	r4, r3, r4, r3
 8007aa0:	ebc0 40a3 	rsb	r0, r0, r3, asr #18
  if(hint == 0)
 8007aa4:	b121      	cbz	r1, 8007ab0 <use_hint+0x7c>
  if(a0 > 0)
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d0ed      	beq.n	8007a86 <use_hint+0x52>
    return (a1 == 15) ?  0 : a1 + 1;
 8007aaa:	280f      	cmp	r0, #15
 8007aac:	d00a      	beq.n	8007ac4 <use_hint+0x90>
 8007aae:	3001      	adds	r0, #1
}
 8007ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab4:	4770      	bx	lr
	  a1 = 0;
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	bf14      	ite	ne
 8007aba:	200f      	movne	r0, #15
 8007abc:	2000      	moveq	r0, #0
}
 8007abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac2:	4770      	bx	lr
	  a1 = 0;
 8007ac4:	2000      	movs	r0, #0
}
 8007ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aca:	4770      	bx	lr
    return (a1 ==  0) ? 15 : a1 - 1;
 8007acc:	200f      	movs	r0, #15
 8007ace:	e7ef      	b.n	8007ab0 <use_hint+0x7c>
 8007ad0:	3fe00f79 	.word	0x3fe00f79
 8007ad4:	ff803fe1 	.word	0xff803fe1
 8007ad8:	00040200 	.word	0x00040200
 8007adc:	00804000 	.word	0x00804000
 8007ae0:	7fc01ff1 	.word	0x7fc01ff1

08007ae4 <crypto_sign_keypair>:
#include "symmetric.h"
#include "fips202.h"
#include "stdio.h"
#include <stdlib.h>

int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8007ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae8:	f5ad 4d58 	sub.w	sp, sp, #55296	@ 0xd800
 8007aec:	b0ac      	sub	sp, #176	@ 0xb0
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
	poly mat;
	poly s1, s1hat, s2, t1, t0;



	randombytes(zeta, SEEDBYTES);
 8007af2:	a804      	add	r0, sp, #16
 8007af4:	2120      	movs	r1, #32
 8007af6:	f7ff ff01 	bl	80078fc <randombytes>
	randombytes(seedbuf, SEEDBYTES);
 8007afa:	a814      	add	r0, sp, #80	@ 0x50
 8007afc:	2120      	movs	r1, #32
 8007afe:	f7ff fefd 	bl	80078fc <randombytes>
	shake256(seedbuf, 3 * SEEDBYTES, seedbuf, SEEDBYTES);
 8007b02:	aa14      	add	r2, sp, #80	@ 0x50
 8007b04:	2320      	movs	r3, #32
 8007b06:	4610      	mov	r0, r2
 8007b08:	2160      	movs	r1, #96	@ 0x60
	xi_1 = seedbuf;
	xi_2 = seedbuf + SEEDBYTES;
	key = seedbuf + 2 * SEEDBYTES;

	poly_uniform(&mat, zeta, 0);
	poly_uniform_eta(&s1, xi_1, 0);
 8007b0a:	f50d 5612 	add.w	r6, sp, #9344	@ 0x2480
	shake256(seedbuf, 3 * SEEDBYTES, seedbuf, SEEDBYTES);
 8007b0e:	f7fe fde5 	bl	80066dc <shake256>
	poly_uniform_eta(&s1, xi_1, 0);
 8007b12:	3630      	adds	r6, #48	@ 0x30
	poly_uniform(&mat, zeta, 0);
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	a82c      	add	r0, sp, #176	@ 0xb0
 8007b18:	2200      	movs	r2, #0
	poly_uniform_eta(&s2, xi_2, 0);
 8007b1a:	f50d 47d9 	add.w	r7, sp, #27776	@ 0x6c80
	poly_uniform(&mat, zeta, 0);
 8007b1e:	f7ff fc03 	bl	8007328 <poly_uniform>
	poly_uniform_eta(&s2, xi_2, 0);
 8007b22:	3730      	adds	r7, #48	@ 0x30
	poly_uniform_eta(&s1, xi_1, 0);
 8007b24:	a914      	add	r1, sp, #80	@ 0x50
 8007b26:	4630      	mov	r0, r6
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f7ff fc87 	bl	800743c <poly_uniform_eta>
	poly_uniform_eta(&s2, xi_2, 0);
 8007b2e:	2200      	movs	r2, #0
 8007b30:	a91c      	add	r1, sp, #112	@ 0x70
 8007b32:	4638      	mov	r0, r7
 8007b34:	f7ff fc82 	bl	800743c <poly_uniform_eta>


	ntt(s1hat.coeffs, s1.coeffs);
 8007b38:	f50d 4091 	add.w	r0, sp, #18560	@ 0x4880
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	3030      	adds	r0, #48	@ 0x30
 8007b40:	f7ff fb14 	bl	800716c <ntt>
	poly_base_mul(&t1, &s1hat, &mat);
 8007b44:	f50d 4191 	add.w	r1, sp, #18560	@ 0x4880
 8007b48:	f50d 4010 	add.w	r0, sp, #36864	@ 0x9000
 8007b4c:	aa2c      	add	r2, sp, #176	@ 0xb0
 8007b4e:	3130      	adds	r1, #48	@ 0x30
 8007b50:	30b0      	adds	r0, #176	@ 0xb0
 8007b52:	f7ff fb37 	bl	80071c4 <poly_base_mul>
	invntt_tomont(t1.coeffs, t1.coeffs);
 8007b56:	f50d 4110 	add.w	r1, sp, #36864	@ 0x9000
 8007b5a:	31b0      	adds	r1, #176	@ 0xb0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	f7ff fb1b 	bl	8007198 <invntt_tomont>

	poly_caddq(&t1);
 8007b62:	f50d 4010 	add.w	r0, sp, #36864	@ 0x9000
 8007b66:	30b0      	adds	r0, #176	@ 0xb0
 8007b68:	f7ff fb2e 	bl	80071c8 <poly_caddq>

	poly_add(&t1, &t1, &s2);
 8007b6c:	f50d 4110 	add.w	r1, sp, #36864	@ 0x9000
 8007b70:	31b0      	adds	r1, #176	@ 0xb0
 8007b72:	463a      	mov	r2, r7
 8007b74:	4608      	mov	r0, r1
 8007b76:	f7ff fb35 	bl	80071e4 <poly_add>
	poly_caddq(&t1);
 8007b7a:	f50d 4010 	add.w	r0, sp, #36864	@ 0x9000
 8007b7e:	30b0      	adds	r0, #176	@ 0xb0
 8007b80:	f7ff fb22 	bl	80071c8 <poly_caddq>

	poly_power2round(&t1, &t0, &t1);
 8007b84:	f50d 4834 	add.w	r8, sp, #46080	@ 0xb400
 8007b88:	f50d 4210 	add.w	r2, sp, #36864	@ 0x9000
 8007b8c:	f108 08b0 	add.w	r8, r8, #176	@ 0xb0
 8007b90:	32b0      	adds	r2, #176	@ 0xb0
 8007b92:	4641      	mov	r1, r8
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7ff fb5b 	bl	8007250 <poly_power2round>

	pack_pk(pk, zeta, &t1);
 8007b9a:	f50d 4210 	add.w	r2, sp, #36864	@ 0x9000
 8007b9e:	a904      	add	r1, sp, #16
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	32b0      	adds	r2, #176	@ 0xb0
 8007ba4:	f7ff f88e 	bl	8006cc4 <pack_pk>

	shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8007ba8:	4622      	mov	r2, r4
 8007baa:	a80c      	add	r0, sp, #48	@ 0x30
 8007bac:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8007bb0:	2120      	movs	r1, #32
 8007bb2:	f7fe fd93 	bl	80066dc <shake256>

	pack_sk(sk, zeta, tr, key, &t0, &s1, &s2);
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8007bbc:	f8cd 8000 	str.w	r8, [sp]
 8007bc0:	ab24      	add	r3, sp, #144	@ 0x90
 8007bc2:	aa0c      	add	r2, sp, #48	@ 0x30
 8007bc4:	a904      	add	r1, sp, #16
 8007bc6:	f7ff f8e3 	bl	8006d90 <pack_sk>

	return 0;
}
 8007bca:	2000      	movs	r0, #0
 8007bcc:	f50d 4d58 	add.w	sp, sp, #55296	@ 0xd800
 8007bd0:	b02c      	add	sp, #176	@ 0xb0
 8007bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd6:	bf00      	nop

08007bd8 <crypto_sign_signature>:
int crypto_sign_signature(uint8_t *sig,
                        	size_t *siglen,
                        	const uint8_t *m,
                        	size_t mlen,
                        	const uint8_t *sk)
{
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	f5ad 3db4 	sub.w	sp, sp, #92160	@ 0x16800
 8007be0:	b0f3      	sub	sp, #460	@ 0x1cc
 8007be2:	f50d 34b4 	add.w	r4, sp, #92160	@ 0x16800
 8007be6:	f504 74f8 	add.w	r4, r4, #496	@ 0x1f0
 8007bea:	461e      	mov	r6, r3
	zeta = seedbuf;
	tr = zeta + SEEDBYTES;
	key = tr + SEEDBYTES;
	mu = key + SEEDBYTES;
	rho = mu + CRHBYTES;
	unpack_sk(zeta, tr, key, &t0, &s1, &s2, sk);
 8007bec:	f50d 4935 	add.w	r9, sp, #46336	@ 0xb500
 8007bf0:	ab72      	add	r3, sp, #456	@ 0x1c8
 8007bf2:	f50d 5717 	add.w	r7, sp, #9664	@ 0x25c0
{
 8007bf6:	6824      	ldr	r4, [r4, #0]
	unpack_sk(zeta, tr, key, &t0, &s1, &s2, sk);
 8007bf8:	9402      	str	r4, [sp, #8]
 8007bfa:	f1a3 0ac0 	sub.w	sl, r3, #192	@ 0xc0
 8007bfe:	f109 09c8 	add.w	r9, r9, #200	@ 0xc8
 8007c02:	f50d 7894 	add.w	r8, sp, #296	@ 0x128
 8007c06:	3708      	adds	r7, #8
 8007c08:	f50d 4311 	add.w	r3, sp, #37120	@ 0x9100
 8007c0c:	33c8      	adds	r3, #200	@ 0xc8
{
 8007c0e:	4615      	mov	r5, r2
 8007c10:	9105      	str	r1, [sp, #20]
	unpack_sk(zeta, tr, key, &t0, &s1, &s2, sk);
 8007c12:	4642      	mov	r2, r8
 8007c14:	4651      	mov	r1, sl
 8007c16:	f8cd 9004 	str.w	r9, [sp, #4]
{
 8007c1a:	4604      	mov	r4, r0
	unpack_sk(zeta, tr, key, &t0, &s1, &s2, sk);
 8007c1c:	9700      	str	r7, [sp, #0]
 8007c1e:	a83a      	add	r0, sp, #232	@ 0xe8
 8007c20:	f7ff f93a 	bl	8006e98 <unpack_sk>

	shake256_inc_init(&state);
 8007c24:	a806      	add	r0, sp, #24
 8007c26:	f7fe fc8d 	bl	8006544 <shake256_inc_init>
	shake256_inc_absorb(&state, tr, SEEDBYTES);
 8007c2a:	4651      	mov	r1, sl
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	a806      	add	r0, sp, #24
 8007c30:	f7fe fc94 	bl	800655c <shake256_inc_absorb>
	shake256_inc_absorb(&state, m, mlen);
 8007c34:	4629      	mov	r1, r5
 8007c36:	4632      	mov	r2, r6
 8007c38:	a806      	add	r0, sp, #24
 8007c3a:	f7fe fc8f 	bl	800655c <shake256_inc_absorb>
	shake256_inc_finalize(&state);
 8007c3e:	a806      	add	r0, sp, #24
 8007c40:	f7fe fcc8 	bl	80065d4 <shake256_inc_finalize>
	shake256_inc_squeeze(mu, CRHBYTES, &state);
 8007c44:	aa06      	add	r2, sp, #24
 8007c46:	2140      	movs	r1, #64	@ 0x40
 8007c48:	a852      	add	r0, sp, #328	@ 0x148
 8007c4a:	f7fe fcef 	bl	800662c <shake256_inc_squeeze>

#ifdef NIMS_RANDOMIZED_SIGNING
	randombytes(rho, CRHBYTES);
#else
	shake256(rho, CRHBYTES, key, SEEDBYTES + CRHBYTES);
 8007c4e:	2360      	movs	r3, #96	@ 0x60
 8007c50:	4642      	mov	r2, r8
 8007c52:	2140      	movs	r1, #64	@ 0x40
 8007c54:	a862      	add	r0, sp, #392	@ 0x188
 8007c56:	f7fe fd41 	bl	80066dc <shake256>
#endif

	poly_uniform(&mat, zeta, 0);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	a93a      	add	r1, sp, #232	@ 0xe8
 8007c5e:	a872      	add	r0, sp, #456	@ 0x1c8
 8007c60:	f7ff fb62 	bl	8007328 <poly_uniform>


	ntt(s1.coeffs, s1.coeffs);
 8007c64:	4639      	mov	r1, r7
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7ff fa80 	bl	800716c <ntt>
	ntt(s2.coeffs, s2.coeffs);
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	4648      	mov	r0, r9
 8007c70:	f7ff fa7c 	bl	800716c <ntt>
	ntt(t0.coeffs, t0.coeffs);
 8007c74:	f50d 4111 	add.w	r1, sp, #37120	@ 0x9100
 8007c78:	31c8      	adds	r1, #200	@ 0xc8
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	f7ff fa76 	bl	800716c <ntt>
	invntt_tomont(z.coeffs, z.coeffs);
	poly_caddq(&z);

	poly_add(&z, &z, &y);
  	poly_reduce(&z);
	if (poly_chknorm(&z, GAMMA1 - BETA)){
 8007c80:	f8df 8240 	ldr.w	r8, [pc, #576]	@ 8007ec4 <crypto_sign_signature+0x2ec>

	poly_sub(&w0, &w0, &h);
  	poly_reduce(&w0);


	if (poly_chknorm(&w0, GAMMA2 - BETA)){
 8007c84:	f8df a240 	ldr.w	sl, [pc, #576]	@ 8007ec8 <crypto_sign_signature+0x2f0>
	poly_base_mul(&h, &cp, &t0);
	invntt_tomont(h.coeffs, h.coeffs);
	poly_caddq(&h);

  	poly_reduce(&h);
	if (poly_chknorm(&h, GAMMA2)){
 8007c88:	f8df b240 	ldr.w	fp, [pc, #576]	@ 8007ecc <crypto_sign_signature+0x2f4>
	ntt(t0.coeffs, t0.coeffs);
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	e000      	b.n	8007c92 <crypto_sign_signature+0xba>
 8007c90:	3501      	adds	r5, #1
	poly_uniform_gamma1(&y, rho, nonce++);
 8007c92:	f50d 4093 	add.w	r0, sp, #18816	@ 0x4980
 8007c96:	b2aa      	uxth	r2, r5
 8007c98:	a962      	add	r1, sp, #392	@ 0x188
 8007c9a:	3048      	adds	r0, #72	@ 0x48
 8007c9c:	f7ff fc62 	bl	8007564 <poly_uniform_gamma1>
	z = y;
 8007ca0:	f50d 4193 	add.w	r1, sp, #18816	@ 0x4980
 8007ca4:	f50d 40db 	add.w	r0, sp, #28032	@ 0x6d80
 8007ca8:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 8007cac:	3148      	adds	r1, #72	@ 0x48
 8007cae:	3048      	adds	r0, #72	@ 0x48
 8007cb0:	f002 ff69 	bl	800ab86 <memcpy>
	ntt(z.coeffs, z.coeffs);
 8007cb4:	f50d 41db 	add.w	r1, sp, #28032	@ 0x6d80
 8007cb8:	3148      	adds	r1, #72	@ 0x48
 8007cba:	4608      	mov	r0, r1
 8007cbc:	f7ff fa56 	bl	800716c <ntt>
	poly_base_mul(&w1, &z, &mat);
 8007cc0:	f50d 41db 	add.w	r1, sp, #28032	@ 0x6d80
 8007cc4:	f50d 4059 	add.w	r0, sp, #55552	@ 0xd900
 8007cc8:	aa72      	add	r2, sp, #456	@ 0x1c8
 8007cca:	3148      	adds	r1, #72	@ 0x48
 8007ccc:	30c8      	adds	r0, #200	@ 0xc8
 8007cce:	f7ff fa79 	bl	80071c4 <poly_base_mul>
	invntt_tomont(w1.coeffs, w1.coeffs);
 8007cd2:	f50d 4159 	add.w	r1, sp, #55552	@ 0xd900
 8007cd6:	31c8      	adds	r1, #200	@ 0xc8
 8007cd8:	4608      	mov	r0, r1
 8007cda:	f7ff fa5d 	bl	8007198 <invntt_tomont>
	poly_caddq(&w1);
 8007cde:	f50d 4059 	add.w	r0, sp, #55552	@ 0xd900
 8007ce2:	30c8      	adds	r0, #200	@ 0xc8
 8007ce4:	f7ff fa70 	bl	80071c8 <poly_caddq>
	poly_decompose(&w1, &w0, &w1);
 8007ce8:	f50d 4259 	add.w	r2, sp, #55552	@ 0xd900
 8007cec:	32c8      	adds	r2, #200	@ 0xc8
 8007cee:	f50d 417d 	add.w	r1, sp, #64768	@ 0xfd00
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	31c8      	adds	r1, #200	@ 0xc8
 8007cf6:	f7ff fabf 	bl	8007278 <poly_decompose>
	polyw1_pack(sig, &w1);
 8007cfa:	f50d 4159 	add.w	r1, sp, #55552	@ 0xd900
 8007cfe:	31c8      	adds	r1, #200	@ 0xc8
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7fe ffcb 	bl	8006c9c <polyw1_pack>
	shake256_inc_init(&state);
 8007d06:	a806      	add	r0, sp, #24
 8007d08:	f7fe fc1c 	bl	8006544 <shake256_inc_init>
	shake256_inc_absorb(&state, mu, CRHBYTES);
 8007d0c:	2240      	movs	r2, #64	@ 0x40
 8007d0e:	a952      	add	r1, sp, #328	@ 0x148
 8007d10:	a806      	add	r0, sp, #24
 8007d12:	f7fe fc23 	bl	800655c <shake256_inc_absorb>
	shake256_inc_absorb(&state, sig, POLYW1_PACKEDBYTES);
 8007d16:	4621      	mov	r1, r4
 8007d18:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8007d1c:	a806      	add	r0, sp, #24
 8007d1e:	f7fe fc1d 	bl	800655c <shake256_inc_absorb>
	shake256_inc_finalize(&state);
 8007d22:	a806      	add	r0, sp, #24
 8007d24:	f7fe fc56 	bl	80065d4 <shake256_inc_finalize>
	shake256_inc_squeeze(sig, SEEDBYTES, &state);
 8007d28:	aa06      	add	r2, sp, #24
 8007d2a:	2120      	movs	r1, #32
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f7fe fc7d 	bl	800662c <shake256_inc_squeeze>
	poly_challenge(&cp, sig);
 8007d32:	f50d 30a2 	add.w	r0, sp, #82944	@ 0x14400
 8007d36:	4621      	mov	r1, r4
 8007d38:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007d3c:	f7ff fc28 	bl	8007590 <poly_challenge>
	ntt(cp.coeffs, cp.coeffs);
 8007d40:	f50d 31a2 	add.w	r1, sp, #82944	@ 0x14400
 8007d44:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007d48:	4608      	mov	r0, r1
 8007d4a:	f7ff fa0f 	bl	800716c <ntt>
	poly_base_mul(&z, &cp, &s1);
 8007d4e:	f50d 31a2 	add.w	r1, sp, #82944	@ 0x14400
 8007d52:	f50d 40db 	add.w	r0, sp, #28032	@ 0x6d80
 8007d56:	463a      	mov	r2, r7
 8007d58:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007d5c:	3048      	adds	r0, #72	@ 0x48
 8007d5e:	f7ff fa31 	bl	80071c4 <poly_base_mul>
	invntt_tomont(z.coeffs, z.coeffs);
 8007d62:	f50d 41db 	add.w	r1, sp, #28032	@ 0x6d80
 8007d66:	3148      	adds	r1, #72	@ 0x48
 8007d68:	4608      	mov	r0, r1
 8007d6a:	f7ff fa15 	bl	8007198 <invntt_tomont>
	poly_caddq(&z);
 8007d6e:	f50d 40db 	add.w	r0, sp, #28032	@ 0x6d80
 8007d72:	3048      	adds	r0, #72	@ 0x48
 8007d74:	f7ff fa28 	bl	80071c8 <poly_caddq>
	poly_add(&z, &z, &y);
 8007d78:	f50d 41db 	add.w	r1, sp, #28032	@ 0x6d80
 8007d7c:	3148      	adds	r1, #72	@ 0x48
 8007d7e:	f50d 4293 	add.w	r2, sp, #18816	@ 0x4980
 8007d82:	4608      	mov	r0, r1
 8007d84:	3248      	adds	r2, #72	@ 0x48
 8007d86:	f7ff fa2d 	bl	80071e4 <poly_add>
  	poly_reduce(&z);
 8007d8a:	f50d 40db 	add.w	r0, sp, #28032	@ 0x6d80
 8007d8e:	3048      	adds	r0, #72	@ 0x48
 8007d90:	f7ff fc64 	bl	800765c <poly_reduce>
	if (poly_chknorm(&z, GAMMA1 - BETA)){
 8007d94:	f50d 40db 	add.w	r0, sp, #28032	@ 0x6d80
 8007d98:	4641      	mov	r1, r8
 8007d9a:	3048      	adds	r0, #72	@ 0x48
 8007d9c:	f7ff faaa 	bl	80072f4 <poly_chknorm>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f47f af75 	bne.w	8007c90 <crypto_sign_signature+0xb8>
	poly_base_mul(&h, &cp, &s2);
 8007da6:	f50d 31a2 	add.w	r1, sp, #82944	@ 0x14400
 8007daa:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007dae:	464a      	mov	r2, r9
 8007db0:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007db4:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007db8:	f7ff fa04 	bl	80071c4 <poly_base_mul>
	invntt_tomont(h.coeffs, h.coeffs);
 8007dbc:	f50d 3190 	add.w	r1, sp, #73728	@ 0x12000
 8007dc0:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	f7ff f9e7 	bl	8007198 <invntt_tomont>
	poly_caddq(&h);
 8007dca:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007dce:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007dd2:	f7ff f9f9 	bl	80071c8 <poly_caddq>
	poly_sub(&w0, &w0, &h);
 8007dd6:	f50d 417d 	add.w	r1, sp, #64768	@ 0xfd00
 8007dda:	31c8      	adds	r1, #200	@ 0xc8
 8007ddc:	f50d 3290 	add.w	r2, sp, #73728	@ 0x12000
 8007de0:	4608      	mov	r0, r1
 8007de2:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8007de6:	f7ff fa11 	bl	800720c <poly_sub>
  	poly_reduce(&w0);
 8007dea:	f50d 407d 	add.w	r0, sp, #64768	@ 0xfd00
 8007dee:	30c8      	adds	r0, #200	@ 0xc8
 8007df0:	f7ff fc34 	bl	800765c <poly_reduce>
	if (poly_chknorm(&w0, GAMMA2 - BETA)){
 8007df4:	f50d 407d 	add.w	r0, sp, #64768	@ 0xfd00
 8007df8:	4651      	mov	r1, sl
 8007dfa:	30c8      	adds	r0, #200	@ 0xc8
 8007dfc:	f7ff fa7a 	bl	80072f4 <poly_chknorm>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f47f af45 	bne.w	8007c90 <crypto_sign_signature+0xb8>
	poly_base_mul(&h, &cp, &t0);
 8007e06:	f50d 4211 	add.w	r2, sp, #37120	@ 0x9100
 8007e0a:	f50d 31a2 	add.w	r1, sp, #82944	@ 0x14400
 8007e0e:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007e12:	32c8      	adds	r2, #200	@ 0xc8
 8007e14:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007e18:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007e1c:	f7ff f9d2 	bl	80071c4 <poly_base_mul>
	invntt_tomont(h.coeffs, h.coeffs);
 8007e20:	f50d 3190 	add.w	r1, sp, #73728	@ 0x12000
 8007e24:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8007e28:	4608      	mov	r0, r1
 8007e2a:	f7ff f9b5 	bl	8007198 <invntt_tomont>
	poly_caddq(&h);
 8007e2e:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007e32:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007e36:	f7ff f9c7 	bl	80071c8 <poly_caddq>
  	poly_reduce(&h);
 8007e3a:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007e3e:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007e42:	f7ff fc0b 	bl	800765c <poly_reduce>
	if (poly_chknorm(&h, GAMMA2)){
 8007e46:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007e50:	f7ff fa50 	bl	80072f4 <poly_chknorm>
 8007e54:	4606      	mov	r6, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f47f af1a 	bne.w	8007c90 <crypto_sign_signature+0xb8>
		goto rej;
	}

	poly_add(&w0, &w0, &h);
 8007e5c:	f50d 417d 	add.w	r1, sp, #64768	@ 0xfd00
 8007e60:	31c8      	adds	r1, #200	@ 0xc8
 8007e62:	f50d 3290 	add.w	r2, sp, #73728	@ 0x12000
 8007e66:	4608      	mov	r0, r1
 8007e68:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8007e6c:	f7ff f9ba 	bl	80071e4 <poly_add>

	n = poly_make_hint(&h, &w0, &w1);
 8007e70:	f50d 4259 	add.w	r2, sp, #55552	@ 0xd900
 8007e74:	f50d 417d 	add.w	r1, sp, #64768	@ 0xfd00
 8007e78:	f50d 3090 	add.w	r0, sp, #73728	@ 0x12000
 8007e7c:	32c8      	adds	r2, #200	@ 0xc8
 8007e7e:	31c8      	adds	r1, #200	@ 0xc8
 8007e80:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 8007e84:	f7ff fa0c 	bl	80072a0 <poly_make_hint>

	if (n > OMEGA){
 8007e88:	2850      	cmp	r0, #80	@ 0x50
 8007e8a:	f63f af01 	bhi.w	8007c90 <crypto_sign_signature+0xb8>
		goto rej;
	}

	pack_sig(sig, sig, &z, &h);
 8007e8e:	f50d 3390 	add.w	r3, sp, #73728	@ 0x12000
 8007e92:	f50d 42db 	add.w	r2, sp, #28032	@ 0x6d80
 8007e96:	4621      	mov	r1, r4
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8007e9e:	3248      	adds	r2, #72	@ 0x48
 8007ea0:	f7ff f884 	bl	8006fac <pack_sig>
	*siglen = CRYPTO_BYTES;
 8007ea4:	9a05      	ldr	r2, [sp, #20]
	printf("%d, ", cnt_rej);
 8007ea6:	4806      	ldr	r0, [pc, #24]	@ (8007ec0 <crypto_sign_signature+0x2e8>)
	*siglen = CRYPTO_BYTES;
 8007ea8:	f44f 53be 	mov.w	r3, #6080	@ 0x17c0
 8007eac:	6013      	str	r3, [r2, #0]
	printf("%d, ", cnt_rej);
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f002 fc96 	bl	800a7e0 <iprintf>

	return 0;
}
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f50d 3db4 	add.w	sp, sp, #92160	@ 0x16800
 8007eba:	b073      	add	sp, #460	@ 0x1cc
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	0800b578 	.word	0x0800b578
 8007ec4:	0007ffc0 	.word	0x0007ffc0
 8007ec8:	000401c0 	.word	0x000401c0
 8007ecc:	00040200 	.word	0x00040200

08007ed0 <crypto_sign_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 8007ed8:	b0fc      	sub	sp, #496	@ 0x1f0
 8007eda:	f50d 3481 	add.w	r4, sp, #66048	@ 0x10200

	poly cp, mat, z, t1, t11, w1, h;
	shake256incctx state;


	if (siglen != CRYPTO_BYTES)
 8007ede:	f5b1 5fbe 	cmp.w	r1, #6080	@ 0x17c0
{
 8007ee2:	f104 0408 	add.w	r4, r4, #8
 8007ee6:	6827      	ldr	r7, [r4, #0]
	if (siglen != CRYPTO_BYTES)
 8007ee8:	f040 80cb 	bne.w	8008082 <crypto_sign_verify+0x1b2>
		return -1;
	unpack_pk(zeta, &t1, pk);
 8007eec:	f50d 41e3 	add.w	r1, sp, #29056	@ 0x7180
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	3170      	adds	r1, #112	@ 0x70
 8007ef4:	4668      	mov	r0, sp
 8007ef6:	4690      	mov	r8, r2
 8007ef8:	463a      	mov	r2, r7
 8007efa:	461e      	mov	r6, r3
 8007efc:	f7fe ff16 	bl	8006d2c <unpack_pk>

	if (unpack_sig(c, &z, &h, sig))
 8007f00:	f50d 425d 	add.w	r2, sp, #56576	@ 0xdd00
 8007f04:	f50d 419b 	add.w	r1, sp, #19840	@ 0x4d80
 8007f08:	4623      	mov	r3, r4
 8007f0a:	32f0      	adds	r2, #240	@ 0xf0
 8007f0c:	3170      	adds	r1, #112	@ 0x70
 8007f0e:	a808      	add	r0, sp, #32
 8007f10:	f7ff f8c6 	bl	80070a0 <unpack_sig>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 80b4 	bne.w	8008082 <crypto_sign_verify+0x1b2>
		return -1;

	if (poly_chknorm(&z, GAMMA1 - BETA))
 8007f1a:	f50d 409b 	add.w	r0, sp, #19840	@ 0x4d80
 8007f1e:	495d      	ldr	r1, [pc, #372]	@ (8008094 <crypto_sign_verify+0x1c4>)
 8007f20:	3070      	adds	r0, #112	@ 0x70
 8007f22:	f7ff f9e7 	bl	80072f4 <poly_chknorm>
 8007f26:	4605      	mov	r5, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f040 80aa 	bne.w	8008082 <crypto_sign_verify+0x1b2>
		return -1;

	shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8007f2e:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8007f32:	463a      	mov	r2, r7
 8007f34:	2120      	movs	r1, #32
 8007f36:	a818      	add	r0, sp, #96	@ 0x60
 8007f38:	f7fe fbd0 	bl	80066dc <shake256>
	shake256_inc_init(&state);
 8007f3c:	a828      	add	r0, sp, #160	@ 0xa0
 8007f3e:	f7fe fb01 	bl	8006544 <shake256_inc_init>
	shake256_inc_absorb(&state, mu, SEEDBYTES);
 8007f42:	2220      	movs	r2, #32
 8007f44:	a918      	add	r1, sp, #96	@ 0x60
 8007f46:	a828      	add	r0, sp, #160	@ 0xa0
 8007f48:	f7fe fb08 	bl	800655c <shake256_inc_absorb>
	shake256_inc_absorb(&state, m, mlen);
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4641      	mov	r1, r8
 8007f50:	a828      	add	r0, sp, #160	@ 0xa0
 8007f52:	f7fe fb03 	bl	800655c <shake256_inc_absorb>
	shake256_inc_finalize(&state);
 8007f56:	a828      	add	r0, sp, #160	@ 0xa0
 8007f58:	f7fe fb3c 	bl	80065d4 <shake256_inc_finalize>
	shake256_inc_squeeze(mu, CRHBYTES, &state);
 8007f5c:	aa28      	add	r2, sp, #160	@ 0xa0
 8007f5e:	2140      	movs	r1, #64	@ 0x40
 8007f60:	a818      	add	r0, sp, #96	@ 0x60
 8007f62:	f7fe fb63 	bl	800662c <shake256_inc_squeeze>
	poly_challenge(&cp, c);
 8007f66:	a908      	add	r1, sp, #32
 8007f68:	f50d 60be 	add.w	r0, sp, #1520	@ 0x5f0
 8007f6c:	f7ff fb10 	bl	8007590 <poly_challenge>

	poly_uniform(&mat, zeta, 0);
 8007f70:	f50d 5027 	add.w	r0, sp, #10688	@ 0x29c0
 8007f74:	462a      	mov	r2, r5
 8007f76:	4669      	mov	r1, sp
 8007f78:	3030      	adds	r0, #48	@ 0x30
 8007f7a:	f7ff f9d5 	bl	8007328 <poly_uniform>

	ntt(z.coeffs, z.coeffs);
 8007f7e:	f50d 419b 	add.w	r1, sp, #19840	@ 0x4d80
 8007f82:	3170      	adds	r1, #112	@ 0x70
 8007f84:	4608      	mov	r0, r1
 8007f86:	f7ff f8f1 	bl	800716c <ntt>
	poly_base_mul(&w1, &z, &mat);
 8007f8a:	f50d 5227 	add.w	r2, sp, #10688	@ 0x29c0
 8007f8e:	f50d 419b 	add.w	r1, sp, #19840	@ 0x4d80
 8007f92:	f50d 4039 	add.w	r0, sp, #47360	@ 0xb900
 8007f96:	3230      	adds	r2, #48	@ 0x30
 8007f98:	3170      	adds	r1, #112	@ 0x70
 8007f9a:	30f0      	adds	r0, #240	@ 0xf0
 8007f9c:	f7ff f912 	bl	80071c4 <poly_base_mul>
	invntt_tomont(w1.coeffs, w1.coeffs);
 8007fa0:	f50d 4139 	add.w	r1, sp, #47360	@ 0xb900
 8007fa4:	31f0      	adds	r1, #240	@ 0xf0
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	f7ff f8f6 	bl	8007198 <invntt_tomont>
	poly_caddq(&w1);
 8007fac:	f50d 4039 	add.w	r0, sp, #47360	@ 0xb900
 8007fb0:	30f0      	adds	r0, #240	@ 0xf0
 8007fb2:	f7ff f909 	bl	80071c8 <poly_caddq>

	poly_shiftl(&t1);
 8007fb6:	f50d 40e3 	add.w	r0, sp, #29056	@ 0x7180
 8007fba:	3070      	adds	r0, #112	@ 0x70
 8007fbc:	f7ff f93c 	bl	8007238 <poly_shiftl>

	ntt(t11.coeffs, t1.coeffs);
 8007fc0:	f50d 41e3 	add.w	r1, sp, #29056	@ 0x7180
 8007fc4:	f50d 4015 	add.w	r0, sp, #38144	@ 0x9500
 8007fc8:	3170      	adds	r1, #112	@ 0x70
 8007fca:	30f0      	adds	r0, #240	@ 0xf0
 8007fcc:	f7ff f8ce 	bl	800716c <ntt>
	ntt(cp.coeffs, cp.coeffs);
 8007fd0:	f50d 61be 	add.w	r1, sp, #1520	@ 0x5f0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	f7ff f8c9 	bl	800716c <ntt>
	poly_base_mul(&t1, &cp, &t11);
 8007fda:	f50d 4215 	add.w	r2, sp, #38144	@ 0x9500
 8007fde:	f50d 40e3 	add.w	r0, sp, #29056	@ 0x7180
 8007fe2:	32f0      	adds	r2, #240	@ 0xf0
 8007fe4:	f50d 61be 	add.w	r1, sp, #1520	@ 0x5f0
 8007fe8:	3070      	adds	r0, #112	@ 0x70
 8007fea:	f7ff f8eb 	bl	80071c4 <poly_base_mul>
	invntt_tomont(t1.coeffs, t1.coeffs);
 8007fee:	f50d 41e3 	add.w	r1, sp, #29056	@ 0x7180
 8007ff2:	3170      	adds	r1, #112	@ 0x70
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	f7ff f8cf 	bl	8007198 <invntt_tomont>
	poly_caddq(&t1);
 8007ffa:	f50d 40e3 	add.w	r0, sp, #29056	@ 0x7180
 8007ffe:	3070      	adds	r0, #112	@ 0x70
 8008000:	f7ff f8e2 	bl	80071c8 <poly_caddq>
	poly_sub(&w1, &w1, &t1);
 8008004:	f50d 4139 	add.w	r1, sp, #47360	@ 0xb900
 8008008:	31f0      	adds	r1, #240	@ 0xf0
 800800a:	f50d 42e3 	add.w	r2, sp, #29056	@ 0x7180
 800800e:	4608      	mov	r0, r1
 8008010:	3270      	adds	r2, #112	@ 0x70
 8008012:	f7ff f8fb 	bl	800720c <poly_sub>
	poly_caddq(&w1);
 8008016:	f50d 4039 	add.w	r0, sp, #47360	@ 0xb900
 800801a:	30f0      	adds	r0, #240	@ 0xf0
 800801c:	f7ff f8d4 	bl	80071c8 <poly_caddq>

	poly_use_hint(&w1, &w1, &h);
 8008020:	f50d 4139 	add.w	r1, sp, #47360	@ 0xb900
 8008024:	31f0      	adds	r1, #240	@ 0xf0
 8008026:	f50d 425d 	add.w	r2, sp, #56576	@ 0xdd00
 800802a:	32f0      	adds	r2, #240	@ 0xf0
 800802c:	4608      	mov	r0, r1
 800802e:	f7ff f94f 	bl	80072d0 <poly_use_hint>
	polyw1_pack(buf, &w1);
 8008032:	f50d 4139 	add.w	r1, sp, #47360	@ 0xb900
 8008036:	31f0      	adds	r1, #240	@ 0xf0
 8008038:	a85c      	add	r0, sp, #368	@ 0x170
 800803a:	f7fe fe2f 	bl	8006c9c <polyw1_pack>

	shake256_inc_init(&state);
 800803e:	a828      	add	r0, sp, #160	@ 0xa0
 8008040:	f7fe fa80 	bl	8006544 <shake256_inc_init>
	shake256_inc_absorb(&state, mu, CRHBYTES);
 8008044:	a918      	add	r1, sp, #96	@ 0x60
 8008046:	2240      	movs	r2, #64	@ 0x40
 8008048:	a828      	add	r0, sp, #160	@ 0xa0
 800804a:	f7fe fa87 	bl	800655c <shake256_inc_absorb>
	shake256_inc_absorb(&state, buf, POLYW1_PACKEDBYTES);
 800804e:	a95c      	add	r1, sp, #368	@ 0x170
 8008050:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8008054:	a828      	add	r0, sp, #160	@ 0xa0
 8008056:	f7fe fa81 	bl	800655c <shake256_inc_absorb>
	shake256_inc_finalize(&state);
	shake256_inc_squeeze(c2, SEEDBYTES, &state);
 800805a:	ac10      	add	r4, sp, #64	@ 0x40
	shake256_inc_finalize(&state);
 800805c:	a828      	add	r0, sp, #160	@ 0xa0
 800805e:	f7fe fab9 	bl	80065d4 <shake256_inc_finalize>
	shake256_inc_squeeze(c2, SEEDBYTES, &state);
 8008062:	2120      	movs	r1, #32
 8008064:	aa28      	add	r2, sp, #160	@ 0xa0
 8008066:	4620      	mov	r0, r4
 8008068:	f7fe fae0 	bl	800662c <shake256_inc_squeeze>

	for (i = 0; i < SEEDBYTES; ++i)
 800806c:	ab08      	add	r3, sp, #32
 800806e:	4621      	mov	r1, r4
 8008070:	e001      	b.n	8008076 <crypto_sign_verify+0x1a6>
 8008072:	42a3      	cmp	r3, r4
 8008074:	d007      	beq.n	8008086 <crypto_sign_verify+0x1b6>
		if (c[i] != c2[i])
 8008076:	f813 eb01 	ldrb.w	lr, [r3], #1
 800807a:	f811 cb01 	ldrb.w	ip, [r1], #1
 800807e:	45e6      	cmp	lr, ip
 8008080:	d0f7      	beq.n	8008072 <crypto_sign_verify+0x1a2>
		return -1;
 8008082:	f04f 35ff 	mov.w	r5, #4294967295
			return -1;

	return 0;
}
 8008086:	4628      	mov	r0, r5
 8008088:	f50d 3d80 	add.w	sp, sp, #65536	@ 0x10000
 800808c:	b07c      	add	sp, #496	@ 0x1f0
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	bf00      	nop
 8008094:	0007ffc0 	.word	0x0007ffc0

08008098 <NIMS_shake128_stream_init>:
#include "symmetric.h"

void NIMS_shake128_stream_init(shake128incctx *state,
                                    const uint8_t seed[SEEDBYTES],
                                    uint16_t nonce)
{
 8008098:	b530      	push	{r4, r5, lr}
 800809a:	b083      	sub	sp, #12
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 80080a0:	f8ad 2004 	strh.w	r2, [sp, #4]
  t[1] = nonce >> 8;

  shake128_inc_init(state);
 80080a4:	f7fe f996 	bl	80063d4 <shake128_inc_init>
  shake128_inc_absorb(state, seed, SEEDBYTES);
 80080a8:	4629      	mov	r1, r5
 80080aa:	4620      	mov	r0, r4
 80080ac:	2220      	movs	r2, #32
 80080ae:	f7fe f99d 	bl	80063ec <shake128_inc_absorb>
  shake128_inc_absorb(state, t, 2);
 80080b2:	2202      	movs	r2, #2
 80080b4:	a901      	add	r1, sp, #4
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7fe f998 	bl	80063ec <shake128_inc_absorb>
  shake128_inc_finalize(state);
 80080bc:	4620      	mov	r0, r4
 80080be:	f7fe f9d1 	bl	8006464 <shake128_inc_finalize>
}
 80080c2:	b003      	add	sp, #12
 80080c4:	bd30      	pop	{r4, r5, pc}
 80080c6:	bf00      	nop

080080c8 <NIMS_shake256_stream_init>:

void NIMS_shake256_stream_init(shake256incctx *state,
                                    const uint8_t seed[CRHBYTES],
                                    uint16_t nonce)
{
 80080c8:	b530      	push	{r4, r5, lr}
 80080ca:	b083      	sub	sp, #12
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 80080d0:	f8ad 2004 	strh.w	r2, [sp, #4]
  t[1] = nonce >> 8;

  shake256_inc_init(state);
 80080d4:	f7fe fa36 	bl	8006544 <shake256_inc_init>
  shake256_inc_absorb(state, seed, CRHBYTES);
 80080d8:	4629      	mov	r1, r5
 80080da:	4620      	mov	r0, r4
 80080dc:	2240      	movs	r2, #64	@ 0x40
 80080de:	f7fe fa3d 	bl	800655c <shake256_inc_absorb>
   shake256_inc_absorb(state, t, 2);
 80080e2:	2202      	movs	r2, #2
 80080e4:	a901      	add	r1, sp, #4
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7fe fa38 	bl	800655c <shake256_inc_absorb>
  shake256_inc_finalize(state);
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7fe fa71 	bl	80065d4 <shake256_inc_finalize>
}
 80080f2:	b003      	add	sp, #12
 80080f4:	bd30      	pop	{r4, r5, pc}
 80080f6:	bf00      	nop

080080f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80080f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008130 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80080fc:	f7fe f960 	bl	80063c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008100:	480c      	ldr	r0, [pc, #48]	@ (8008134 <LoopForever+0x6>)
  ldr r1, =_edata
 8008102:	490d      	ldr	r1, [pc, #52]	@ (8008138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008104:	4a0d      	ldr	r2, [pc, #52]	@ (800813c <LoopForever+0xe>)
  movs r3, #0
 8008106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008108:	e002      	b.n	8008110 <LoopCopyDataInit>

0800810a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800810a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800810c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800810e:	3304      	adds	r3, #4

08008110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008114:	d3f9      	bcc.n	800810a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008116:	4a0a      	ldr	r2, [pc, #40]	@ (8008140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008118:	4c0a      	ldr	r4, [pc, #40]	@ (8008144 <LoopForever+0x16>)
  movs r3, #0
 800811a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800811c:	e001      	b.n	8008122 <LoopFillZerobss>

0800811e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800811e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008120:	3204      	adds	r2, #4

08008122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008124:	d3fb      	bcc.n	800811e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008126:	f002 fd07 	bl	800ab38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800812a:	f7fd fe49 	bl	8005dc0 <main>

0800812e <LoopForever>:

LoopForever:
    b LoopForever
 800812e:	e7fe      	b.n	800812e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008130:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008138:	20004860 	.word	0x20004860
  ldr r2, =_sidata
 800813c:	0800b5ec 	.word	0x0800b5ec
  ldr r2, =_sbss
 8008140:	20004860 	.word	0x20004860
  ldr r4, =_ebss
 8008144:	20005088 	.word	0x20005088

08008148 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008148:	e7fe      	b.n	8008148 <ADC1_IRQHandler>
	...

0800814c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800814c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800814e:	4b0f      	ldr	r3, [pc, #60]	@ (800818c <HAL_InitTick+0x40>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b90b      	cbnz	r3, 8008158 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8008154:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8008156:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008158:	490d      	ldr	r1, [pc, #52]	@ (8008190 <HAL_InitTick+0x44>)
 800815a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800815e:	4605      	mov	r5, r0
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	6808      	ldr	r0, [r1, #0]
 8008166:	fbb0 f0f3 	udiv	r0, r0, r3
 800816a:	f000 f897 	bl	800829c <HAL_SYSTICK_Config>
 800816e:	4604      	mov	r4, r0
 8008170:	2800      	cmp	r0, #0
 8008172:	d1ef      	bne.n	8008154 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008174:	2d0f      	cmp	r5, #15
 8008176:	d8ed      	bhi.n	8008154 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008178:	4602      	mov	r2, r0
 800817a:	4629      	mov	r1, r5
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	f000 f850 	bl	8008224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008184:	4b03      	ldr	r3, [pc, #12]	@ (8008194 <HAL_InitTick+0x48>)
 8008186:	4620      	mov	r0, r4
 8008188:	601d      	str	r5, [r3, #0]
}
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200047fc 	.word	0x200047fc
 8008190:	20000000 	.word	0x20000000
 8008194:	20004800 	.word	0x20004800

08008198 <HAL_Init>:
{
 8008198:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800819a:	2003      	movs	r0, #3
 800819c:	f000 f830 	bl	8008200 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7ff ffd3 	bl	800814c <HAL_InitTick>
 80081a6:	b110      	cbz	r0, 80081ae <HAL_Init+0x16>
    status = HAL_ERROR;
 80081a8:	2401      	movs	r4, #1
}
 80081aa:	4620      	mov	r0, r4
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	4604      	mov	r4, r0
    HAL_MspInit();
 80081b0:	f7fd ffa2 	bl	80060f8 <HAL_MspInit>
}
 80081b4:	4620      	mov	r0, r4
 80081b6:	bd10      	pop	{r4, pc}

080081b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80081b8:	4a03      	ldr	r2, [pc, #12]	@ (80081c8 <HAL_IncTick+0x10>)
 80081ba:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <HAL_IncTick+0x14>)
 80081bc:	6811      	ldr	r1, [r2, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	440b      	add	r3, r1
 80081c2:	6013      	str	r3, [r2, #0]
}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20004f38 	.word	0x20004f38
 80081cc:	200047fc 	.word	0x200047fc

080081d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80081d0:	4b01      	ldr	r3, [pc, #4]	@ (80081d8 <HAL_GetTick+0x8>)
 80081d2:	6818      	ldr	r0, [r3, #0]
}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20004f38 	.word	0x20004f38

080081dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80081e0:	f7ff fff6 	bl	80081d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80081e6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80081e8:	d002      	beq.n	80081f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80081ea:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <HAL_Delay+0x20>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081f0:	f7ff ffee 	bl	80081d0 <HAL_GetTick>
 80081f4:	1b40      	subs	r0, r0, r5
 80081f6:	42a0      	cmp	r0, r4
 80081f8:	d3fa      	bcc.n	80081f0 <HAL_Delay+0x14>
  {
  }
}
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	200047fc 	.word	0x200047fc

08008200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008200:	4907      	ldr	r1, [pc, #28]	@ (8008220 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008202:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008204:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008206:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800820a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800820e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008210:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008212:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800821a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	e000ed00 	.word	0xe000ed00

08008224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008224:	4b1b      	ldr	r3, [pc, #108]	@ (8008294 <HAL_NVIC_SetPriority+0x70>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800822c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800822e:	f1c3 0e07 	rsb	lr, r3, #7
 8008232:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008236:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800823a:	bf28      	it	cs
 800823c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008240:	f1bc 0f06 	cmp.w	ip, #6
 8008244:	d91c      	bls.n	8008280 <HAL_NVIC_SetPriority+0x5c>
 8008246:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	fa03 f30c 	lsl.w	r3, r3, ip
 8008252:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008256:	f04f 33ff 	mov.w	r3, #4294967295
 800825a:	fa03 f30e 	lsl.w	r3, r3, lr
 800825e:	ea21 0303 	bic.w	r3, r1, r3
 8008262:	fa03 f30c 	lsl.w	r3, r3, ip
 8008266:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008268:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800826a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800826c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800826e:	db0a      	blt.n	8008286 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008270:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008274:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008278:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800827c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008280:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008282:	4694      	mov	ip, r2
 8008284:	e7e7      	b.n	8008256 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008286:	4a04      	ldr	r2, [pc, #16]	@ (8008298 <HAL_NVIC_SetPriority+0x74>)
 8008288:	f000 000f 	and.w	r0, r0, #15
 800828c:	4402      	add	r2, r0
 800828e:	7613      	strb	r3, [r2, #24]
 8008290:	f85d fb04 	ldr.w	pc, [sp], #4
 8008294:	e000ed00 	.word	0xe000ed00
 8008298:	e000ecfc 	.word	0xe000ecfc

0800829c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800829c:	3801      	subs	r0, #1
 800829e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80082a2:	d301      	bcc.n	80082a8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80082a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80082a6:	4770      	bx	lr
{
 80082a8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ae:	4c07      	ldr	r4, [pc, #28]	@ (80082cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082b2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80082b6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082ba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082bc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082be:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082c0:	619a      	str	r2, [r3, #24]
}
 80082c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082c6:	6119      	str	r1, [r3, #16]
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	e000ed00 	.word	0xe000ed00

080082d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082d4:	680c      	ldr	r4, [r1, #0]
{
 80082d6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082d8:	2c00      	cmp	r4, #0
 80082da:	f000 8094 	beq.w	8008406 <HAL_GPIO_Init+0x136>
  uint32_t position = 0x00u;
 80082de:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80082e0:	f04f 0b01 	mov.w	fp, #1
 80082e4:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80082e8:	ea1e 0a04 	ands.w	sl, lr, r4
 80082ec:	f000 8086 	beq.w	80083fc <HAL_GPIO_Init+0x12c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082f0:	684d      	ldr	r5, [r1, #4]
 80082f2:	f005 0203 	and.w	r2, r5, #3
 80082f6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80082fa:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082fc:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008300:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008304:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008308:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800830c:	d97e      	bls.n	800840c <HAL_GPIO_Init+0x13c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800830e:	2a03      	cmp	r2, #3
 8008310:	f040 80ba 	bne.w	8008488 <HAL_GPIO_Init+0x1b8>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008314:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8008318:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800831c:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008320:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008322:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8008326:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008328:	d068      	beq.n	80083fc <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800832a:	4f72      	ldr	r7, [pc, #456]	@ (80084f4 <HAL_GPIO_Init+0x224>)
 800832c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	663a      	str	r2, [r7, #96]	@ 0x60
 8008334:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008336:	f002 0201 	and.w	r2, r2, #1
 800833a:	9203      	str	r2, [sp, #12]
 800833c:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800833e:	f023 0203 	bic.w	r2, r3, #3
 8008342:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008346:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800834a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800834e:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008350:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008354:	260f      	movs	r6, #15
 8008356:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800835a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800835e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008362:	d027      	beq.n	80083b4 <HAL_GPIO_Init+0xe4>
 8008364:	4e64      	ldr	r6, [pc, #400]	@ (80084f8 <HAL_GPIO_Init+0x228>)
 8008366:	42b0      	cmp	r0, r6
 8008368:	f000 80a1 	beq.w	80084ae <HAL_GPIO_Init+0x1de>
 800836c:	4e63      	ldr	r6, [pc, #396]	@ (80084fc <HAL_GPIO_Init+0x22c>)
 800836e:	42b0      	cmp	r0, r6
 8008370:	f000 80a4 	beq.w	80084bc <HAL_GPIO_Init+0x1ec>
 8008374:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8008504 <HAL_GPIO_Init+0x234>
 8008378:	4570      	cmp	r0, lr
 800837a:	f000 8091 	beq.w	80084a0 <HAL_GPIO_Init+0x1d0>
 800837e:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8008508 <HAL_GPIO_Init+0x238>
 8008382:	4570      	cmp	r0, lr
 8008384:	f000 80a8 	beq.w	80084d8 <HAL_GPIO_Init+0x208>
 8008388:	f8df e180 	ldr.w	lr, [pc, #384]	@ 800850c <HAL_GPIO_Init+0x23c>
 800838c:	4570      	cmp	r0, lr
 800838e:	f000 80aa 	beq.w	80084e6 <HAL_GPIO_Init+0x216>
 8008392:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 8008510 <HAL_GPIO_Init+0x240>
 8008396:	4570      	cmp	r0, lr
 8008398:	f000 8097 	beq.w	80084ca <HAL_GPIO_Init+0x1fa>
 800839c:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8008514 <HAL_GPIO_Init+0x244>
 80083a0:	4570      	cmp	r0, lr
 80083a2:	bf0c      	ite	eq
 80083a4:	f04f 0e07 	moveq.w	lr, #7
 80083a8:	f04f 0e08 	movne.w	lr, #8
 80083ac:	fa0e fc0c 	lsl.w	ip, lr, ip
 80083b0:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083b4:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083b6:	4a52      	ldr	r2, [pc, #328]	@ (8008500 <HAL_GPIO_Init+0x230>)
 80083b8:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083ba:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80083bc:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80083c0:	4e4f      	ldr	r6, [pc, #316]	@ (8008500 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 80083c2:	bf54      	ite	pl
 80083c4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80083c6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80083ca:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80083cc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083ce:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80083d0:	4e4b      	ldr	r6, [pc, #300]	@ (8008500 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 80083d2:	bf54      	ite	pl
 80083d4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80083d6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80083da:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80083dc:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083de:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80083e0:	4e47      	ldr	r6, [pc, #284]	@ (8008500 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 80083e2:	bf54      	ite	pl
 80083e4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80083e6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80083ea:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80083ec:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083ee:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80083f0:	4d43      	ldr	r5, [pc, #268]	@ (8008500 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 80083f2:	bf54      	ite	pl
 80083f4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80083f6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80083fa:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80083fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083fe:	fa34 f203 	lsrs.w	r2, r4, r3
 8008402:	f47f af6f 	bne.w	80082e4 <HAL_GPIO_Init+0x14>
  }
}
 8008406:	b005      	add	sp, #20
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800840c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008410:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008412:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008416:	fa06 f80c 	lsl.w	r8, r6, ip
 800841a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800841e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8008422:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008426:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008428:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800842c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8008430:	fa0e fe03 	lsl.w	lr, lr, r3
 8008434:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8008438:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800843c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008440:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008444:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008448:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800844c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800844e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008452:	f47f af5f 	bne.w	8008314 <HAL_GPIO_Init+0x44>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008456:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8008458:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800845c:	f003 0e07 	and.w	lr, r3, #7
 8008460:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008464:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008468:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 800846c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008470:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008472:	260f      	movs	r6, #15
 8008474:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008478:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800847a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800847e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8008482:	f8c8 e020 	str.w	lr, [r8, #32]
 8008486:	e745      	b.n	8008314 <HAL_GPIO_Init+0x44>
        temp = GPIOx->PUPDR;
 8008488:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800848c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800848e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008492:	fa06 fe0c 	lsl.w	lr, r6, ip
 8008496:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 800849a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800849e:	e739      	b.n	8008314 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80084a0:	f04f 0e03 	mov.w	lr, #3
 80084a4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084a8:	ea47 070c 	orr.w	r7, r7, ip
 80084ac:	e782      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084ae:	f04f 0e01 	mov.w	lr, #1
 80084b2:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084b6:	ea47 070c 	orr.w	r7, r7, ip
 80084ba:	e77b      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084bc:	f04f 0e02 	mov.w	lr, #2
 80084c0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084c4:	ea47 070c 	orr.w	r7, r7, ip
 80084c8:	e774      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084ca:	f04f 0e06 	mov.w	lr, #6
 80084ce:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084d2:	ea47 070c 	orr.w	r7, r7, ip
 80084d6:	e76d      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084d8:	f04f 0e04 	mov.w	lr, #4
 80084dc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084e0:	ea47 070c 	orr.w	r7, r7, ip
 80084e4:	e766      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084e6:	f04f 0e05 	mov.w	lr, #5
 80084ea:	fa0e fc0c 	lsl.w	ip, lr, ip
 80084ee:	ea47 070c 	orr.w	r7, r7, ip
 80084f2:	e75f      	b.n	80083b4 <HAL_GPIO_Init+0xe4>
 80084f4:	40021000 	.word	0x40021000
 80084f8:	48000400 	.word	0x48000400
 80084fc:	48000800 	.word	0x48000800
 8008500:	40010400 	.word	0x40010400
 8008504:	48000c00 	.word	0x48000c00
 8008508:	48001000 	.word	0x48001000
 800850c:	48001400 	.word	0x48001400
 8008510:	48001800 	.word	0x48001800
 8008514:	48001c00 	.word	0x48001c00

08008518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008518:	b10a      	cbz	r2, 800851e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800851a:	6181      	str	r1, [r0, #24]
 800851c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800851e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008526:	b08b      	sub	sp, #44	@ 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008528:	b360      	cbz	r0, 8008584 <HAL_PCD_Init+0x60>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800852a:	f890 34bd 	ldrb.w	r3, [r0, #1213]	@ 0x4bd
  USBx = hpcd->Instance;
 800852e:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008530:	4605      	mov	r5, r0
 8008532:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008536:	2b00      	cmp	r3, #0
 8008538:	d079      	beq.n	800862e <HAL_PCD_Init+0x10a>
 800853a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800853c:	2303      	movs	r3, #3
 800853e:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008542:	6be3      	ldr	r3, [r4, #60]	@ 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008544:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008546:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
    hpcd->Init.dma_enable = 0U;
 800854a:	bf08      	it	eq
 800854c:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 800854e:	f001 fe87 	bl	800a260 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008552:	f856 eb10 	ldr.w	lr, [r6], #16
 8008556:	46b4      	mov	ip, r6
 8008558:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800855c:	466c      	mov	r4, sp
 800855e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008560:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008566:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800856a:	e884 0003 	stmia.w	r4, {r0, r1}
 800856e:	1d2f      	adds	r7, r5, #4
 8008570:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008574:	4670      	mov	r0, lr
 8008576:	f001 fe2b 	bl	800a1d0 <USB_CoreInit>
 800857a:	4604      	mov	r4, r0
 800857c:	b130      	cbz	r0, 800858c <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800857e:	2302      	movs	r3, #2
 8008580:	f885 34bd 	strb.w	r3, [r5, #1213]	@ 0x4bd
    return HAL_ERROR;
 8008584:	2401      	movs	r4, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008586:	4620      	mov	r0, r4
 8008588:	b00b      	add	sp, #44	@ 0x2c
 800858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800858c:	4601      	mov	r1, r0
 800858e:	6828      	ldr	r0, [r5, #0]
 8008590:	f001 fe6e 	bl	800a270 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008594:	6868      	ldr	r0, [r5, #4]
 8008596:	b358      	cbz	r0, 80085f0 <HAL_PCD_Init+0xcc>
 8008598:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800859a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800859e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80085a0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80085a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085a8:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085b4:	fa5f f28c 	uxtb.w	r2, ip
 80085b8:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 80085ba:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].is_in = 1U;
 80085be:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085c2:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 80085c6:	64d9      	str	r1, [r3, #76]	@ 0x4c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085c8:	d3ea      	bcc.n	80085a0 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80085ca:	2200      	movs	r2, #0
 80085cc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80085d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085d4:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80085d6:	f883 427c 	strb.w	r4, [r3, #636]	@ 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085da:	b2cc      	uxtb	r4, r1
 80085dc:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085de:	e9c3 22a1 	strd	r2, r2, [r3, #644]	@ 0x284
    hpcd->OUT_ep[i].is_in = 0U;
 80085e2:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085e6:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085ea:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ee:	d3ed      	bcc.n	80085cc <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80085f2:	466c      	mov	r4, sp
 80085f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80085f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80085fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8008602:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008606:	6828      	ldr	r0, [r5, #0]
 8008608:	f001 fe6a 	bl	800a2e0 <USB_DevInit>
 800860c:	4604      	mov	r4, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d1b5      	bne.n	800857e <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 8008612:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  hpcd->USB_Address = 0U;
 8008614:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008618:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800861a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800861c:	f885 24bd 	strb.w	r2, [r5, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8008620:	d00b      	beq.n	800863a <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008622:	6828      	ldr	r0, [r5, #0]
 8008624:	f001 ff5c 	bl	800a4e0 <USB_DevDisconnect>
}
 8008628:	4620      	mov	r0, r4
 800862a:	b00b      	add	sp, #44	@ 0x2c
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800862e:	f880 24bc 	strb.w	r2, [r0, #1212]	@ 0x4bc
    HAL_PCD_MspInit(hpcd);
 8008632:	f7fd fe03 	bl	800623c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8008636:	6828      	ldr	r0, [r5, #0]
 8008638:	e780      	b.n	800853c <HAL_PCD_Init+0x18>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800863a:	4628      	mov	r0, r5
 800863c:	f000 f802 	bl	8008644 <HAL_PCDEx_ActivateLPM>
 8008640:	e7ef      	b.n	8008622 <HAL_PCD_Init+0xfe>
 8008642:	bf00      	nop

08008644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008644:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8008646:	2000      	movs	r0, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008648:	681a      	ldr	r2, [r3, #0]
{
 800864a:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800864c:	f883 04f4 	strb.w	r0, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008650:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 8008652:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008654:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
  hpcd->lpm_active = 1U;
 8008658:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800865c:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800865e:	6d53      	ldr	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8008660:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008668:	f043 0303 	orr.w	r3, r3, #3
 800866c:	6553      	str	r3, [r2, #84]	@ 0x54
}
 800866e:	4770      	bx	lr

08008670 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008670:	4b06      	ldr	r3, [pc, #24]	@ (800868c <HAL_PWREx_GetVoltageRange+0x1c>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8008678:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800867c:	d004      	beq.n	8008688 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800867e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008682:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8008686:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40007000 	.word	0x40007000

08008690 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008690:	4a35      	ldr	r2, [pc, #212]	@ (8008768 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8008692:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008694:	b960      	cbnz	r0, 80086b0 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008696:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800869e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086a2:	d01b      	beq.n	80086dc <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80086ac:	2000      	movs	r0, #0
}
 80086ae:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086b0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80086b4:	d006      	beq.n	80086c4 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80086b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086be:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80086c0:	2000      	movs	r0, #0
}
 80086c2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086cc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086d0:	d029      	beq.n	8008726 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086da:	e7f1      	b.n	80086c0 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086e4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80086e6:	4821      	ldr	r0, [pc, #132]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80086e8:	4921      	ldr	r1, [pc, #132]	@ (8008770 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086f2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	2032      	movs	r0, #50	@ 0x32
 80086f8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086fc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80086fe:	fba1 1303 	umull	r1, r3, r1, r3
 8008702:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008704:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008706:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800870a:	d506      	bpl.n	800871a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800870c:	e000      	b.n	8008710 <HAL_PWREx_ControlVoltageScaling+0x80>
 800870e:	b123      	cbz	r3, 800871a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008710:	6951      	ldr	r1, [r2, #20]
 8008712:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008714:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008718:	d4f9      	bmi.n	800870e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800871a:	4b13      	ldr	r3, [pc, #76]	@ (8008768 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	055b      	lsls	r3, r3, #21
 8008720:	d5ce      	bpl.n	80086c0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8008722:	2003      	movs	r0, #3
 8008724:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800872a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800872e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008730:	480e      	ldr	r0, [pc, #56]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008732:	490f      	ldr	r1, [pc, #60]	@ (8008770 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800873c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800873e:	6803      	ldr	r3, [r0, #0]
 8008740:	2032      	movs	r0, #50	@ 0x32
 8008742:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008746:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008748:	fba1 1303 	umull	r1, r3, r1, r3
 800874c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800874e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008750:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008754:	d5e1      	bpl.n	800871a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008756:	e001      	b.n	800875c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0de      	beq.n	800871a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800875c:	6951      	ldr	r1, [r2, #20]
 800875e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008760:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008764:	d5d9      	bpl.n	800871a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008766:	e7f7      	b.n	8008758 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8008768:	40007000 	.word	0x40007000
 800876c:	20000000 	.word	0x20000000
 8008770:	431bde83 	.word	0x431bde83

08008774 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008774:	4a02      	ldr	r2, [pc, #8]	@ (8008780 <HAL_PWREx_EnableVddUSB+0xc>)
 8008776:	6853      	ldr	r3, [r2, #4]
 8008778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800877c:	6053      	str	r3, [r2, #4]
}
 800877e:	4770      	bx	lr
 8008780:	40007000 	.word	0x40007000

08008784 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008784:	4a02      	ldr	r2, [pc, #8]	@ (8008790 <HAL_PWREx_EnableVddIO2+0xc>)
 8008786:	6853      	ldr	r3, [r2, #4]
 8008788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800878c:	6053      	str	r3, [r2, #4]
}
 800878e:	4770      	bx	lr
 8008790:	40007000 	.word	0x40007000

08008794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008794:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008796:	4d1e      	ldr	r5, [pc, #120]	@ (8008810 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8008798:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800879a:	00db      	lsls	r3, r3, #3
{
 800879c:	b083      	sub	sp, #12
 800879e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80087a0:	d51b      	bpl.n	80087da <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80087a2:	f7ff ff65 	bl	8008670 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087a6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80087aa:	d028      	beq.n	80087fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80087ac:	2c7f      	cmp	r4, #127	@ 0x7f
 80087ae:	d812      	bhi.n	80087d6 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80087b0:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80087b4:	fab4 f484 	clz	r4, r4
 80087b8:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80087ba:	4916      	ldr	r1, [pc, #88]	@ (8008814 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80087bc:	680b      	ldr	r3, [r1, #0]
 80087be:	f023 030f 	bic.w	r3, r3, #15
 80087c2:	4323      	orrs	r3, r4
 80087c4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80087c6:	6808      	ldr	r0, [r1, #0]
 80087c8:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80087cc:	1b00      	subs	r0, r0, r4
 80087ce:	bf18      	it	ne
 80087d0:	2001      	movne	r0, #1
 80087d2:	b003      	add	sp, #12
 80087d4:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80087d6:	2402      	movs	r4, #2
 80087d8:	e7ef      	b.n	80087ba <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 80087da:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80087dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80087e2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80087ec:	f7ff ff40 	bl	8008670 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80087f0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087f2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80087f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087fa:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087fc:	d1d6      	bne.n	80087ac <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80087fe:	2c80      	cmp	r4, #128	@ 0x80
 8008800:	d904      	bls.n	800880c <RCC_SetFlashLatencyFromMSIRange+0x78>
        latency = FLASH_LATENCY_2; /* 2WS */
 8008802:	2ca1      	cmp	r4, #161	@ 0xa1
 8008804:	bf34      	ite	cc
 8008806:	2401      	movcc	r4, #1
 8008808:	2402      	movcs	r4, #2
 800880a:	e7d6      	b.n	80087ba <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800880c:	2400      	movs	r4, #0
 800880e:	e7d4      	b.n	80087ba <RCC_SetFlashLatencyFromMSIRange+0x26>
 8008810:	40021000 	.word	0x40021000
 8008814:	40022000 	.word	0x40022000

08008818 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008818:	4a28      	ldr	r2, [pc, #160]	@ (80088bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800881a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800881c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800881e:	f013 030c 	ands.w	r3, r3, #12
 8008822:	d005      	beq.n	8008830 <HAL_RCC_GetSysClockFreq+0x18>
 8008824:	2b0c      	cmp	r3, #12
 8008826:	d035      	beq.n	8008894 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008828:	2b04      	cmp	r3, #4
 800882a:	d141      	bne.n	80088b0 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 800882c:	4824      	ldr	r0, [pc, #144]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800882e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008830:	4a22      	ldr	r2, [pc, #136]	@ (80088bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8008832:	6811      	ldr	r1, [r2, #0]
 8008834:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008836:	bf54      	ite	pl
 8008838:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800883c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800883e:	4921      	ldr	r1, [pc, #132]	@ (80088c4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008840:	bf54      	ite	pl
 8008842:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008846:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800884a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800884e:	b303      	cbz	r3, 8008892 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d11d      	bne.n	8008890 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008854:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800885c:	2b02      	cmp	r3, #2
 800885e:	d025      	beq.n	80088ac <HAL_RCC_GetSysClockFreq+0x94>
 8008860:	4a19      	ldr	r2, [pc, #100]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008862:	2b03      	cmp	r3, #3
 8008864:	bf08      	it	eq
 8008866:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008868:	4b14      	ldr	r3, [pc, #80]	@ (80088bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800886a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800886c:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008874:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008878:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800887c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800887e:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008882:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008884:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008886:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800888a:	fbb2 f0f3 	udiv	r0, r2, r3
 800888e:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008890:	2000      	movs	r0, #0
}
 8008892:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008894:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008898:	2a01      	cmp	r2, #1
 800889a:	d0c9      	beq.n	8008830 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80088a4:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80088a6:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80088aa:	d1d9      	bne.n	8008860 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80088ac:	4804      	ldr	r0, [pc, #16]	@ (80088c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80088ae:	e7db      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	4805      	ldr	r0, [pc, #20]	@ (80088c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80088b4:	bf18      	it	ne
 80088b6:	2000      	movne	r0, #0
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	40021000 	.word	0x40021000
 80088c0:	00f42400 	.word	0x00f42400
 80088c4:	0800b4ac 	.word	0x0800b4ac
 80088c8:	007a1200 	.word	0x007a1200

080088cc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f000 822f 	beq.w	8008d30 <HAL_RCC_OscConfig+0x464>
{
 80088d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088d6:	4a93      	ldr	r2, [pc, #588]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80088d8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088da:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088dc:	68d6      	ldr	r6, [r2, #12]
 80088de:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80088e0:	06d8      	lsls	r0, r3, #27
{
 80088e2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088e8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80088ec:	d52e      	bpl.n	800894c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	f000 8121 	beq.w	8008b36 <HAL_RCC_OscConfig+0x26a>
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	f000 811b 	beq.w	8008b30 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088fa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80088fc:	4f89      	ldr	r7, [pc, #548]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8191 	beq.w	8008c26 <HAL_RCC_OscConfig+0x35a>
        __HAL_RCC_MSI_ENABLE();
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800890c:	f7ff fc60 	bl	80081d0 <HAL_GetTick>
 8008910:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008912:	e006      	b.n	8008922 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008914:	f7ff fc5c 	bl	80081d0 <HAL_GetTick>
 8008918:	eba0 0008 	sub.w	r0, r0, r8
 800891c:	2802      	cmp	r0, #2
 800891e:	f200 8192 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	079b      	lsls	r3, r3, #30
 8008926:	d5f5      	bpl.n	8008914 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f043 0308 	orr.w	r3, r3, #8
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	6a22      	ldr	r2, [r4, #32]
 8008934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008938:	4313      	orrs	r3, r2
 800893a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69e2      	ldr	r2, [r4, #28]
 8008940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008948:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	07d9      	lsls	r1, r3, #31
 800894e:	f100 80bf 	bmi.w	8008ad0 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008952:	0799      	lsls	r1, r3, #30
 8008954:	d523      	bpl.n	800899e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008956:	2d04      	cmp	r5, #4
 8008958:	f000 8155 	beq.w	8008c06 <HAL_RCC_OscConfig+0x33a>
 800895c:	2d0c      	cmp	r5, #12
 800895e:	f000 814f 	beq.w	8008c00 <HAL_RCC_OscConfig+0x334>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008962:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8008964:	4e6f      	ldr	r6, [pc, #444]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8188 	beq.w	8008c7c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_ENABLE();
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008972:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008974:	f7ff fc2c 	bl	80081d0 <HAL_GetTick>
 8008978:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800897a:	e005      	b.n	8008988 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800897c:	f7ff fc28 	bl	80081d0 <HAL_GetTick>
 8008980:	1bc0      	subs	r0, r0, r7
 8008982:	2802      	cmp	r0, #2
 8008984:	f200 815f 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	055b      	lsls	r3, r3, #21
 800898c:	d5f6      	bpl.n	800897c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800898e:	6873      	ldr	r3, [r6, #4]
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008996:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800899a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	0719      	lsls	r1, r3, #28
 80089a0:	d519      	bpl.n	80089d6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089a2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80089a4:	4e5f      	ldr	r6, [pc, #380]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8116 	beq.w	8008bd8 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_LSI_ENABLE();
 80089ac:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80089b8:	f7ff fc0a 	bl	80081d0 <HAL_GetTick>
 80089bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089be:	e005      	b.n	80089cc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c0:	f7ff fc06 	bl	80081d0 <HAL_GetTick>
 80089c4:	1bc0      	subs	r0, r0, r7
 80089c6:	2802      	cmp	r0, #2
 80089c8:	f200 813d 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089cc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80089d0:	079a      	lsls	r2, r3, #30
 80089d2:	d5f5      	bpl.n	80089c0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	075f      	lsls	r7, r3, #29
 80089d8:	d53f      	bpl.n	8008a5a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80089da:	4b52      	ldr	r3, [pc, #328]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
 80089dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089de:	00d6      	lsls	r6, r2, #3
 80089e0:	f100 814a 	bmi.w	8008c78 <HAL_RCC_OscConfig+0x3ac>
      __HAL_RCC_PWR_CLK_ENABLE();
 80089e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80089ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80089ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80089f6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089f8:	4f4b      	ldr	r7, [pc, #300]	@ (8008b28 <HAL_RCC_OscConfig+0x25c>)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	05d8      	lsls	r0, r3, #23
 80089fe:	f140 8199 	bpl.w	8008d34 <HAL_RCC_OscConfig+0x468>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	f000 814b 	beq.w	8008ca0 <HAL_RCC_OscConfig+0x3d4>
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	f000 81bd 	beq.w	8008d8a <HAL_RCC_OscConfig+0x4be>
 8008a10:	4f44      	ldr	r7, [pc, #272]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
 8008a12:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008a1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008a22:	f022 0204 	bic.w	r2, r2, #4
 8008a26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f040 813f 	bne.w	8008cae <HAL_RCC_OscConfig+0x3e2>
      tickstart = HAL_GetTick();
 8008a30:	f7ff fbce 	bl	80081d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a34:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008a38:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a3a:	e006      	b.n	8008a4a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7ff fbc8 	bl	80081d0 <HAL_GetTick>
 8008a40:	eba0 0008 	sub.w	r0, r0, r8
 8008a44:	4548      	cmp	r0, r9
 8008a46:	f200 80fe 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a4e:	079b      	lsls	r3, r3, #30
 8008a50:	d4f4      	bmi.n	8008a3c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	f040 8180 	bne.w	8008d58 <HAL_RCC_OscConfig+0x48c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	069e      	lsls	r6, r3, #26
 8008a5c:	d518      	bpl.n	8008a90 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8008a60:	4e30      	ldr	r6, [pc, #192]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8150 	beq.w	8008d08 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSI48_ENABLE();
 8008a68:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8008a74:	f7ff fbac 	bl	80081d0 <HAL_GetTick>
 8008a78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a7a:	e005      	b.n	8008a88 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a7c:	f7ff fba8 	bl	80081d0 <HAL_GetTick>
 8008a80:	1bc0      	subs	r0, r0, r7
 8008a82:	2802      	cmp	r0, #2
 8008a84:	f200 80df 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a88:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8008a8c:	0798      	lsls	r0, r3, #30
 8008a8e:	d5f5      	bpl.n	8008a7c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a92:	b1db      	cbz	r3, 8008acc <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	f000 8186 	beq.w	8008da6 <HAL_RCC_OscConfig+0x4da>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a9a:	2d0c      	cmp	r5, #12
 8008a9c:	f000 808c 	beq.w	8008bb8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_DISABLE();
 8008aa0:	4c20      	ldr	r4, [pc, #128]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008aaa:	f7ff fb91 	bl	80081d0 <HAL_GetTick>
 8008aae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ab0:	e005      	b.n	8008abe <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab2:	f7ff fb8d 	bl	80081d0 <HAL_GetTick>
 8008ab6:	1b40      	subs	r0, r0, r5
 8008ab8:	2802      	cmp	r0, #2
 8008aba:	f200 80c4 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	019b      	lsls	r3, r3, #6
 8008ac2:	d4f6      	bmi.n	8008ab2 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ac4:	68e2      	ldr	r2, [r4, #12]
 8008ac6:	4b19      	ldr	r3, [pc, #100]	@ (8008b2c <HAL_RCC_OscConfig+0x260>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8008acc:	2000      	movs	r0, #0
 8008ace:	e074      	b.n	8008bba <HAL_RCC_OscConfig+0x2ee>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008ad0:	2d08      	cmp	r5, #8
 8008ad2:	d077      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x2f8>
 8008ad4:	2d0c      	cmp	r5, #12
 8008ad6:	d073      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ade:	f000 80b6 	beq.w	8008c4e <HAL_RCC_OscConfig+0x382>
 8008ae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ae6:	f000 8143 	beq.w	8008d70 <HAL_RCC_OscConfig+0x4a4>
 8008aea:	4f0e      	ldr	r7, [pc, #56]	@ (8008b24 <HAL_RCC_OscConfig+0x258>)
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008af2:	603a      	str	r2, [r7, #0]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008afa:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 80ab 	bne.w	8008c58 <HAL_RCC_OscConfig+0x38c>
        tickstart = HAL_GetTick();
 8008b02:	f7ff fb65 	bl	80081d0 <HAL_GetTick>
 8008b06:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b08:	e006      	b.n	8008b18 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b0a:	f7ff fb61 	bl	80081d0 <HAL_GetTick>
 8008b0e:	eba0 0008 	sub.w	r0, r0, r8
 8008b12:	2864      	cmp	r0, #100	@ 0x64
 8008b14:	f200 8097 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	0398      	lsls	r0, r3, #14
 8008b1c:	d4f5      	bmi.n	8008b0a <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	e717      	b.n	8008952 <HAL_RCC_OscConfig+0x86>
 8008b22:	bf00      	nop
 8008b24:	40021000 	.word	0x40021000
 8008b28:	40007000 	.word	0x40007000
 8008b2c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b30:	2e01      	cmp	r6, #1
 8008b32:	f47f aee2 	bne.w	80088fa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b36:	4ba9      	ldr	r3, [pc, #676]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	0799      	lsls	r1, r3, #30
 8008b3c:	d439      	bmi.n	8008bb2 <HAL_RCC_OscConfig+0x2e6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b3e:	4ba7      	ldr	r3, [pc, #668]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008b40:	6a20      	ldr	r0, [r4, #32]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	0712      	lsls	r2, r2, #28
 8008b46:	bf56      	itet	pl
 8008b48:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8008b4c:	681b      	ldrmi	r3, [r3, #0]
 8008b4e:	091b      	lsrpl	r3, r3, #4
 8008b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b54:	4298      	cmp	r0, r3
 8008b56:	f200 80bf 	bhi.w	8008cd8 <HAL_RCC_OscConfig+0x40c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b5a:	4ba0      	ldr	r3, [pc, #640]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	f042 0208 	orr.w	r2, r2, #8
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008b6a:	4302      	orrs	r2, r0
 8008b6c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	69e1      	ldr	r1, [r4, #28]
 8008b72:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008b76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008b7a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	f000 80f1 	beq.w	8008d64 <HAL_RCC_OscConfig+0x498>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b82:	f7ff fe49 	bl	8008818 <HAL_RCC_GetSysClockFreq>
 8008b86:	4b95      	ldr	r3, [pc, #596]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008b88:	4a95      	ldr	r2, [pc, #596]	@ (8008de0 <HAL_RCC_OscConfig+0x514>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008b90:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8008b92:	4a94      	ldr	r2, [pc, #592]	@ (8008de4 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8008b9c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b9e:	4a92      	ldr	r2, [pc, #584]	@ (8008de8 <HAL_RCC_OscConfig+0x51c>)
 8008ba0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8008ba2:	f7ff fad3 	bl	800814c <HAL_InitTick>
        if(status != HAL_OK)
 8008ba6:	b940      	cbnz	r0, 8008bba <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07d9      	lsls	r1, r3, #31
 8008bac:	f57f aed1 	bpl.w	8008952 <HAL_RCC_OscConfig+0x86>
 8008bb0:	e78e      	b.n	8008ad0 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008bb2:	69a3      	ldr	r3, [r4, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1c2      	bne.n	8008b3e <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 8008bb8:	2001      	movs	r0, #1
}
 8008bba:	b003      	add	sp, #12
 8008bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008bc0:	2e03      	cmp	r6, #3
 8008bc2:	d189      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bc4:	4a85      	ldr	r2, [pc, #532]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	0392      	lsls	r2, r2, #14
 8008bca:	f57f aec2 	bpl.w	8008952 <HAL_RCC_OscConfig+0x86>
 8008bce:	6862      	ldr	r2, [r4, #4]
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	f47f aebe 	bne.w	8008952 <HAL_RCC_OscConfig+0x86>
 8008bd6:	e7ef      	b.n	8008bb8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_DISABLE();
 8008bd8:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8008be4:	f7ff faf4 	bl	80081d0 <HAL_GetTick>
 8008be8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bea:	e004      	b.n	8008bf6 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bec:	f7ff faf0 	bl	80081d0 <HAL_GetTick>
 8008bf0:	1bc0      	subs	r0, r0, r7
 8008bf2:	2802      	cmp	r0, #2
 8008bf4:	d827      	bhi.n	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bf6:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8008bfa:	079b      	lsls	r3, r3, #30
 8008bfc:	d4f6      	bmi.n	8008bec <HAL_RCC_OscConfig+0x320>
 8008bfe:	e6e9      	b.n	80089d4 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c00:	2e02      	cmp	r6, #2
 8008c02:	f47f aeae 	bne.w	8008962 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c06:	4a75      	ldr	r2, [pc, #468]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	0552      	lsls	r2, r2, #21
 8008c0c:	d502      	bpl.n	8008c14 <HAL_RCC_OscConfig+0x348>
 8008c0e:	68e2      	ldr	r2, [r4, #12]
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	d0d1      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c14:	4971      	ldr	r1, [pc, #452]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008c16:	6920      	ldr	r0, [r4, #16]
 8008c18:	684a      	ldr	r2, [r1, #4]
 8008c1a:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8008c1e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8008c22:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c24:	e6bb      	b.n	800899e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8008c2e:	f7ff facf 	bl	80081d0 <HAL_GetTick>
 8008c32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	0798      	lsls	r0, r3, #30
 8008c38:	d5b6      	bpl.n	8008ba8 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c3a:	f7ff fac9 	bl	80081d0 <HAL_GetTick>
 8008c3e:	eba0 0008 	sub.w	r0, r0, r8
 8008c42:	2802      	cmp	r0, #2
 8008c44:	d9f6      	bls.n	8008c34 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8008c46:	2003      	movs	r0, #3
}
 8008c48:	b003      	add	sp, #12
 8008c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c4e:	4a63      	ldr	r2, [pc, #396]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008c58:	f7ff faba 	bl	80081d0 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c5c:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008ddc <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8008c60:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c62:	e004      	b.n	8008c6e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c64:	f7ff fab4 	bl	80081d0 <HAL_GetTick>
 8008c68:	1bc0      	subs	r0, r0, r7
 8008c6a:	2864      	cmp	r0, #100	@ 0x64
 8008c6c:	d8eb      	bhi.n	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c72:	039b      	lsls	r3, r3, #14
 8008c74:	d5f6      	bpl.n	8008c64 <HAL_RCC_OscConfig+0x398>
 8008c76:	e752      	b.n	8008b1e <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 8008c78:	2600      	movs	r6, #0
 8008c7a:	e6bd      	b.n	80089f8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c82:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008c84:	f7ff faa4 	bl	80081d0 <HAL_GetTick>
 8008c88:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c8a:	e004      	b.n	8008c96 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c8c:	f7ff faa0 	bl	80081d0 <HAL_GetTick>
 8008c90:	1bc0      	subs	r0, r0, r7
 8008c92:	2802      	cmp	r0, #2
 8008c94:	d8d7      	bhi.n	8008c46 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c96:	6833      	ldr	r3, [r6, #0]
 8008c98:	0558      	lsls	r0, r3, #21
 8008c9a:	d4f7      	bmi.n	8008c8c <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	e67e      	b.n	800899e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008ca2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008ca6:	f043 0301 	orr.w	r3, r3, #1
 8008caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8008cae:	f7ff fa8f 	bl	80081d0 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cb2:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8008ddc <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8008cb6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb8:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cbc:	e004      	b.n	8008cc8 <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cbe:	f7ff fa87 	bl	80081d0 <HAL_GetTick>
 8008cc2:	1bc0      	subs	r0, r0, r7
 8008cc4:	4548      	cmp	r0, r9
 8008cc6:	d8be      	bhi.n	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc8:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8008ccc:	079a      	lsls	r2, r3, #30
 8008cce:	d5f6      	bpl.n	8008cbe <HAL_RCC_OscConfig+0x3f2>
    if(pwrclkchanged == SET)
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	f43f aec1 	beq.w	8008a58 <HAL_RCC_OscConfig+0x18c>
 8008cd6:	e03f      	b.n	8008d58 <HAL_RCC_OscConfig+0x48c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008cd8:	f7ff fd5c 	bl	8008794 <RCC_SetFlashLatencyFromMSIRange>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f47f af6b 	bne.w	8008bb8 <HAL_RCC_OscConfig+0x2ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	f042 0208 	orr.w	r2, r2, #8
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	6a21      	ldr	r1, [r4, #32]
 8008cf0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	69e1      	ldr	r1, [r4, #28]
 8008cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008d00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	e73c      	b.n	8008b82 <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8008d08:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8008d14:	f7ff fa5c 	bl	80081d0 <HAL_GetTick>
 8008d18:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d1a:	e004      	b.n	8008d26 <HAL_RCC_OscConfig+0x45a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d1c:	f7ff fa58 	bl	80081d0 <HAL_GetTick>
 8008d20:	1bc0      	subs	r0, r0, r7
 8008d22:	2802      	cmp	r0, #2
 8008d24:	d88f      	bhi.n	8008c46 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d26:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8008d2a:	0799      	lsls	r1, r3, #30
 8008d2c:	d4f6      	bmi.n	8008d1c <HAL_RCC_OscConfig+0x450>
 8008d2e:	e6af      	b.n	8008a90 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8008d30:	2001      	movs	r0, #1
}
 8008d32:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d3a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008d3c:	f7ff fa48 	bl	80081d0 <HAL_GetTick>
 8008d40:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	05d9      	lsls	r1, r3, #23
 8008d46:	f53f ae5c 	bmi.w	8008a02 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d4a:	f7ff fa41 	bl	80081d0 <HAL_GetTick>
 8008d4e:	eba0 0008 	sub.w	r0, r0, r8
 8008d52:	2802      	cmp	r0, #2
 8008d54:	d9f5      	bls.n	8008d42 <HAL_RCC_OscConfig+0x476>
 8008d56:	e776      	b.n	8008c46 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d58:	4a20      	ldr	r2, [pc, #128]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008d5a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d62:	e679      	b.n	8008a58 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d64:	f7ff fd16 	bl	8008794 <RCC_SetFlashLatencyFromMSIRange>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f43f af0a 	beq.w	8008b82 <HAL_RCC_OscConfig+0x2b6>
 8008d6e:	e723      	b.n	8008bb8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d74:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008d86:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d88:	e766      	b.n	8008c58 <HAL_RCC_OscConfig+0x38c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d8a:	4b14      	ldr	r3, [pc, #80]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008d8c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008d90:	f042 0204 	orr.w	r2, r2, #4
 8008d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008d98:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008da4:	e783      	b.n	8008cae <HAL_RCC_OscConfig+0x3e2>
      pll_config = RCC->PLLCFGR;
 8008da6:	4e0d      	ldr	r6, [pc, #52]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8008daa:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dac:	f003 0103 	and.w	r1, r3, #3
 8008db0:	4291      	cmp	r1, r2
 8008db2:	d055      	beq.n	8008e60 <HAL_RCC_OscConfig+0x594>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008db4:	2d0c      	cmp	r5, #12
 8008db6:	f43f aeff 	beq.w	8008bb8 <HAL_RCC_OscConfig+0x2ec>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008dba:	4d08      	ldr	r5, [pc, #32]	@ (8008ddc <HAL_RCC_OscConfig+0x510>)
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	f53f aefa 	bmi.w	8008bb8 <HAL_RCC_OscConfig+0x2ec>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	f53f aef6 	bmi.w	8008bb8 <HAL_RCC_OscConfig+0x2ec>
            __HAL_RCC_PLL_DISABLE();
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dd2:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8008dd4:	f7ff f9fc 	bl	80081d0 <HAL_GetTick>
 8008dd8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dda:	e00d      	b.n	8008df8 <HAL_RCC_OscConfig+0x52c>
 8008ddc:	40021000 	.word	0x40021000
 8008de0:	0800b4e4 	.word	0x0800b4e4
 8008de4:	20004800 	.word	0x20004800
 8008de8:	20000000 	.word	0x20000000
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dec:	f7ff f9f0 	bl	80081d0 <HAL_GetTick>
 8008df0:	1b80      	subs	r0, r0, r6
 8008df2:	2802      	cmp	r0, #2
 8008df4:	f63f af27 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	019f      	lsls	r7, r3, #6
 8008dfc:	d4f6      	bmi.n	8008dec <HAL_RCC_OscConfig+0x520>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dfe:	68e9      	ldr	r1, [r5, #12]
 8008e00:	4b36      	ldr	r3, [pc, #216]	@ (8008edc <HAL_RCC_OscConfig+0x610>)
 8008e02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008e04:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e06:	4e36      	ldr	r6, [pc, #216]	@ (8008ee0 <HAL_RCC_OscConfig+0x614>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e08:	400b      	ands	r3, r1
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8008e10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008e14:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008e18:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8008e1c:	3801      	subs	r0, #1
 8008e1e:	0849      	lsrs	r1, r1, #1
 8008e20:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008e24:	3901      	subs	r1, #1
 8008e26:	0852      	lsrs	r2, r2, #1
 8008e28:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8008e2c:	3a01      	subs	r2, #1
 8008e2e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008e32:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e3a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e3c:	68eb      	ldr	r3, [r5, #12]
 8008e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e42:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8008e44:	f7ff f9c4 	bl	80081d0 <HAL_GetTick>
 8008e48:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e4a:	e005      	b.n	8008e58 <HAL_RCC_OscConfig+0x58c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e4c:	f7ff f9c0 	bl	80081d0 <HAL_GetTick>
 8008e50:	1b00      	subs	r0, r0, r4
 8008e52:	2802      	cmp	r0, #2
 8008e54:	f63f aef7 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	0198      	lsls	r0, r3, #6
 8008e5c:	d5f6      	bpl.n	8008e4c <HAL_RCC_OscConfig+0x580>
 8008e5e:	e635      	b.n	8008acc <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008e62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e66:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e68:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008e6c:	d1a2      	bne.n	8008db4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e74:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008e78:	d19c      	bne.n	8008db4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e7a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008e7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e80:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008e84:	d196      	bne.n	8008db4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e86:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008e88:	0852      	lsrs	r2, r2, #1
 8008e8a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8008e8e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e90:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008e94:	d18e      	bne.n	8008db4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008e98:	0852      	lsrs	r2, r2, #1
 8008e9a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8008e9e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ea0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008ea4:	d186      	bne.n	8008db4 <HAL_RCC_OscConfig+0x4e8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ea6:	6833      	ldr	r3, [r6, #0]
 8008ea8:	0199      	lsls	r1, r3, #6
 8008eaa:	f53f ae0f 	bmi.w	8008acc <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 8008eae:	6833      	ldr	r3, [r6, #0]
 8008eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008eb4:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008eb6:	68f3      	ldr	r3, [r6, #12]
 8008eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ebc:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8008ebe:	f7ff f987 	bl	80081d0 <HAL_GetTick>
 8008ec2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ec4:	e005      	b.n	8008ed2 <HAL_RCC_OscConfig+0x606>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ec6:	f7ff f983 	bl	80081d0 <HAL_GetTick>
 8008eca:	1b03      	subs	r3, r0, r4
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	f63f aeba 	bhi.w	8008c46 <HAL_RCC_OscConfig+0x37a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	019a      	lsls	r2, r3, #6
 8008ed6:	d5f6      	bpl.n	8008ec6 <HAL_RCC_OscConfig+0x5fa>
 8008ed8:	e5f8      	b.n	8008acc <HAL_RCC_OscConfig+0x200>
 8008eda:	bf00      	nop
 8008edc:	019d800c 	.word	0x019d800c
 8008ee0:	40021000 	.word	0x40021000

08008ee4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f000 80c6 	beq.w	8009076 <HAL_RCC_ClockConfig+0x192>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008eea:	4a86      	ldr	r2, [pc, #536]	@ (8009104 <HAL_RCC_ClockConfig+0x220>)
{
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4604      	mov	r4, r0
 8008efc:	d20c      	bcs.n	8008f18 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	f023 030f 	bic.w	r3, r3, #15
 8008f04:	430b      	orrs	r3, r1
 8008f06:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f08:	6813      	ldr	r3, [r2, #0]
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	428b      	cmp	r3, r1
 8008f10:	d002      	beq.n	8008f18 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008f12:	2001      	movs	r0, #1
}
 8008f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	0798      	lsls	r0, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f1c:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f20:	f140 8088 	bpl.w	8009034 <HAL_RCC_ClockConfig+0x150>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f24:	4e78      	ldr	r6, [pc, #480]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008f26:	68a0      	ldr	r0, [r4, #8]
 8008f28:	68b1      	ldr	r1, [r6, #8]
 8008f2a:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8008f2e:	4288      	cmp	r0, r1
 8008f30:	d904      	bls.n	8008f3c <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f32:	68b1      	ldr	r1, [r6, #8]
 8008f34:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8008f38:	4301      	orrs	r1, r0
 8008f3a:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	d03c      	beq.n	8008fba <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f40:	6867      	ldr	r7, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f42:	4b71      	ldr	r3, [pc, #452]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f44:	2f03      	cmp	r7, #3
 8008f46:	d07b      	beq.n	8009040 <HAL_RCC_ClockConfig+0x15c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f48:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f4a:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f4c:	f000 808f 	beq.w	800906e <HAL_RCC_ClockConfig+0x18a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f50:	2f00      	cmp	r7, #0
 8008f52:	f040 8094 	bne.w	800907e <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f56:	079e      	lsls	r6, r3, #30
 8008f58:	d5db      	bpl.n	8008f12 <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008f5a:	f7ff fc5d 	bl	8008818 <HAL_RCC_GetSysClockFreq>
 8008f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800910c <HAL_RCC_ClockConfig+0x228>)
 8008f60:	4298      	cmp	r0, r3
 8008f62:	d905      	bls.n	8008f70 <HAL_RCC_ClockConfig+0x8c>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f64:	4b68      	ldr	r3, [pc, #416]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8008f6c:	f000 808b 	beq.w	8009086 <HAL_RCC_ClockConfig+0x1a2>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f70:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f74:	4e64      	ldr	r6, [pc, #400]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008f76:	68b3      	ldr	r3, [r6, #8]
 8008f78:	f023 0303 	bic.w	r3, r3, #3
 8008f7c:	433b      	orrs	r3, r7
 8008f7e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008f80:	f7ff f926 	bl	80081d0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f84:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8008f88:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f8a:	e004      	b.n	8008f96 <HAL_RCC_ClockConfig+0xb2>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f8c:	f7ff f920 	bl	80081d0 <HAL_GetTick>
 8008f90:	1bc0      	subs	r0, r0, r7
 8008f92:	4540      	cmp	r0, r8
 8008f94:	d871      	bhi.n	800907a <HAL_RCC_ClockConfig+0x196>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f96:	68b3      	ldr	r3, [r6, #8]
 8008f98:	6862      	ldr	r2, [r4, #4]
 8008f9a:	f003 030c 	and.w	r3, r3, #12
 8008f9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008fa2:	d1f3      	bne.n	8008f8c <HAL_RCC_ClockConfig+0xa8>
  if(hpre == RCC_SYSCLK_DIV2)
 8008fa4:	f1b9 0f00 	cmp.w	r9, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0xce>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008faa:	68b3      	ldr	r3, [r6, #8]
 8008fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fb0:	60b3      	str	r3, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	0799      	lsls	r1, r3, #30
 8008fb6:	d506      	bpl.n	8008fc6 <HAL_RCC_ClockConfig+0xe2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008fb8:	68a0      	ldr	r0, [r4, #8]
 8008fba:	4953      	ldr	r1, [pc, #332]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008fbc:	688a      	ldr	r2, [r1, #8]
 8008fbe:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8008fc2:	4282      	cmp	r2, r0
 8008fc4:	d84d      	bhi.n	8009062 <HAL_RCC_ClockConfig+0x17e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fc6:	494f      	ldr	r1, [pc, #316]	@ (8009104 <HAL_RCC_ClockConfig+0x220>)
 8008fc8:	680a      	ldr	r2, [r1, #0]
 8008fca:	f002 020f 	and.w	r2, r2, #15
 8008fce:	42aa      	cmp	r2, r5
 8008fd0:	d909      	bls.n	8008fe6 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fd2:	680a      	ldr	r2, [r1, #0]
 8008fd4:	f022 020f 	bic.w	r2, r2, #15
 8008fd8:	432a      	orrs	r2, r5
 8008fda:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fdc:	680a      	ldr	r2, [r1, #0]
 8008fde:	f002 020f 	and.w	r2, r2, #15
 8008fe2:	42aa      	cmp	r2, r5
 8008fe4:	d195      	bne.n	8008f12 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe6:	075a      	lsls	r2, r3, #29
 8008fe8:	d506      	bpl.n	8008ff8 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fea:	4947      	ldr	r1, [pc, #284]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008fec:	68e0      	ldr	r0, [r4, #12]
 8008fee:	688a      	ldr	r2, [r1, #8]
 8008ff0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ff4:	4302      	orrs	r2, r0
 8008ff6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ff8:	071b      	lsls	r3, r3, #28
 8008ffa:	d507      	bpl.n	800900c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ffc:	4a42      	ldr	r2, [pc, #264]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8008ffe:	6921      	ldr	r1, [r4, #16]
 8009000:	6893      	ldr	r3, [r2, #8]
 8009002:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009006:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800900a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800900c:	f7ff fc04 	bl	8008818 <HAL_RCC_GetSysClockFreq>
 8009010:	4a3d      	ldr	r2, [pc, #244]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
 8009012:	4c3f      	ldr	r4, [pc, #252]	@ (8009110 <HAL_RCC_ClockConfig+0x22c>)
 8009014:	6892      	ldr	r2, [r2, #8]
 8009016:	493f      	ldr	r1, [pc, #252]	@ (8009114 <HAL_RCC_ClockConfig+0x230>)
 8009018:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800901c:	4603      	mov	r3, r0
 800901e:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8009020:	483d      	ldr	r0, [pc, #244]	@ (8009118 <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009022:	f002 021f 	and.w	r2, r2, #31
 8009026:	40d3      	lsrs	r3, r2
 8009028:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800902a:	6800      	ldr	r0, [r0, #0]
}
 800902c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8009030:	f7ff b88c 	b.w	800814c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009034:	2a00      	cmp	r2, #0
 8009036:	d0c6      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0xe2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009038:	6867      	ldr	r7, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800903a:	4b33      	ldr	r3, [pc, #204]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800903c:	2f03      	cmp	r7, #3
 800903e:	d183      	bne.n	8008f48 <HAL_RCC_ClockConfig+0x64>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	0191      	lsls	r1, r2, #6
 8009044:	f57f af65 	bpl.w	8008f12 <HAL_RCC_ClockConfig+0x2e>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 800904e:	2a02      	cmp	r2, #2
 8009050:	d055      	beq.n	80090fe <HAL_RCC_ClockConfig+0x21a>
 8009052:	2a03      	cmp	r2, #3
 8009054:	d020      	beq.n	8009098 <HAL_RCC_ClockConfig+0x1b4>
 8009056:	2a01      	cmp	r2, #1
 8009058:	d042      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x1fc>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800905a:	68da      	ldr	r2, [r3, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800905c:	68da      	ldr	r2, [r3, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800905e:	68db      	ldr	r3, [r3, #12]
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
 8009060:	e786      	b.n	8008f70 <HAL_RCC_ClockConfig+0x8c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009062:	688a      	ldr	r2, [r1, #8]
 8009064:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009068:	4302      	orrs	r2, r0
 800906a:	608a      	str	r2, [r1, #8]
 800906c:	e7ab      	b.n	8008fc6 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800906e:	039b      	lsls	r3, r3, #14
 8009070:	f53f af73 	bmi.w	8008f5a <HAL_RCC_ClockConfig+0x76>
 8009074:	e74d      	b.n	8008f12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009076:	2001      	movs	r0, #1
}
 8009078:	4770      	bx	lr
        return HAL_TIMEOUT;
 800907a:	2003      	movs	r0, #3
 800907c:	e74a      	b.n	8008f14 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800907e:	0558      	lsls	r0, r3, #21
 8009080:	f57f af47 	bpl.w	8008f12 <HAL_RCC_ClockConfig+0x2e>
 8009084:	e769      	b.n	8008f5a <HAL_RCC_ClockConfig+0x76>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800908c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009090:	609a      	str	r2, [r3, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009092:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8009096:	e76d      	b.n	8008f74 <HAL_RCC_ClockConfig+0x90>
  switch (pllsource)
 8009098:	4e20      	ldr	r6, [pc, #128]	@ (800911c <HAL_RCC_ClockConfig+0x238>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800909a:	491b      	ldr	r1, [pc, #108]	@ (8009108 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800909c:	481b      	ldr	r0, [pc, #108]	@ (800910c <HAL_RCC_ClockConfig+0x228>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800909e:	68ca      	ldr	r2, [r1, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80090a0:	68cb      	ldr	r3, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80090a6:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090aa:	3201      	adds	r2, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80090ac:	fb06 f303 	mul.w	r3, r6, r3
 80090b0:	fbb3 f3f2 	udiv	r3, r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090b4:	68ca      	ldr	r2, [r1, #12]
 80090b6:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80090ba:	3201      	adds	r2, #1
 80090bc:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco / pllr;
 80090be:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80090c2:	4283      	cmp	r3, r0
 80090c4:	f67f af54 	bls.w	8008f70 <HAL_RCC_ClockConfig+0x8c>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80090c8:	688b      	ldr	r3, [r1, #8]
 80090ca:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 80090ce:	f47f af4f 	bne.w	8008f70 <HAL_RCC_ClockConfig+0x8c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090d2:	688b      	ldr	r3, [r1, #8]
 80090d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090dc:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80090de:	e7d8      	b.n	8009092 <HAL_RCC_ClockConfig+0x1ae>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090e4:	bf54      	ite	pl
 80090e6:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80090ea:	681b      	ldrmi	r3, [r3, #0]
    pllvco = MSIRangeTable[msirange];
 80090ec:	4a0c      	ldr	r2, [pc, #48]	@ (8009120 <HAL_RCC_ClockConfig+0x23c>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090ee:	bf54      	ite	pl
 80090f0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80090f4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 80090f8:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    break;
 80090fc:	e7cd      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
    pllvco = HSI_VALUE;
 80090fe:	4e09      	ldr	r6, [pc, #36]	@ (8009124 <HAL_RCC_ClockConfig+0x240>)
 8009100:	e7cb      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
 8009102:	bf00      	nop
 8009104:	40022000 	.word	0x40022000
 8009108:	40021000 	.word	0x40021000
 800910c:	04c4b400 	.word	0x04c4b400
 8009110:	0800b4e4 	.word	0x0800b4e4
 8009114:	20000000 	.word	0x20000000
 8009118:	20004800 	.word	0x20004800
 800911c:	007a1200 	.word	0x007a1200
 8009120:	0800b4ac 	.word	0x0800b4ac
 8009124:	00f42400 	.word	0x00f42400

08009128 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009128:	4b05      	ldr	r3, [pc, #20]	@ (8009140 <HAL_RCC_GetPCLK1Freq+0x18>)
 800912a:	4a06      	ldr	r2, [pc, #24]	@ (8009144 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800912c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800912e:	4906      	ldr	r1, [pc, #24]	@ (8009148 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009130:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	5cd3      	ldrb	r3, [r2, r3]
 8009138:	f003 031f 	and.w	r3, r3, #31
}
 800913c:	40d8      	lsrs	r0, r3
 800913e:	4770      	bx	lr
 8009140:	40021000 	.word	0x40021000
 8009144:	0800b4dc 	.word	0x0800b4dc
 8009148:	20000000 	.word	0x20000000

0800914c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <HAL_RCC_GetPCLK2Freq+0x18>)
 800914e:	4a06      	ldr	r2, [pc, #24]	@ (8009168 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009150:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009152:	4906      	ldr	r1, [pc, #24]	@ (800916c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009154:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009158:	6808      	ldr	r0, [r1, #0]
 800915a:	5cd3      	ldrb	r3, [r2, r3]
 800915c:	f003 031f 	and.w	r3, r3, #31
}
 8009160:	40d8      	lsrs	r0, r3
 8009162:	4770      	bx	lr
 8009164:	40021000 	.word	0x40021000
 8009168:	0800b4dc 	.word	0x0800b4dc
 800916c:	20000000 	.word	0x20000000

08009170 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009170:	4a3e      	ldr	r2, [pc, #248]	@ (800926c <RCCEx_PLLSAI1_Config+0xfc>)
{
 8009172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009174:	68d6      	ldr	r6, [r2, #12]
{
 8009176:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009178:	07b1      	lsls	r1, r6, #30
{
 800917a:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800917c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800917e:	d006      	beq.n	800918e <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009180:	68d2      	ldr	r2, [r2, #12]
 8009182:	f002 0203 	and.w	r2, r2, #3
 8009186:	4282      	cmp	r2, r0
 8009188:	d011      	beq.n	80091ae <RCCEx_PLLSAI1_Config+0x3e>
 800918a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800918e:	2802      	cmp	r0, #2
 8009190:	d04d      	beq.n	800922e <RCCEx_PLLSAI1_Config+0xbe>
 8009192:	2803      	cmp	r0, #3
 8009194:	d044      	beq.n	8009220 <RCCEx_PLLSAI1_Config+0xb0>
 8009196:	2801      	cmp	r0, #1
 8009198:	d1f7      	bne.n	800918a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	0793      	lsls	r3, r2, #30
 800919e:	d5f5      	bpl.n	800918c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80091a0:	4932      	ldr	r1, [pc, #200]	@ (800926c <RCCEx_PLLSAI1_Config+0xfc>)
 80091a2:	68ca      	ldr	r2, [r1, #12]
 80091a4:	f022 0203 	bic.w	r2, r2, #3
 80091a8:	4302      	orrs	r2, r0
 80091aa:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 80091ac:	e001      	b.n	80091b2 <RCCEx_PLLSAI1_Config+0x42>
       ||
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	d0eb      	beq.n	800918a <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 80091b2:	4e2e      	ldr	r6, [pc, #184]	@ (800926c <RCCEx_PLLSAI1_Config+0xfc>)
 80091b4:	6833      	ldr	r3, [r6, #0]
 80091b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80091bc:	f7ff f808 	bl	80081d0 <HAL_GetTick>
 80091c0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091c2:	e004      	b.n	80091ce <RCCEx_PLLSAI1_Config+0x5e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80091c4:	f7ff f804 	bl	80081d0 <HAL_GetTick>
 80091c8:	1bc3      	subs	r3, r0, r7
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d833      	bhi.n	8009236 <RCCEx_PLLSAI1_Config+0xc6>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091ce:	6833      	ldr	r3, [r6, #0]
 80091d0:	011a      	lsls	r2, r3, #4
 80091d2:	d4f7      	bmi.n	80091c4 <RCCEx_PLLSAI1_Config+0x54>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80091d8:	3a01      	subs	r2, #1
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 80091de:	bb65      	cbnz	r5, 800923a <RCCEx_PLLSAI1_Config+0xca>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091e0:	68e1      	ldr	r1, [r4, #12]
 80091e2:	6930      	ldr	r0, [r6, #16]
 80091e4:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 80091e8:	4921      	ldr	r1, [pc, #132]	@ (8009270 <RCCEx_PLLSAI1_Config+0x100>)
 80091ea:	4001      	ands	r1, r0
 80091ec:	430b      	orrs	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80091f2:	4d1e      	ldr	r5, [pc, #120]	@ (800926c <RCCEx_PLLSAI1_Config+0xfc>)
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80091fc:	f7fe ffe8 	bl	80081d0 <HAL_GetTick>
 8009200:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009202:	e004      	b.n	800920e <RCCEx_PLLSAI1_Config+0x9e>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009204:	f7fe ffe4 	bl	80081d0 <HAL_GetTick>
 8009208:	1b83      	subs	r3, r0, r6
 800920a:	2b02      	cmp	r3, #2
 800920c:	d813      	bhi.n	8009236 <RCCEx_PLLSAI1_Config+0xc6>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	d5f7      	bpl.n	8009204 <RCCEx_PLLSAI1_Config+0x94>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009214:	692b      	ldr	r3, [r5, #16]
 8009216:	69a2      	ldr	r2, [r4, #24]
 8009218:	4313      	orrs	r3, r2
 800921a:	2000      	movs	r0, #0
 800921c:	612b      	str	r3, [r5, #16]
}
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009220:	6811      	ldr	r1, [r2, #0]
 8009222:	038e      	lsls	r6, r1, #14
 8009224:	d4bc      	bmi.n	80091a0 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	0351      	lsls	r1, r2, #13
 800922a:	d5ae      	bpl.n	800918a <RCCEx_PLLSAI1_Config+0x1a>
 800922c:	e7b8      	b.n	80091a0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	0557      	lsls	r7, r2, #21
 8009232:	d5aa      	bpl.n	800918a <RCCEx_PLLSAI1_Config+0x1a>
 8009234:	e7b4      	b.n	80091a0 <RCCEx_PLLSAI1_Config+0x30>
 8009236:	2003      	movs	r0, #3
}
 8009238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800923a:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800923c:	6930      	ldr	r0, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800923e:	d00a      	beq.n	8009256 <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009240:	490c      	ldr	r1, [pc, #48]	@ (8009274 <RCCEx_PLLSAI1_Config+0x104>)
 8009242:	4001      	ands	r1, r0
 8009244:	430b      	orrs	r3, r1
 8009246:	4313      	orrs	r3, r2
 8009248:	6962      	ldr	r2, [r4, #20]
 800924a:	0852      	lsrs	r2, r2, #1
 800924c:	3a01      	subs	r2, #1
 800924e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009252:	6133      	str	r3, [r6, #16]
 8009254:	e7cd      	b.n	80091f2 <RCCEx_PLLSAI1_Config+0x82>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009256:	4908      	ldr	r1, [pc, #32]	@ (8009278 <RCCEx_PLLSAI1_Config+0x108>)
 8009258:	4001      	ands	r1, r0
 800925a:	430b      	orrs	r3, r1
 800925c:	4313      	orrs	r3, r2
 800925e:	6922      	ldr	r2, [r4, #16]
 8009260:	0852      	lsrs	r2, r2, #1
 8009262:	3a01      	subs	r2, #1
 8009264:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009268:	6133      	str	r3, [r6, #16]
 800926a:	e7c2      	b.n	80091f2 <RCCEx_PLLSAI1_Config+0x82>
 800926c:	40021000 	.word	0x40021000
 8009270:	07ff800f 	.word	0x07ff800f
 8009274:	f9ff800f 	.word	0xf9ff800f
 8009278:	ff9f800f 	.word	0xff9f800f

0800927c <RCCEx_PLLSAI2_Config.constprop.0>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800927c:	4a31      	ldr	r2, [pc, #196]	@ (8009344 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 800927e:	68d1      	ldr	r1, [r2, #12]
 8009280:	0789      	lsls	r1, r1, #30
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 8009282:	b570      	push	{r4, r5, r6, lr}
 8009284:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009286:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009288:	d006      	beq.n	8009298 <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800928a:	68d2      	ldr	r2, [r2, #12]
 800928c:	f002 0203 	and.w	r2, r2, #3
 8009290:	4282      	cmp	r2, r0
 8009292:	d011      	beq.n	80092b8 <RCCEx_PLLSAI2_Config.constprop.0+0x3c>
 8009294:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8009296:	bd70      	pop	{r4, r5, r6, pc}
    switch(PllSai2->PLLSAI2Source)
 8009298:	2802      	cmp	r0, #2
 800929a:	d04c      	beq.n	8009336 <RCCEx_PLLSAI2_Config.constprop.0+0xba>
 800929c:	2803      	cmp	r0, #3
 800929e:	d043      	beq.n	8009328 <RCCEx_PLLSAI2_Config.constprop.0+0xac>
 80092a0:	2801      	cmp	r0, #1
 80092a2:	d1f7      	bne.n	8009294 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	d5f5      	bpl.n	8009296 <RCCEx_PLLSAI2_Config.constprop.0+0x1a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80092aa:	4926      	ldr	r1, [pc, #152]	@ (8009344 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 80092ac:	68ca      	ldr	r2, [r1, #12]
 80092ae:	f022 0203 	bic.w	r2, r2, #3
 80092b2:	4302      	orrs	r2, r0
 80092b4:	60ca      	str	r2, [r1, #12]
  if(status == HAL_OK)
 80092b6:	e001      	b.n	80092bc <RCCEx_PLLSAI2_Config.constprop.0+0x40>
       ||
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	d0eb      	beq.n	8009294 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
    __HAL_RCC_PLLSAI2_DISABLE();
 80092bc:	4d21      	ldr	r5, [pc, #132]	@ (8009344 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80092c6:	f7fe ff83 	bl	80081d0 <HAL_GetTick>
 80092ca:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80092cc:	e004      	b.n	80092d8 <RCCEx_PLLSAI2_Config.constprop.0+0x5c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80092ce:	f7fe ff7f 	bl	80081d0 <HAL_GetTick>
 80092d2:	1b83      	subs	r3, r0, r6
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d832      	bhi.n	800933e <RCCEx_PLLSAI2_Config.constprop.0+0xc2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	009a      	lsls	r2, r3, #2
 80092dc:	d4f7      	bmi.n	80092ce <RCCEx_PLLSAI2_Config.constprop.0+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	68a1      	ldr	r1, [r4, #8]
 80092e2:	696a      	ldr	r2, [r5, #20]
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80092e4:	4e17      	ldr	r6, [pc, #92]	@ (8009344 <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80092e6:	06db      	lsls	r3, r3, #27
 80092e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80092ec:	4916      	ldr	r1, [pc, #88]	@ (8009348 <RCCEx_PLLSAI2_Config.constprop.0+0xcc>)
 80092ee:	4011      	ands	r1, r2
 80092f0:	6862      	ldr	r2, [r4, #4]
 80092f2:	430b      	orrs	r3, r1
 80092f4:	3a01      	subs	r2, #1
 80092f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80092fa:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009302:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009304:	f7fe ff64 	bl	80081d0 <HAL_GetTick>
 8009308:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800930a:	e004      	b.n	8009316 <RCCEx_PLLSAI2_Config.constprop.0+0x9a>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800930c:	f7fe ff60 	bl	80081d0 <HAL_GetTick>
 8009310:	1b43      	subs	r3, r0, r5
 8009312:	2b02      	cmp	r3, #2
 8009314:	d813      	bhi.n	800933e <RCCEx_PLLSAI2_Config.constprop.0+0xc2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009316:	6833      	ldr	r3, [r6, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	d5f7      	bpl.n	800930c <RCCEx_PLLSAI2_Config.constprop.0+0x90>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800931c:	6973      	ldr	r3, [r6, #20]
 800931e:	69a2      	ldr	r2, [r4, #24]
 8009320:	4313      	orrs	r3, r2
 8009322:	2000      	movs	r0, #0
 8009324:	6173      	str	r3, [r6, #20]
}
 8009326:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009328:	6811      	ldr	r1, [r2, #0]
 800932a:	038d      	lsls	r5, r1, #14
 800932c:	d4bd      	bmi.n	80092aa <RCCEx_PLLSAI2_Config.constprop.0+0x2e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	0351      	lsls	r1, r2, #13
 8009332:	d5af      	bpl.n	8009294 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 8009334:	e7b9      	b.n	80092aa <RCCEx_PLLSAI2_Config.constprop.0+0x2e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	0556      	lsls	r6, r2, #21
 800933a:	d5ab      	bpl.n	8009294 <RCCEx_PLLSAI2_Config.constprop.0+0x18>
 800933c:	e7b5      	b.n	80092aa <RCCEx_PLLSAI2_Config.constprop.0+0x2e>
    switch(PllSai2->PLLSAI2Source)
 800933e:	2003      	movs	r0, #3
}
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	bf00      	nop
 8009344:	40021000 	.word	0x40021000
 8009348:	07ff800f 	.word	0x07ff800f

0800934c <HAL_RCCEx_PeriphCLKConfig>:
{
 800934c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8009356:	b083      	sub	sp, #12
 8009358:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800935a:	d013      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai1ClockSelection)
 800935c:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800935e:	2940      	cmp	r1, #64	@ 0x40
 8009360:	f000 8209 	beq.w	8009776 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8009364:	f200 8137 	bhi.w	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8009368:	2900      	cmp	r1, #0
 800936a:	f000 81d0 	beq.w	800970e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800936e:	2920      	cmp	r1, #32
 8009370:	f040 8237 	bne.w	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x496>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009374:	3020      	adds	r0, #32
 8009376:	f7ff ff81 	bl	800927c <RCCEx_PLLSAI2_Config.constprop.0>
 800937a:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800937c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800937e:	2e00      	cmp	r6, #0
 8009380:	f000 8206 	beq.w	8009790 <HAL_RCCEx_PeriphCLKConfig+0x444>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009384:	04d9      	lsls	r1, r3, #19
 8009386:	f140 8138 	bpl.w	80095fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    switch(PeriphClkInit->Sai2ClockSelection)
 800938a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800938c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009390:	f000 81f7 	beq.w	8009782 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009394:	f200 8196 	bhi.w	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009398:	2900      	cmp	r1, #0
 800939a:	f000 81c1 	beq.w	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800939e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80093a2:	f040 821c 	bne.w	80097de <HAL_RCCEx_PeriphCLKConfig+0x492>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093a6:	f104 0020 	add.w	r0, r4, #32
 80093aa:	f7ff ff67 	bl	800927c <RCCEx_PLLSAI2_Config.constprop.0>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093b0:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 80093b2:	2f00      	cmp	r7, #0
 80093b4:	f040 8191 	bne.w	80096da <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80093b8:	49b1      	ldr	r1, [pc, #708]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80093ba:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80093bc:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80093c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80093c4:	4302      	orrs	r2, r0
 80093c6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ca:	039a      	lsls	r2, r3, #14
 80093cc:	f100 8119 	bmi.w	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093d0:	07d8      	lsls	r0, r3, #31
 80093d2:	d508      	bpl.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093d4:	49aa      	ldr	r1, [pc, #680]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80093d6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80093d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80093dc:	f022 0203 	bic.w	r2, r2, #3
 80093e0:	4302      	orrs	r2, r0
 80093e2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093e6:	0799      	lsls	r1, r3, #30
 80093e8:	d508      	bpl.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093ea:	49a5      	ldr	r1, [pc, #660]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80093ec:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80093ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80093f2:	f022 020c 	bic.w	r2, r2, #12
 80093f6:	4302      	orrs	r2, r0
 80093f8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093fc:	075a      	lsls	r2, r3, #29
 80093fe:	d508      	bpl.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009400:	499f      	ldr	r1, [pc, #636]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009402:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009404:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009408:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800940c:	4302      	orrs	r2, r0
 800940e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009412:	071f      	lsls	r7, r3, #28
 8009414:	d508      	bpl.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009416:	499a      	ldr	r1, [pc, #616]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009418:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800941a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800941e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8009422:	4302      	orrs	r2, r0
 8009424:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009428:	06dd      	lsls	r5, r3, #27
 800942a:	d508      	bpl.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800942c:	4994      	ldr	r1, [pc, #592]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800942e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009430:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009434:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009438:	4302      	orrs	r2, r0
 800943a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800943e:	0698      	lsls	r0, r3, #26
 8009440:	d508      	bpl.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009442:	498f      	ldr	r1, [pc, #572]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009444:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8009446:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800944a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800944e:	4302      	orrs	r2, r0
 8009450:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009454:	0599      	lsls	r1, r3, #22
 8009456:	d508      	bpl.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009458:	4989      	ldr	r1, [pc, #548]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800945a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800945c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009460:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8009464:	4302      	orrs	r2, r0
 8009466:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800946a:	055a      	lsls	r2, r3, #21
 800946c:	d508      	bpl.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800946e:	4984      	ldr	r1, [pc, #528]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009470:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8009472:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009476:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800947a:	4302      	orrs	r2, r0
 800947c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009480:	065f      	lsls	r7, r3, #25
 8009482:	d508      	bpl.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009484:	497e      	ldr	r1, [pc, #504]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009486:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8009488:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800948c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009490:	4302      	orrs	r2, r0
 8009492:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009496:	061d      	lsls	r5, r3, #24
 8009498:	d508      	bpl.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800949a:	4979      	ldr	r1, [pc, #484]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800949c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800949e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80094a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80094a6:	4302      	orrs	r2, r0
 80094a8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094ac:	05d8      	lsls	r0, r3, #23
 80094ae:	d508      	bpl.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094b0:	4973      	ldr	r1, [pc, #460]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80094b2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80094b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80094b8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80094bc:	4302      	orrs	r2, r0
 80094be:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094c2:	02d9      	lsls	r1, r3, #11
 80094c4:	d508      	bpl.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094c6:	496e      	ldr	r1, [pc, #440]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80094c8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80094ca:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80094ce:	f022 0203 	bic.w	r2, r2, #3
 80094d2:	4302      	orrs	r2, r0
 80094d4:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094d8:	049a      	lsls	r2, r3, #18
 80094da:	d510      	bpl.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094dc:	4968      	ldr	r1, [pc, #416]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80094de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80094e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80094e4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80094e8:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094ea:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094f2:	f000 811b 	beq.w	800972c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094f6:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80094fa:	f000 814b 	beq.w	8009794 <HAL_RCCEx_PeriphCLKConfig+0x448>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80094fe:	031f      	lsls	r7, r3, #12
 8009500:	d51a      	bpl.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009502:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8009504:	4a5e      	ldr	r2, [pc, #376]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009506:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800950a:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 800950e:	f000 8112 	beq.w	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009512:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009516:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
 800951a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800951e:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009522:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009524:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009528:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800952c:	f000 8146 	beq.w	80097bc <HAL_RCCEx_PeriphCLKConfig+0x470>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009530:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8009534:	f000 8147 	beq.w	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009538:	035d      	lsls	r5, r3, #13
 800953a:	d510      	bpl.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800953c:	4950      	ldr	r1, [pc, #320]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800953e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8009540:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009544:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009548:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800954a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800954e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009552:	f000 80f9 	beq.w	8009748 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009556:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800955a:	f000 8125 	beq.w	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800955e:	0458      	lsls	r0, r3, #17
 8009560:	d50d      	bpl.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009562:	4847      	ldr	r0, [pc, #284]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009564:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009568:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800956c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009570:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009572:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009576:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800957a:	f000 80f2 	beq.w	8009762 <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800957e:	03d9      	lsls	r1, r3, #15
 8009580:	d509      	bpl.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009582:	493f      	ldr	r1, [pc, #252]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009584:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8009588:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800958c:	f022 0204 	bic.w	r2, r2, #4
 8009590:	4302      	orrs	r2, r0
 8009592:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009596:	029a      	lsls	r2, r3, #10
 8009598:	d509      	bpl.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800959a:	4939      	ldr	r1, [pc, #228]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800959c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80095a0:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80095a4:	f022 0218 	bic.w	r2, r2, #24
 80095a8:	4302      	orrs	r2, r0
 80095aa:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095ae:	01db      	lsls	r3, r3, #7
 80095b0:	d50d      	bpl.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80095b2:	4a33      	ldr	r2, [pc, #204]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80095b4:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80095b8:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80095bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095c0:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80095c2:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80095c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80095ca:	f000 80c2 	beq.w	8009752 <HAL_RCCEx_PeriphCLKConfig+0x406>
}
 80095ce:	4630      	mov	r0, r6
 80095d0:	b003      	add	sp, #12
 80095d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 80095d6:	2960      	cmp	r1, #96	@ 0x60
 80095d8:	d002      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
 80095da:	2980      	cmp	r1, #128	@ 0x80
 80095dc:	f040 8101 	bne.w	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x496>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095e0:	4827      	ldr	r0, [pc, #156]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80095e2:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80095e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095ea:	430a      	orrs	r2, r1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80095ec:	04d9      	lsls	r1, r3, #19
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095ee:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095f2:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80095f6:	f53f aec8 	bmi.w	800938a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80095fa:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095fc:	039a      	lsls	r2, r3, #14
 80095fe:	f57f aee7 	bpl.w	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009602:	4b1f      	ldr	r3, [pc, #124]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009604:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009606:	00d5      	lsls	r5, r2, #3
 8009608:	d569      	bpl.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x392>
    FlagStatus       pwrclkchanged = RESET;
 800960a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800960e:	4d1d      	ldr	r5, [pc, #116]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009616:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009618:	f7fe fdda 	bl	80081d0 <HAL_GetTick>
 800961c:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800961e:	e005      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009620:	f7fe fdd6 	bl	80081d0 <HAL_GetTick>
 8009624:	eba0 0309 	sub.w	r3, r0, r9
 8009628:	2b02      	cmp	r3, #2
 800962a:	d864      	bhi.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	05d8      	lsls	r0, r3, #23
 8009630:	d5f6      	bpl.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    if(ret == HAL_OK)
 8009632:	2f00      	cmp	r7, #0
 8009634:	f040 80d1 	bne.w	80097da <HAL_RCCEx_PeriphCLKConfig+0x48e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009638:	4d11      	ldr	r5, [pc, #68]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800963a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800963e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009642:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8009646:	d02a      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8009648:	4293      	cmp	r3, r2
 800964a:	d028      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x352>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800964c:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8009650:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009658:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800965c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009664:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009668:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800966c:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800966e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009672:	d514      	bpl.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x352>
        tickstart = HAL_GetTick();
 8009674:	f7fe fdac 	bl	80081d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009678:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800967c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800967e:	e008      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8009680:	40021000 	.word	0x40021000
 8009684:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009688:	f7fe fda2 	bl	80081d0 <HAL_GetTick>
 800968c:	1bc0      	subs	r0, r0, r7
 800968e:	4548      	cmp	r0, r9
 8009690:	d831      	bhi.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009692:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009696:	079b      	lsls	r3, r3, #30
 8009698:	d5f6      	bpl.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800969a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800969e:	4952      	ldr	r1, [pc, #328]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 80096a0:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80096a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096a8:	4313      	orrs	r3, r2
 80096aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096ae:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80096b0:	f1b8 0f00 	cmp.w	r8, #0
 80096b4:	f43f ae8c 	beq.w	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_DISABLE();
 80096b8:	494b      	ldr	r1, [pc, #300]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 80096ba:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80096bc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80096c0:	658a      	str	r2, [r1, #88]	@ 0x58
 80096c2:	e685      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    switch(PeriphClkInit->Sai2ClockSelection)
 80096c4:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80096c8:	d003      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80096ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80096ce:	f040 8086 	bne.w	80097de <HAL_RCCEx_PeriphCLKConfig+0x492>
    switch(PeriphClkInit->Sai1ClockSelection)
 80096d2:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 80096d4:	2f00      	cmp	r7, #0
 80096d6:	f43f ae6f 	beq.w	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80096da:	463e      	mov	r6, r7
 80096dc:	e78e      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80096de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80096e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80096e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80096f0:	f04f 0801 	mov.w	r8, #1
 80096f4:	e78b      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        ret = HAL_TIMEOUT;
 80096f6:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096f8:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80096fa:	f1b8 0f00 	cmp.w	r8, #0
 80096fe:	f43f ae67 	beq.w	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009702:	4939      	ldr	r1, [pc, #228]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8009704:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8009706:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800970a:	658a      	str	r2, [r1, #88]	@ 0x58
 800970c:	e660      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800970e:	3004      	adds	r0, #4
 8009710:	f7ff fd2e 	bl	8009170 <RCCEx_PLLSAI1_Config>
 8009714:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009716:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009718:	2e00      	cmp	r6, #0
 800971a:	f47f ae33 	bne.w	8009384 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800971e:	e037      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009720:	1d20      	adds	r0, r4, #4
 8009722:	f7ff fd25 	bl	8009170 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009726:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009728:	4607      	mov	r7, r0
      break;
 800972a:	e642      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800972c:	68ca      	ldr	r2, [r1, #12]
 800972e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009732:	60ca      	str	r2, [r1, #12]
 8009734:	e6e3      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009736:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800973a:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800973e:	68d1      	ldr	r1, [r2, #12]
 8009740:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8009744:	60d1      	str	r1, [r2, #12]
 8009746:	e6f7      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009748:	68ca      	ldr	r2, [r1, #12]
 800974a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800974e:	60ca      	str	r2, [r1, #12]
 8009750:	e705      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009752:	68d3      	ldr	r3, [r2, #12]
}
 8009754:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975a:	60d3      	str	r3, [r2, #12]
}
 800975c:	b003      	add	sp, #12
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009762:	2102      	movs	r1, #2
 8009764:	1d20      	adds	r0, r4, #4
 8009766:	f7ff fd03 	bl	8009170 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800976a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800976c:	2800      	cmp	r0, #0
 800976e:	f43f af06 	beq.w	800957e <HAL_RCCEx_PeriphCLKConfig+0x232>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009772:	4606      	mov	r6, r0
 8009774:	e703      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x232>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009776:	481c      	ldr	r0, [pc, #112]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8009778:	68c2      	ldr	r2, [r0, #12]
 800977a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800977e:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8009780:	e72e      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009782:	4919      	ldr	r1, [pc, #100]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8009784:	68ca      	ldr	r2, [r1, #12]
 8009786:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800978a:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 800978c:	4637      	mov	r7, r6
 800978e:	e7a1      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009790:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009792:	e725      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009794:	2101      	movs	r1, #1
 8009796:	1d20      	adds	r0, r4, #4
 8009798:	f7ff fcea 	bl	8009170 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800979c:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f aead 	beq.w	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80097a4:	4606      	mov	r6, r0
 80097a6:	e6aa      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097a8:	2101      	movs	r1, #1
 80097aa:	1d20      	adds	r0, r4, #4
 80097ac:	f7ff fce0 	bl	8009170 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b0:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aed3 	beq.w	800955e <HAL_RCCEx_PeriphCLKConfig+0x212>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b8:	4606      	mov	r6, r0
 80097ba:	e6d0      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097bc:	68d1      	ldr	r1, [r2, #12]
 80097be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80097c2:	60d1      	str	r1, [r2, #12]
 80097c4:	e6b8      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097c6:	2101      	movs	r1, #1
 80097c8:	1d20      	adds	r0, r4, #4
 80097ca:	f7ff fcd1 	bl	8009170 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097ce:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f43f aeb1 	beq.w	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097d6:	4606      	mov	r6, r0
 80097d8:	e6ae      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80097da:	463e      	mov	r6, r7
 80097dc:	e78c      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    switch(PeriphClkInit->Sai2ClockSelection)
 80097de:	2601      	movs	r6, #1
 80097e0:	e70b      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    switch(PeriphClkInit->Sai1ClockSelection)
 80097e2:	2601      	movs	r6, #1
 80097e4:	e5ce      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80097e6:	bf00      	nop
 80097e8:	40021000 	.word	0x40021000

080097ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f2:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 80097f6:	2820      	cmp	r0, #32
 80097f8:	f040 808b 	bne.w	8009912 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fc:	4688      	mov	r8, r1
 80097fe:	b109      	cbz	r1, 8009804 <HAL_UART_Transmit+0x18>
 8009800:	4617      	mov	r7, r2
 8009802:	b912      	cbnz	r2, 800980a <HAL_UART_Transmit+0x1e>
    {
      return  HAL_ERROR;
 8009804:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980a:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980c:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009810:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009812:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009816:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800981a:	f7fe fcd9 	bl	80081d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800981e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8009820:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8009828:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800982c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982e:	d073      	beq.n	8009918 <HAL_UART_Transmit+0x12c>
    while (huart->TxXferCount > 0U)
 8009830:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009834:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8009836:	b292      	uxth	r2, r2
 8009838:	b1aa      	cbz	r2, 8009866 <HAL_UART_Transmit+0x7a>
 800983a:	1c69      	adds	r1, r5, #1
 800983c:	d11d      	bne.n	800987a <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	0617      	lsls	r7, r2, #24
 8009842:	d5fc      	bpl.n	800983e <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8009844:	f1b8 0f00 	cmp.w	r8, #0
 8009848:	d05e      	beq.n	8009908 <HAL_UART_Transmit+0x11c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800984a:	f818 2b01 	ldrb.w	r2, [r8], #1
 800984e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8009850:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8009854:	3a01      	subs	r2, #1
 8009856:	b292      	uxth	r2, r2
 8009858:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800985c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8009860:	b292      	uxth	r2, r2
 8009862:	2a00      	cmp	r2, #0
 8009864:	d1e9      	bne.n	800983a <HAL_UART_Transmit+0x4e>
 8009866:	1c6a      	adds	r2, r5, #1
 8009868:	d15c      	bne.n	8009924 <HAL_UART_Transmit+0x138>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	0652      	lsls	r2, r2, #25
 800986e:	d5fc      	bpl.n	800986a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8009870:	2320      	movs	r3, #32
 8009872:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8009876:	2000      	movs	r0, #0
 8009878:	e7c5      	b.n	8009806 <HAL_UART_Transmit+0x1a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	0610      	lsls	r0, r2, #24
 800987e:	d4e1      	bmi.n	8009844 <HAL_UART_Transmit+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009880:	f7fe fca6 	bl	80081d0 <HAL_GetTick>
 8009884:	1b80      	subs	r0, r0, r6
 8009886:	4285      	cmp	r5, r0
 8009888:	d338      	bcc.n	80098fc <HAL_UART_Transmit+0x110>
 800988a:	2d00      	cmp	r5, #0
 800988c:	d036      	beq.n	80098fc <HAL_UART_Transmit+0x110>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800988e:	6822      	ldr	r2, [r4, #0]
 8009890:	6811      	ldr	r1, [r2, #0]
 8009892:	074f      	lsls	r7, r1, #29
 8009894:	4613      	mov	r3, r2
 8009896:	d5f0      	bpl.n	800987a <HAL_UART_Transmit+0x8e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009898:	69d1      	ldr	r1, [r2, #28]
 800989a:	0708      	lsls	r0, r1, #28
 800989c:	f100 808a 	bmi.w	80099b4 <HAL_UART_Transmit+0x1c8>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098a0:	69d1      	ldr	r1, [r2, #28]
 80098a2:	0509      	lsls	r1, r1, #20
 80098a4:	d5e9      	bpl.n	800987a <HAL_UART_Transmit+0x8e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80098aa:	6211      	str	r1, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	e852 1f00 	ldrex	r1, [r2]
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b0:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	e842 1000 	strex	r0, r1, [r2]
 80098b8:	b138      	cbz	r0, 80098ca <HAL_UART_Transmit+0xde>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	e852 3f00 	ldrex	r3, [r2]
 80098be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	e842 3100 	strex	r1, r3, [r2]
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d1f7      	bne.n	80098ba <HAL_UART_Transmit+0xce>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098ca:	4862      	ldr	r0, [pc, #392]	@ (8009a54 <HAL_UART_Transmit+0x268>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	f102 0308 	add.w	r3, r2, #8
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	f102 0508 	add.w	r5, r2, #8
 80098da:	e845 3100 	strex	r1, r3, [r5]
 80098de:	2900      	cmp	r1, #0
 80098e0:	d1f4      	bne.n	80098cc <HAL_UART_Transmit+0xe0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d05c      	beq.n	80099a2 <HAL_UART_Transmit+0x1b6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e8:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098f0:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	66e3      	str	r3, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80098f4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098f8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 80098fc:	2320      	movs	r3, #32
 80098fe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8009902:	2003      	movs	r0, #3
}
 8009904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009908:	f839 2b02 	ldrh.w	r2, [r9], #2
 800990c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009910:	e79d      	b.n	800984e <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 8009912:	2002      	movs	r0, #2
}
 8009914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009918:	6923      	ldr	r3, [r4, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d188      	bne.n	8009830 <HAL_UART_Transmit+0x44>
 800991e:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8009920:	4698      	mov	r8, r3
 8009922:	e785      	b.n	8009830 <HAL_UART_Transmit+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	065b      	lsls	r3, r3, #25
 8009928:	d4a2      	bmi.n	8009870 <HAL_UART_Transmit+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992a:	f7fe fc51 	bl	80081d0 <HAL_GetTick>
 800992e:	1b83      	subs	r3, r0, r6
 8009930:	429d      	cmp	r5, r3
 8009932:	d3e3      	bcc.n	80098fc <HAL_UART_Transmit+0x110>
 8009934:	2d00      	cmp	r5, #0
 8009936:	d0e1      	beq.n	80098fc <HAL_UART_Transmit+0x110>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	6811      	ldr	r1, [r2, #0]
 800993c:	074f      	lsls	r7, r1, #29
 800993e:	4613      	mov	r3, r2
 8009940:	d5f0      	bpl.n	8009924 <HAL_UART_Transmit+0x138>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009942:	69d1      	ldr	r1, [r2, #28]
 8009944:	0708      	lsls	r0, r1, #28
 8009946:	d463      	bmi.n	8009a10 <HAL_UART_Transmit+0x224>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009948:	69d1      	ldr	r1, [r2, #28]
 800994a:	0509      	lsls	r1, r1, #20
 800994c:	d5ea      	bpl.n	8009924 <HAL_UART_Transmit+0x138>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009952:	6211      	str	r1, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	e852 1f00 	ldrex	r1, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009958:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	e842 1000 	strex	r0, r1, [r2]
 8009960:	b138      	cbz	r0, 8009972 <HAL_UART_Transmit+0x186>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	e852 3f00 	ldrex	r3, [r2]
 8009966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	e842 3100 	strex	r1, r3, [r2]
 800996e:	2900      	cmp	r1, #0
 8009970:	d1f7      	bne.n	8009962 <HAL_UART_Transmit+0x176>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009972:	4938      	ldr	r1, [pc, #224]	@ (8009a54 <HAL_UART_Transmit+0x268>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	f102 0308 	add.w	r3, r2, #8
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	f102 0508 	add.w	r5, r2, #8
 8009982:	e845 3000 	strex	r0, r3, [r5]
 8009986:	2800      	cmp	r0, #0
 8009988:	d1f4      	bne.n	8009974 <HAL_UART_Transmit+0x188>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800998a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d1ab      	bne.n	80098e8 <HAL_UART_Transmit+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009994:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	e842 3100 	strex	r1, r3, [r2]
 800999c:	2900      	cmp	r1, #0
 800999e:	d1f7      	bne.n	8009990 <HAL_UART_Transmit+0x1a4>
 80099a0:	e7a2      	b.n	80098e8 <HAL_UART_Transmit+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	e852 3f00 	ldrex	r3, [r2]
 80099a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	e842 3100 	strex	r1, r3, [r2]
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d1f7      	bne.n	80099a2 <HAL_UART_Transmit+0x1b6>
 80099b2:	e799      	b.n	80098e8 <HAL_UART_Transmit+0xfc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b4:	2308      	movs	r3, #8
 80099b6:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	e842 3100 	strex	r1, r3, [r2]
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d1f7      	bne.n	80099b8 <HAL_UART_Transmit+0x1cc>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c8:	4822      	ldr	r0, [pc, #136]	@ (8009a54 <HAL_UART_Transmit+0x268>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	f102 0308 	add.w	r3, r2, #8
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	f102 0508 	add.w	r5, r2, #8
 80099d8:	e845 3100 	strex	r1, r3, [r5]
 80099dc:	2900      	cmp	r1, #0
 80099de:	d1f4      	bne.n	80099ca <HAL_UART_Transmit+0x1de>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d00b      	beq.n	80099fe <HAL_UART_Transmit+0x212>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80099e8:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099ea:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80099ec:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80099f0:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f2:	66e3      	str	r3, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80099f4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099f8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80099fc:	e77e      	b.n	80098fc <HAL_UART_Transmit+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a02:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	e842 3100 	strex	r1, r3, [r2]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d1f7      	bne.n	80099fe <HAL_UART_Transmit+0x212>
 8009a0e:	e7ea      	b.n	80099e6 <HAL_UART_Transmit+0x1fa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a10:	2308      	movs	r3, #8
 8009a12:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	e842 3100 	strex	r1, r3, [r2]
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d1f7      	bne.n	8009a14 <HAL_UART_Transmit+0x228>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a24:	490b      	ldr	r1, [pc, #44]	@ (8009a54 <HAL_UART_Transmit+0x268>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	f102 0308 	add.w	r3, r2, #8
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	f102 0508 	add.w	r5, r2, #8
 8009a34:	e845 3000 	strex	r0, r3, [r5]
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1f4      	bne.n	8009a26 <HAL_UART_Transmit+0x23a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d1d1      	bne.n	80099e6 <HAL_UART_Transmit+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a46:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	e842 3100 	strex	r1, r3, [r2]
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	d1f7      	bne.n	8009a42 <HAL_UART_Transmit+0x256>
 8009a52:	e7c8      	b.n	80099e6 <HAL_UART_Transmit+0x1fa>
 8009a54:	effffffe 	.word	0xeffffffe

08009a58 <UART_SetConfig>:
{
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a5c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a5e:	6882      	ldr	r2, [r0, #8]
 8009a60:	6900      	ldr	r0, [r0, #16]
 8009a62:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a64:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a66:	4302      	orrs	r2, r0
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a6c:	49a0      	ldr	r1, [pc, #640]	@ (8009cf0 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a70:	4029      	ands	r1, r5
 8009a72:	430a      	orrs	r2, r1
 8009a74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a7a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a7c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009a80:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a82:	499c      	ldr	r1, [pc, #624]	@ (8009cf4 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a84:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a86:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a88:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a8c:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8009a90:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a94:	f000 80d1 	beq.w	8009c3a <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 8009a98:	6a26      	ldr	r6, [r4, #32]
 8009a9a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa2:	f022 020f 	bic.w	r2, r2, #15
 8009aa6:	432a      	orrs	r2, r5
 8009aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009aaa:	4a93      	ldr	r2, [pc, #588]	@ (8009cf8 <UART_SetConfig+0x2a0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d039      	beq.n	8009b24 <UART_SetConfig+0xcc>
 8009ab0:	4a92      	ldr	r2, [pc, #584]	@ (8009cfc <UART_SetConfig+0x2a4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d012      	beq.n	8009adc <UART_SetConfig+0x84>
 8009ab6:	4a92      	ldr	r2, [pc, #584]	@ (8009d00 <UART_SetConfig+0x2a8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	f000 80a6 	beq.w	8009c0a <UART_SetConfig+0x1b2>
 8009abe:	4a91      	ldr	r2, [pc, #580]	@ (8009d04 <UART_SetConfig+0x2ac>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d043      	beq.n	8009b4c <UART_SetConfig+0xf4>
 8009ac4:	4a90      	ldr	r2, [pc, #576]	@ (8009d08 <UART_SetConfig+0x2b0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	f000 808f 	beq.w	8009bea <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8009acc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8009ace:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009ad0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8009ad4:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009ad8:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009adc:	4b8b      	ldr	r3, [pc, #556]	@ (8009d0c <UART_SetConfig+0x2b4>)
 8009ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae2:	f003 030c 	and.w	r3, r3, #12
 8009ae6:	2b0c      	cmp	r3, #12
 8009ae8:	d8f0      	bhi.n	8009acc <UART_SetConfig+0x74>
 8009aea:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <UART_SetConfig+0x98>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009bff 	.word	0x08009bff
 8009af4:	08009acd 	.word	0x08009acd
 8009af8:	08009acd 	.word	0x08009acd
 8009afc:	08009acd 	.word	0x08009acd
 8009b00:	08009b65 	.word	0x08009b65
 8009b04:	08009acd 	.word	0x08009acd
 8009b08:	08009acd 	.word	0x08009acd
 8009b0c:	08009acd 	.word	0x08009acd
 8009b10:	08009bad 	.word	0x08009bad
 8009b14:	08009acd 	.word	0x08009acd
 8009b18:	08009acd 	.word	0x08009acd
 8009b1c:	08009acd 	.word	0x08009acd
 8009b20:	08009b7d 	.word	0x08009b7d
 8009b24:	4b79      	ldr	r3, [pc, #484]	@ (8009d0c <UART_SetConfig+0x2b4>)
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d03c      	beq.n	8009bac <UART_SetConfig+0x154>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d022      	beq.n	8009b7c <UART_SetConfig+0x124>
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d014      	beq.n	8009b64 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b3a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009b3e:	f000 80ce 	beq.w	8009cde <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b42:	f7ff fb03 	bl	800914c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009b46:	b9a8      	cbnz	r0, 8009b74 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e7c0      	b.n	8009ace <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8009d0c <UART_SetConfig+0x2b4>)
 8009b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b56:	2b80      	cmp	r3, #128	@ 0x80
 8009b58:	d028      	beq.n	8009bac <UART_SetConfig+0x154>
 8009b5a:	d863      	bhi.n	8009c24 <UART_SetConfig+0x1cc>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d04e      	beq.n	8009bfe <UART_SetConfig+0x1a6>
 8009b60:	2b40      	cmp	r3, #64	@ 0x40
 8009b62:	d1b3      	bne.n	8009acc <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b64:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009b68:	f000 80be 	beq.w	8009ce8 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6c:	f7fe fe54 	bl	8008818 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0e9      	beq.n	8009b48 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b74:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009b76:	e006      	b.n	8009b86 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b78:	2b30      	cmp	r3, #48	@ 0x30
 8009b7a:	d1a7      	bne.n	8009acc <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009b80:	d018      	beq.n	8009bb4 <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 8009b82:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	4a61      	ldr	r2, [pc, #388]	@ (8009d10 <UART_SetConfig+0x2b8>)
 8009b8a:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8009b8e:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b92:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009b9a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b9e:	f1a0 0310 	sub.w	r3, r0, #16
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d892      	bhi.n	8009acc <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	60d8      	str	r0, [r3, #12]
 8009baa:	e7cd      	b.n	8009b48 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009bb0:	4858      	ldr	r0, [pc, #352]	@ (8009d14 <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb2:	d1e8      	bne.n	8009b86 <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb4:	6862      	ldr	r2, [r4, #4]
 8009bb6:	4b56      	ldr	r3, [pc, #344]	@ (8009d10 <UART_SetConfig+0x2b8>)
 8009bb8:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8009bbc:	fbb0 f0f1 	udiv	r0, r0, r1
 8009bc0:	0853      	lsrs	r3, r2, #1
 8009bc2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bc6:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bce:	f1a3 0210 	sub.w	r2, r3, #16
 8009bd2:	428a      	cmp	r2, r1
 8009bd4:	f63f af7a 	bhi.w	8009acc <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bd8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009bdc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bde:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009be0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60cb      	str	r3, [r1, #12]
 8009be8:	e7ae      	b.n	8009b48 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bea:	4b48      	ldr	r3, [pc, #288]	@ (8009d0c <UART_SetConfig+0x2b4>)
 8009bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf8:	d0d8      	beq.n	8009bac <UART_SetConfig+0x154>
 8009bfa:	d81a      	bhi.n	8009c32 <UART_SetConfig+0x1da>
 8009bfc:	b9ab      	cbnz	r3, 8009c2a <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009c02:	d065      	beq.n	8009cd0 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c04:	f7ff fa90 	bl	8009128 <HAL_RCC_GetPCLK1Freq>
        break;
 8009c08:	e79d      	b.n	8009b46 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c0a:	4b40      	ldr	r3, [pc, #256]	@ (8009d0c <UART_SetConfig+0x2b4>)
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	d0c9      	beq.n	8009bac <UART_SetConfig+0x154>
 8009c18:	d8ae      	bhi.n	8009b78 <UART_SetConfig+0x120>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0ef      	beq.n	8009bfe <UART_SetConfig+0x1a6>
 8009c1e:	2b10      	cmp	r3, #16
 8009c20:	d0a0      	beq.n	8009b64 <UART_SetConfig+0x10c>
 8009c22:	e753      	b.n	8009acc <UART_SetConfig+0x74>
 8009c24:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c26:	d0a9      	beq.n	8009b7c <UART_SetConfig+0x124>
 8009c28:	e750      	b.n	8009acc <UART_SetConfig+0x74>
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c2e:	d099      	beq.n	8009b64 <UART_SetConfig+0x10c>
 8009c30:	e74c      	b.n	8009acc <UART_SetConfig+0x74>
 8009c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c36:	d0a1      	beq.n	8009b7c <UART_SetConfig+0x124>
 8009c38:	e748      	b.n	8009acc <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c3a:	4311      	orrs	r1, r2
 8009c3c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c40:	4932      	ldr	r1, [pc, #200]	@ (8009d0c <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c42:	f022 020f 	bic.w	r2, r2, #15
 8009c46:	432a      	orrs	r2, r5
 8009c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c4a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8009c4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c56:	d045      	beq.n	8009ce4 <UART_SetConfig+0x28c>
 8009c58:	d833      	bhi.n	8009cc2 <UART_SetConfig+0x26a>
 8009c5a:	b37b      	cbz	r3, 8009cbc <UART_SetConfig+0x264>
 8009c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c60:	f47f af34 	bne.w	8009acc <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8009c64:	f7fe fdd8 	bl	8008818 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f43f af6d 	beq.w	8009b48 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c6e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c70:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c72:	4b27      	ldr	r3, [pc, #156]	@ (8009d10 <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c74:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c78:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8009c7c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c80:	4299      	cmp	r1, r3
 8009c82:	f63f af23 	bhi.w	8009acc <UART_SetConfig+0x74>
 8009c86:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009c8a:	f63f af1f 	bhi.w	8009acc <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4619      	mov	r1, r3
 8009c92:	f7fb fecd 	bl	8005a30 <__aeabi_uldivmod>
 8009c96:	0872      	lsrs	r2, r6, #1
 8009c98:	0203      	lsls	r3, r0, #8
 8009c9a:	0209      	lsls	r1, r1, #8
 8009c9c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009ca0:	1898      	adds	r0, r3, r2
 8009ca2:	f141 0100 	adc.w	r1, r1, #0
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f7fb fec1 	bl	8005a30 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <UART_SetConfig+0x2c0>)
 8009cb0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	f63f af09 	bhi.w	8009acc <UART_SetConfig+0x74>
 8009cba:	e774      	b.n	8009ba6 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cbc:	f7ff fa34 	bl	8009128 <HAL_RCC_GetPCLK1Freq>
        break;
 8009cc0:	e7d2      	b.n	8009c68 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cc6:	f47f af01 	bne.w	8009acc <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 8009cca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009cce:	e7cf      	b.n	8009c70 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cd0:	f7ff fa2a 	bl	8009128 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f43f af37 	beq.w	8009b48 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cda:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009cdc:	e76a      	b.n	8009bb4 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cde:	f7ff fa35 	bl	800914c <HAL_RCC_GetPCLK2Freq>
        break;
 8009ce2:	e7f7      	b.n	8009cd4 <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 8009ce4:	480b      	ldr	r0, [pc, #44]	@ (8009d14 <UART_SetConfig+0x2bc>)
 8009ce6:	e7c3      	b.n	8009c70 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8009ce8:	f7fe fd96 	bl	8008818 <HAL_RCC_GetSysClockFreq>
        break;
 8009cec:	e7f2      	b.n	8009cd4 <UART_SetConfig+0x27c>
 8009cee:	bf00      	nop
 8009cf0:	cfff69f3 	.word	0xcfff69f3
 8009cf4:	40008000 	.word	0x40008000
 8009cf8:	40013800 	.word	0x40013800
 8009cfc:	40004400 	.word	0x40004400
 8009d00:	40004800 	.word	0x40004800
 8009d04:	40004c00 	.word	0x40004c00
 8009d08:	40005000 	.word	0x40005000
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	0800b580 	.word	0x0800b580
 8009d14:	00f42400 	.word	0x00f42400
 8009d18:	000ffcff 	.word	0x000ffcff

08009d1c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009d1e:	071a      	lsls	r2, r3, #28
{
 8009d20:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d22:	d506      	bpl.n	8009d32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d24:	6801      	ldr	r1, [r0, #0]
 8009d26:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009d28:	684a      	ldr	r2, [r1, #4]
 8009d2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d2e:	4322      	orrs	r2, r4
 8009d30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d32:	07dc      	lsls	r4, r3, #31
 8009d34:	d506      	bpl.n	8009d44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d36:	6801      	ldr	r1, [r0, #0]
 8009d38:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009d3a:	684a      	ldr	r2, [r1, #4]
 8009d3c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009d40:	4322      	orrs	r2, r4
 8009d42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d44:	0799      	lsls	r1, r3, #30
 8009d46:	d506      	bpl.n	8009d56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d48:	6801      	ldr	r1, [r0, #0]
 8009d4a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009d4c:	684a      	ldr	r2, [r1, #4]
 8009d4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009d52:	4322      	orrs	r2, r4
 8009d54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d56:	075a      	lsls	r2, r3, #29
 8009d58:	d506      	bpl.n	8009d68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d5a:	6801      	ldr	r1, [r0, #0]
 8009d5c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009d5e:	684a      	ldr	r2, [r1, #4]
 8009d60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d64:	4322      	orrs	r2, r4
 8009d66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d68:	06dc      	lsls	r4, r3, #27
 8009d6a:	d506      	bpl.n	8009d7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d6c:	6801      	ldr	r1, [r0, #0]
 8009d6e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009d70:	688a      	ldr	r2, [r1, #8]
 8009d72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d76:	4322      	orrs	r2, r4
 8009d78:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d7a:	0699      	lsls	r1, r3, #26
 8009d7c:	d506      	bpl.n	8009d8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d7e:	6801      	ldr	r1, [r0, #0]
 8009d80:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8009d82:	688a      	ldr	r2, [r1, #8]
 8009d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d88:	4322      	orrs	r2, r4
 8009d8a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d8c:	065a      	lsls	r2, r3, #25
 8009d8e:	d509      	bpl.n	8009da4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d90:	6801      	ldr	r1, [r0, #0]
 8009d92:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009d94:	684a      	ldr	r2, [r1, #4]
 8009d96:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009d9a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d9c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009da0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009da2:	d00b      	beq.n	8009dbc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009da4:	061b      	lsls	r3, r3, #24
 8009da6:	d506      	bpl.n	8009db6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009da8:	6802      	ldr	r2, [r0, #0]
 8009daa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009dac:	6853      	ldr	r3, [r2, #4]
 8009dae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6053      	str	r3, [r2, #4]
}
 8009db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dbc:	684a      	ldr	r2, [r1, #4]
 8009dbe:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8009dc0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8009dc4:	4322      	orrs	r2, r4
 8009dc6:	604a      	str	r2, [r1, #4]
 8009dc8:	e7ec      	b.n	8009da4 <UART_AdvFeatureConfig+0x88>
 8009dca:	bf00      	nop

08009dcc <UART_CheckIdleState>:
{
 8009dcc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dce:	2300      	movs	r3, #0
{
 8009dd0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd2:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8009dd6:	f7fe f9fb 	bl	80081d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	6813      	ldr	r3, [r2, #0]
 8009dde:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8009de0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009de2:	d40f      	bmi.n	8009e04 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009de4:	6813      	ldr	r3, [r2, #0]
 8009de6:	0759      	lsls	r1, r3, #29
 8009de8:	d431      	bmi.n	8009e4e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dea:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8009df2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009df4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dfa:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e04:	69d3      	ldr	r3, [r2, #28]
 8009e06:	0298      	lsls	r0, r3, #10
 8009e08:	d4ec      	bmi.n	8009de4 <UART_CheckIdleState+0x18>
 8009e0a:	e00c      	b.n	8009e26 <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e0c:	6819      	ldr	r1, [r3, #0]
 8009e0e:	0749      	lsls	r1, r1, #29
 8009e10:	461a      	mov	r2, r3
 8009e12:	d505      	bpl.n	8009e20 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e14:	69d9      	ldr	r1, [r3, #28]
 8009e16:	0708      	lsls	r0, r1, #28
 8009e18:	d44a      	bmi.n	8009eb0 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e1a:	69d9      	ldr	r1, [r3, #28]
 8009e1c:	0509      	lsls	r1, r1, #20
 8009e1e:	d475      	bmi.n	8009f0c <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	0298      	lsls	r0, r3, #10
 8009e24:	d4de      	bmi.n	8009de4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e26:	f7fe f9d3 	bl	80081d0 <HAL_GetTick>
 8009e2a:	1b43      	subs	r3, r0, r5
 8009e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e30:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e32:	d3eb      	bcc.n	8009e0c <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	e843 2100 	strex	r1, r2, [r3]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d1f7      	bne.n	8009e34 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8009e44:	2320      	movs	r3, #32
 8009e46:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009e4a:	2003      	movs	r0, #3
 8009e4c:	e7d6      	b.n	8009dfc <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e4e:	69d3      	ldr	r3, [r2, #28]
 8009e50:	025b      	lsls	r3, r3, #9
 8009e52:	d4ca      	bmi.n	8009dea <UART_CheckIdleState+0x1e>
 8009e54:	e00d      	b.n	8009e72 <UART_CheckIdleState+0xa6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	0750      	lsls	r0, r2, #29
 8009e5a:	d507      	bpl.n	8009e6c <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e5c:	69da      	ldr	r2, [r3, #28]
 8009e5e:	0711      	lsls	r1, r2, #28
 8009e60:	f100 8082 	bmi.w	8009f68 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e64:	69da      	ldr	r2, [r3, #28]
 8009e66:	0512      	lsls	r2, r2, #20
 8009e68:	f100 80ac 	bmi.w	8009fc4 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	025b      	lsls	r3, r3, #9
 8009e70:	d4bb      	bmi.n	8009dea <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e72:	f7fe f9ad 	bl	80081d0 <HAL_GetTick>
 8009e76:	1b43      	subs	r3, r0, r5
 8009e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	d3ea      	bcc.n	8009e56 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e84:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	e843 2100 	strex	r1, r2, [r3]
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d1f7      	bne.n	8009e80 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	f103 0208 	add.w	r2, r3, #8
 8009e94:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	f103 0008 	add.w	r0, r3, #8
 8009ea0:	e840 2100 	strex	r1, r2, [r0]
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	d1f3      	bne.n	8009e90 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8009eae:	e7cc      	b.n	8009e4a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009eb0:	2208      	movs	r2, #8
 8009eb2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eb8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	e843 2100 	strex	r1, r2, [r3]
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d1f7      	bne.n	8009eb4 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ec4:	4856      	ldr	r0, [pc, #344]	@ (800a020 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	f103 0208 	add.w	r2, r3, #8
 8009eca:	e852 2f00 	ldrex	r2, [r2]
 8009ece:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	f103 0508 	add.w	r5, r3, #8
 8009ed4:	e845 2100 	strex	r1, r2, [r5]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d1f4      	bne.n	8009ec6 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009edc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009ede:	2a01      	cmp	r2, #1
 8009ee0:	d00b      	beq.n	8009efa <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009ee4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ee6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009eec:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eee:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009ef0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ef4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009ef8:	e79c      	b.n	8009e34 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	e843 2100 	strex	r1, r2, [r3]
 8009f06:	2900      	cmp	r1, #0
 8009f08:	d1f7      	bne.n	8009efa <UART_CheckIdleState+0x12e>
 8009f0a:	e7ea      	b.n	8009ee2 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f10:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f16:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	e843 2100 	strex	r1, r2, [r3]
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d1f7      	bne.n	8009f12 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f22:	483f      	ldr	r0, [pc, #252]	@ (800a020 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	f103 0208 	add.w	r2, r3, #8
 8009f28:	e852 2f00 	ldrex	r2, [r2]
 8009f2c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	f103 0508 	add.w	r5, r3, #8
 8009f32:	e845 2100 	strex	r1, r2, [r5]
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d1f4      	bne.n	8009f24 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009f3c:	2a01      	cmp	r2, #1
 8009f3e:	d00a      	beq.n	8009f56 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f40:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009f42:	2120      	movs	r1, #32
 8009f44:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009f48:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009f4c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f50:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009f54:	e76e      	b.n	8009e34 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	e843 2100 	strex	r1, r2, [r3]
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d1f7      	bne.n	8009f56 <UART_CheckIdleState+0x18a>
 8009f66:	e7eb      	b.n	8009f40 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f68:	2208      	movs	r2, #8
 8009f6a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f70:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	e843 2100 	strex	r1, r2, [r3]
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	d1f7      	bne.n	8009f6c <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f7c:	4828      	ldr	r0, [pc, #160]	@ (800a020 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	f103 0208 	add.w	r2, r3, #8
 8009f82:	e852 2f00 	ldrex	r2, [r2]
 8009f86:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	f103 0508 	add.w	r5, r3, #8
 8009f8c:	e845 2100 	strex	r1, r2, [r5]
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d1f4      	bne.n	8009f7e <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f94:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009f96:	2a01      	cmp	r2, #1
 8009f98:	d00b      	beq.n	8009fb2 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f9e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009fa0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009fa4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009fa8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fac:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009fb0:	e766      	b.n	8009e80 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	e843 2100 	strex	r1, r2, [r3]
 8009fbe:	2900      	cmp	r1, #0
 8009fc0:	d1f7      	bne.n	8009fb2 <UART_CheckIdleState+0x1e6>
 8009fc2:	e7ea      	b.n	8009f9a <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fc8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fce:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	e843 2100 	strex	r1, r2, [r3]
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	d1f7      	bne.n	8009fca <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fda:	4811      	ldr	r0, [pc, #68]	@ (800a020 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	f103 0208 	add.w	r2, r3, #8
 8009fe0:	e852 2f00 	ldrex	r2, [r2]
 8009fe4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	f103 0508 	add.w	r5, r3, #8
 8009fea:	e845 2100 	strex	r1, r2, [r5]
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	d1f4      	bne.n	8009fdc <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009ff4:	2a01      	cmp	r2, #1
 8009ff6:	d00a      	beq.n	800a00e <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	2120      	movs	r1, #32
 8009ffc:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800a000:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800a004:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a008:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800a00c:	e738      	b.n	8009e80 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a012:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	e843 2100 	strex	r1, r2, [r3]
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d1f7      	bne.n	800a00e <UART_CheckIdleState+0x242>
 800a01e:	e7eb      	b.n	8009ff8 <UART_CheckIdleState+0x22c>
 800a020:	effffffe 	.word	0xeffffffe

0800a024 <HAL_UART_Init>:
  if (huart == NULL)
 800a024:	b380      	cbz	r0, 800a088 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a026:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800a02a:	b510      	push	{r4, lr}
 800a02c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a02e:	b333      	cbz	r3, 800a07e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800a030:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a032:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800a034:	2324      	movs	r3, #36	@ 0x24
 800a036:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a042:	b9c1      	cbnz	r1, 800a076 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a044:	4620      	mov	r0, r4
 800a046:	f7ff fd07 	bl	8009a58 <UART_SetConfig>
 800a04a:	2801      	cmp	r0, #1
 800a04c:	d011      	beq.n	800a072 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a058:	689a      	ldr	r2, [r3, #8]
 800a05a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a05e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800a066:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800a068:	601a      	str	r2, [r3, #0]
}
 800a06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800a06e:	f7ff bead 	b.w	8009dcc <UART_CheckIdleState>
}
 800a072:	2001      	movs	r0, #1
 800a074:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800a076:	4620      	mov	r0, r4
 800a078:	f7ff fe50 	bl	8009d1c <UART_AdvFeatureConfig>
 800a07c:	e7e2      	b.n	800a044 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800a07e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800a082:	f7fc f851 	bl	8006128 <HAL_UART_MspInit>
 800a086:	e7d3      	b.n	800a030 <HAL_UART_Init+0xc>
}
 800a088:	2001      	movs	r0, #1
 800a08a:	4770      	bx	lr

0800a08c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a08c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800a090:	2b01      	cmp	r3, #1
 800a092:	d017      	beq.n	800a0c4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a094:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a096:	2324      	movs	r3, #36	@ 0x24
{
 800a098:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800a09a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a09e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0a0:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0a2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800a0a4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0a8:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800a0ac:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0ae:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0b0:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 800a0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800a0c0:	4618      	mov	r0, r3
}
 800a0c2:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a0c4:	2002      	movs	r0, #2
}
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800a0cc:	2a01      	cmp	r2, #1
 800a0ce:	d037      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0d2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a0d4:	2024      	movs	r0, #36	@ 0x24
{
 800a0d6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a0d8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0dc:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0de:	6810      	ldr	r0, [r2, #0]
 800a0e0:	f020 0001 	bic.w	r0, r0, #1
 800a0e4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0e6:	6890      	ldr	r0, [r2, #8]
 800a0e8:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800a0ec:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0ee:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0f0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0f2:	b310      	cbz	r0, 800a13a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0f4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0f6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0f8:	4d12      	ldr	r5, [pc, #72]	@ (800a144 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0fa:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0fe:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a102:	4911      	ldr	r1, [pc, #68]	@ (800a148 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800a104:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a108:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a10c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a110:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a114:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a116:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a118:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a11c:	fbb1 f1f5 	udiv	r1, r1, r5
 800a120:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800a124:	2100      	movs	r1, #0
 800a126:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a12a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a12c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a12e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800a132:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a134:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800a138:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a13a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a13c:	4608      	mov	r0, r1
 800a13e:	e7ef      	b.n	800a120 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a140:	2002      	movs	r0, #2
}
 800a142:	4770      	bx	lr
 800a144:	0800b598 	.word	0x0800b598
 800a148:	0800b5a0 	.word	0x0800b5a0

0800a14c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a14c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800a150:	2a01      	cmp	r2, #1
 800a152:	d037      	beq.n	800a1c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800a154:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a156:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a158:	2024      	movs	r0, #36	@ 0x24
{
 800a15a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a15c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a160:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a162:	6810      	ldr	r0, [r2, #0]
 800a164:	f020 0001 	bic.w	r0, r0, #1
 800a168:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a16a:	6890      	ldr	r0, [r2, #8]
 800a16c:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800a170:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a172:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a174:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a176:	b310      	cbz	r0, 800a1be <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a178:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a17a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a17c:	4d12      	ldr	r5, [pc, #72]	@ (800a1c8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a182:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a186:	4911      	ldr	r1, [pc, #68]	@ (800a1cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a188:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a18c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a190:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a194:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a198:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a19a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a19c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a0:	fbb1 f1f5 	udiv	r1, r1, r5
 800a1a4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a1ae:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b0:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a1b2:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800a1b6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a1b8:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800a1bc:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a1be:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	e7ef      	b.n	800a1a4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a1c4:	2002      	movs	r0, #2
}
 800a1c6:	4770      	bx	lr
 800a1c8:	0800b598 	.word	0x0800b598
 800a1cc:	0800b5a0 	.word	0x0800b5a0

0800a1d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	4684      	mov	ip, r0
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	a803      	add	r0, sp, #12
 800a1d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1dc:	f8dc 300c 	ldr.w	r3, [ip, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800a1e0:	4a1e      	ldr	r2, [pc, #120]	@ (800a25c <USB_CoreInit+0x8c>)
  __IO uint32_t count = 0U;
 800a1e2:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1e8:	f8cc 300c 	str.w	r3, [ip, #12]
  __IO uint32_t count = 0U;
 800a1ec:	9101      	str	r1, [sp, #4]
 800a1ee:	e003      	b.n	800a1f8 <USB_CoreInit+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	db1a      	blt.n	800a22e <USB_CoreInit+0x5e>
    count++;
 800a1f8:	9b01      	ldr	r3, [sp, #4]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	4293      	cmp	r3, r2
 800a202:	d9f5      	bls.n	800a1f0 <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 800a204:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 800a206:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a208:	b943      	cbnz	r3, 800a21c <USB_CoreInit+0x4c>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a20a:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800a20e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a212:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800a216:	b002      	add	sp, #8
 800a218:	b004      	add	sp, #16
 800a21a:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a21c:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
 800a220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a224:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
}
 800a228:	b002      	add	sp, #8
 800a22a:	b004      	add	sp, #16
 800a22c:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a232:	f8dc 3010 	ldr.w	r3, [ip, #16]

  do
  {
    count++;

    if (count > 200000U)
 800a236:	4a09      	ldr	r2, [pc, #36]	@ (800a25c <USB_CoreInit+0x8c>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	f8cc 3010 	str.w	r3, [ip, #16]
 800a240:	e004      	b.n	800a24c <USB_CoreInit+0x7c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a242:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800a246:	f010 0001 	ands.w	r0, r0, #1
 800a24a:	d0dc      	beq.n	800a206 <USB_CoreInit+0x36>
    count++;
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	3301      	adds	r3, #1
 800a250:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	4293      	cmp	r3, r2
 800a256:	d9f4      	bls.n	800a242 <USB_CoreInit+0x72>
 800a258:	e7d4      	b.n	800a204 <USB_CoreInit+0x34>
 800a25a:	bf00      	nop
 800a25c:	00030d40 	.word	0x00030d40

0800a260 <USB_DisableGlobalInt>:
{
 800a260:	4603      	mov	r3, r0
}
 800a262:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	f022 0201 	bic.w	r2, r2, #1
 800a26a:	609a      	str	r2, [r3, #8]
}
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <USB_SetCurrentMode>:
{
 800a270:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a272:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a274:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a276:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 800a27a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a27c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a27e:	d018      	beq.n	800a2b2 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 800a280:	b9a9      	cbnz	r1, 800a2ae <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a282:	68c3      	ldr	r3, [r0, #12]
 800a284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 800a288:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a28a:	60c3      	str	r3, [r0, #12]
 800a28c:	e001      	b.n	800a292 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a28e:	2c32      	cmp	r4, #50	@ 0x32
 800a290:	d00d      	beq.n	800a2ae <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 800a292:	2001      	movs	r0, #1
 800a294:	f7fd ffa2 	bl	80081dc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800a298:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a29a:	07db      	lsls	r3, r3, #31
      ms++;
 800a29c:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a2a0:	d4f5      	bmi.n	800a28e <USB_SetCurrentMode+0x1e>
  if (ms == 50U)
 800a2a2:	f1a4 0032 	sub.w	r0, r4, #50	@ 0x32
 800a2a6:	fab0 f080 	clz	r0, r0
 800a2aa:	0940      	lsrs	r0, r0, #5
}
 800a2ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a2ae:	2001      	movs	r0, #1
}
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2b2:	68c3      	ldr	r3, [r0, #12]
 800a2b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 800a2b8:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2ba:	60c3      	str	r3, [r0, #12]
 800a2bc:	e001      	b.n	800a2c2 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a2be:	2c32      	cmp	r4, #50	@ 0x32
 800a2c0:	d0f5      	beq.n	800a2ae <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	f7fd ff8a 	bl	80081dc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800a2c8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a2ca:	07da      	lsls	r2, r3, #31
      ms++;
 800a2cc:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a2d0:	d5f5      	bpl.n	800a2be <USB_SetCurrentMode+0x4e>
  if (ms == 50U)
 800a2d2:	f1a4 0032 	sub.w	r0, r4, #50	@ 0x32
 800a2d6:	fab0 f080 	clz	r0, r0
 800a2da:	0940      	lsrs	r0, r0, #5
 800a2dc:	e7e6      	b.n	800a2ac <USB_SetCurrentMode+0x3c>
 800a2de:	bf00      	nop

0800a2e0 <USB_DevInit>:
{
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	ac09      	add	r4, sp, #36	@ 0x24
 800a2e8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800a2ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 800a2f4:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800a2f6:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a300:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 800a304:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 800a308:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 800a30c:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 800a310:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 800a314:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 800a318:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 800a31c:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 800a320:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 800a324:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 800a328:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 800a32c:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 800a330:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800a334:	2d00      	cmp	r5, #0
 800a336:	f040 80a7 	bne.w	800a488 <USB_DevInit+0x1a8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a33a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a33e:	f042 0202 	orr.w	r2, r2, #2
 800a342:	f8cc 2004 	str.w	r2, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a346:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800a348:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800a34c:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a34e:	6802      	ldr	r2, [r0, #0]
 800a350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a354:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a356:	6802      	ldr	r2, [r0, #0]
 800a358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a35c:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 800a35e:	2100      	movs	r1, #0
 800a360:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= speed;
 800a364:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800a368:	f042 0203 	orr.w	r2, r2, #3
 800a36c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 800a370:	9100      	str	r1, [sp, #0]
    if (count > 200000U)
 800a372:	4959      	ldr	r1, [pc, #356]	@ (800a4d8 <USB_DevInit+0x1f8>)
 800a374:	e003      	b.n	800a37e <USB_DevInit+0x9e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a376:	691a      	ldr	r2, [r3, #16]
 800a378:	2a00      	cmp	r2, #0
 800a37a:	f2c0 809a 	blt.w	800a4b2 <USB_DevInit+0x1d2>
    count++;
 800a37e:	9a00      	ldr	r2, [sp, #0]
 800a380:	3201      	adds	r2, #1
 800a382:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 800a384:	9a00      	ldr	r2, [sp, #0]
 800a386:	428a      	cmp	r2, r1
 800a388:	d9f5      	bls.n	800a376 <USB_DevInit+0x96>
 800a38a:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800a38c:	2200      	movs	r2, #0
    if (count > 200000U)
 800a38e:	4952      	ldr	r1, [pc, #328]	@ (800a4d8 <USB_DevInit+0x1f8>)
  __IO uint32_t count = 0U;
 800a390:	9201      	str	r2, [sp, #4]
 800a392:	e002      	b.n	800a39a <USB_DevInit+0xba>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	2a00      	cmp	r2, #0
 800a398:	db7b      	blt.n	800a492 <USB_DevInit+0x1b2>
    count++;
 800a39a:	9a01      	ldr	r2, [sp, #4]
 800a39c:	3201      	adds	r2, #1
 800a39e:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 800a3a0:	9a01      	ldr	r2, [sp, #4]
 800a3a2:	428a      	cmp	r2, r1
 800a3a4:	d9f6      	bls.n	800a394 <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 800a3a6:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	f8cc 1010 	str.w	r1, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3ae:	f8cc 1014 	str.w	r1, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3b2:	f8cc 101c 	str.w	r1, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3b6:	b1fc      	cbz	r4, 800a3f8 <USB_DevInit+0x118>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3b8:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 800a3bc:	2e00      	cmp	r6, #0
 800a3be:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800a3c2:	db14      	blt.n	800a3ee <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3c8:	f04f 0e00 	mov.w	lr, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3cc:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	428c      	cmp	r4, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3d4:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3d8:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3da:	f102 0220 	add.w	r2, r2, #32
 800a3de:	d031      	beq.n	800a444 <USB_DevInit+0x164>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3e0:	6816      	ldr	r6, [r2, #0]
 800a3e2:	2e00      	cmp	r6, #0
 800a3e4:	daee      	bge.n	800a3c4 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a3e6:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800a3ea:	6016      	str	r6, [r2, #0]
 800a3ec:	e7f0      	b.n	800a3d0 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a3ee:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 800a3f2:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 800a3f6:	e7e7      	b.n	800a3c8 <USB_DevInit+0xe8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3f8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800a3fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a400:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx->GINTMSK = 0U;
 800a404:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a406:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 800a40a:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a40c:	615a      	str	r2, [r3, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a40e:	6999      	ldr	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a410:	4a32      	ldr	r2, [pc, #200]	@ (800a4dc <USB_DevInit+0x1fc>)
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a412:	f041 0110 	orr.w	r1, r1, #16
 800a416:	6199      	str	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a418:	6999      	ldr	r1, [r3, #24]
 800a41a:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 800a41c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a41e:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800a420:	b119      	cbz	r1, 800a42a <USB_DevInit+0x14a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	f042 0208 	orr.w	r2, r2, #8
 800a428:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a42a:	2d01      	cmp	r5, #1
 800a42c:	d105      	bne.n	800a43a <USB_DevInit+0x15a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a42e:	699a      	ldr	r2, [r3, #24]
 800a430:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a434:	f042 0204 	orr.w	r2, r2, #4
 800a438:	619a      	str	r2, [r3, #24]
}
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a440:	b004      	add	sp, #16
 800a442:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a444:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a448:	2900      	cmp	r1, #0
 800a44a:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800a44e:	db15      	blt.n	800a47c <USB_DevInit+0x19c>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a450:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a452:	2600      	movs	r6, #0
 800a454:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a456:	f04f 0e00 	mov.w	lr, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a45a:	f64f 377f 	movw	r7, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a45e:	3101      	adds	r1, #1
 800a460:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a462:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a466:	6097      	str	r7, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a468:	f102 0220 	add.w	r2, r2, #32
 800a46c:	d0c4      	beq.n	800a3f8 <USB_DevInit+0x118>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a46e:	6816      	ldr	r6, [r2, #0]
 800a470:	2e00      	cmp	r6, #0
 800a472:	daee      	bge.n	800a452 <USB_DevInit+0x172>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a474:	f04f 4690 	mov.w	r6, #1207959552	@ 0x48000000
 800a478:	6016      	str	r6, [r2, #0]
 800a47a:	e7f0      	b.n	800a45e <USB_DevInit+0x17e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a47c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800a480:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a484:	2100      	movs	r1, #0
 800a486:	e7e6      	b.n	800a456 <USB_DevInit+0x176>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a488:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800a48a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800a48e:	6382      	str	r2, [r0, #56]	@ 0x38
 800a490:	e765      	b.n	800a35e <USB_DevInit+0x7e>
  count = 0U;
 800a492:	2200      	movs	r2, #0
 800a494:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a496:	2210      	movs	r2, #16
    if (count > 200000U)
 800a498:	490f      	ldr	r1, [pc, #60]	@ (800a4d8 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a49a:	611a      	str	r2, [r3, #16]
 800a49c:	e002      	b.n	800a4a4 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	06d2      	lsls	r2, r2, #27
 800a4a2:	d581      	bpl.n	800a3a8 <USB_DevInit+0xc8>
    count++;
 800a4a4:	9a01      	ldr	r2, [sp, #4]
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 800a4aa:	9a01      	ldr	r2, [sp, #4]
 800a4ac:	428a      	cmp	r2, r1
 800a4ae:	d9f6      	bls.n	800a49e <USB_DevInit+0x1be>
 800a4b0:	e779      	b.n	800a3a6 <USB_DevInit+0xc6>
  count = 0U;
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a4b6:	f44f 6284 	mov.w	r2, #1056	@ 0x420
    if (count > 200000U)
 800a4ba:	4907      	ldr	r1, [pc, #28]	@ (800a4d8 <USB_DevInit+0x1f8>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a4bc:	611a      	str	r2, [r3, #16]
 800a4be:	e004      	b.n	800a4ca <USB_DevInit+0x1ea>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4c0:	6918      	ldr	r0, [r3, #16]
 800a4c2:	f010 0020 	ands.w	r0, r0, #32
 800a4c6:	f43f af61 	beq.w	800a38c <USB_DevInit+0xac>
    count++;
 800a4ca:	9a00      	ldr	r2, [sp, #0]
 800a4cc:	3201      	adds	r2, #1
 800a4ce:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 800a4d0:	9a00      	ldr	r2, [sp, #0]
 800a4d2:	428a      	cmp	r2, r1
 800a4d4:	d9f4      	bls.n	800a4c0 <USB_DevInit+0x1e0>
 800a4d6:	e758      	b.n	800a38a <USB_DevInit+0xaa>
 800a4d8:	00030d40 	.word	0x00030d40
 800a4dc:	803c3800 	.word	0x803c3800

0800a4e0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4e0:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800a4e4:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4e6:	f022 0203 	bic.w	r2, r2, #3
 800a4ea:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ee:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a4f2:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800a4f6:	f043 0302 	orr.w	r3, r3, #2
}
 800a4fa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4fc:	604b      	str	r3, [r1, #4]
}
 800a4fe:	4770      	bx	lr

0800a500 <sbrk_aligned>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4e0f      	ldr	r6, [pc, #60]	@ (800a540 <sbrk_aligned+0x40>)
 800a504:	460c      	mov	r4, r1
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	4605      	mov	r5, r0
 800a50a:	b911      	cbnz	r1, 800a512 <sbrk_aligned+0x12>
 800a50c:	f000 faec 	bl	800aae8 <_sbrk_r>
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 fae7 	bl	800aae8 <_sbrk_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d103      	bne.n	800a526 <sbrk_aligned+0x26>
 800a51e:	f04f 34ff 	mov.w	r4, #4294967295
 800a522:	4620      	mov	r0, r4
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	1cc4      	adds	r4, r0, #3
 800a528:	f024 0403 	bic.w	r4, r4, #3
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d0f8      	beq.n	800a522 <sbrk_aligned+0x22>
 800a530:	1a21      	subs	r1, r4, r0
 800a532:	4628      	mov	r0, r5
 800a534:	f000 fad8 	bl	800aae8 <_sbrk_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	d1f2      	bne.n	800a522 <sbrk_aligned+0x22>
 800a53c:	e7ef      	b.n	800a51e <sbrk_aligned+0x1e>
 800a53e:	bf00      	nop
 800a540:	20004f3c 	.word	0x20004f3c

0800a544 <_malloc_r>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	1ccd      	adds	r5, r1, #3
 800a54a:	f025 0503 	bic.w	r5, r5, #3
 800a54e:	3508      	adds	r5, #8
 800a550:	2d0c      	cmp	r5, #12
 800a552:	bf38      	it	cc
 800a554:	250c      	movcc	r5, #12
 800a556:	2d00      	cmp	r5, #0
 800a558:	4606      	mov	r6, r0
 800a55a:	db01      	blt.n	800a560 <_malloc_r+0x1c>
 800a55c:	42a9      	cmp	r1, r5
 800a55e:	d904      	bls.n	800a56a <_malloc_r+0x26>
 800a560:	230c      	movs	r3, #12
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a640 <_malloc_r+0xfc>
 800a56e:	f000 f869 	bl	800a644 <__malloc_lock>
 800a572:	f8d8 3000 	ldr.w	r3, [r8]
 800a576:	461c      	mov	r4, r3
 800a578:	bb44      	cbnz	r4, 800a5cc <_malloc_r+0x88>
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ffbf 	bl	800a500 <sbrk_aligned>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	4604      	mov	r4, r0
 800a586:	d158      	bne.n	800a63a <_malloc_r+0xf6>
 800a588:	f8d8 4000 	ldr.w	r4, [r8]
 800a58c:	4627      	mov	r7, r4
 800a58e:	2f00      	cmp	r7, #0
 800a590:	d143      	bne.n	800a61a <_malloc_r+0xd6>
 800a592:	2c00      	cmp	r4, #0
 800a594:	d04b      	beq.n	800a62e <_malloc_r+0xea>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	4639      	mov	r1, r7
 800a59a:	4630      	mov	r0, r6
 800a59c:	eb04 0903 	add.w	r9, r4, r3
 800a5a0:	f000 faa2 	bl	800aae8 <_sbrk_r>
 800a5a4:	4581      	cmp	r9, r0
 800a5a6:	d142      	bne.n	800a62e <_malloc_r+0xea>
 800a5a8:	6821      	ldr	r1, [r4, #0]
 800a5aa:	1a6d      	subs	r5, r5, r1
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7ff ffa6 	bl	800a500 <sbrk_aligned>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d03a      	beq.n	800a62e <_malloc_r+0xea>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	442b      	add	r3, r5
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	bb62      	cbnz	r2, 800a620 <_malloc_r+0xdc>
 800a5c6:	f8c8 7000 	str.w	r7, [r8]
 800a5ca:	e00f      	b.n	800a5ec <_malloc_r+0xa8>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	1b52      	subs	r2, r2, r5
 800a5d0:	d420      	bmi.n	800a614 <_malloc_r+0xd0>
 800a5d2:	2a0b      	cmp	r2, #11
 800a5d4:	d917      	bls.n	800a606 <_malloc_r+0xc2>
 800a5d6:	1961      	adds	r1, r4, r5
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	6025      	str	r5, [r4, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	6059      	strne	r1, [r3, #4]
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	bf08      	it	eq
 800a5e4:	f8c8 1000 	streq.w	r1, [r8]
 800a5e8:	5162      	str	r2, [r4, r5]
 800a5ea:	604b      	str	r3, [r1, #4]
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 f82f 	bl	800a650 <__malloc_unlock>
 800a5f2:	f104 000b 	add.w	r0, r4, #11
 800a5f6:	1d23      	adds	r3, r4, #4
 800a5f8:	f020 0007 	bic.w	r0, r0, #7
 800a5fc:	1ac2      	subs	r2, r0, r3
 800a5fe:	bf1c      	itt	ne
 800a600:	1a1b      	subne	r3, r3, r0
 800a602:	50a3      	strne	r3, [r4, r2]
 800a604:	e7af      	b.n	800a566 <_malloc_r+0x22>
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	bf0c      	ite	eq
 800a60c:	f8c8 2000 	streq.w	r2, [r8]
 800a610:	605a      	strne	r2, [r3, #4]
 800a612:	e7eb      	b.n	800a5ec <_malloc_r+0xa8>
 800a614:	4623      	mov	r3, r4
 800a616:	6864      	ldr	r4, [r4, #4]
 800a618:	e7ae      	b.n	800a578 <_malloc_r+0x34>
 800a61a:	463c      	mov	r4, r7
 800a61c:	687f      	ldr	r7, [r7, #4]
 800a61e:	e7b6      	b.n	800a58e <_malloc_r+0x4a>
 800a620:	461a      	mov	r2, r3
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	42a3      	cmp	r3, r4
 800a626:	d1fb      	bne.n	800a620 <_malloc_r+0xdc>
 800a628:	2300      	movs	r3, #0
 800a62a:	6053      	str	r3, [r2, #4]
 800a62c:	e7de      	b.n	800a5ec <_malloc_r+0xa8>
 800a62e:	230c      	movs	r3, #12
 800a630:	6033      	str	r3, [r6, #0]
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f80c 	bl	800a650 <__malloc_unlock>
 800a638:	e794      	b.n	800a564 <_malloc_r+0x20>
 800a63a:	6005      	str	r5, [r0, #0]
 800a63c:	e7d6      	b.n	800a5ec <_malloc_r+0xa8>
 800a63e:	bf00      	nop
 800a640:	20004f40 	.word	0x20004f40

0800a644 <__malloc_lock>:
 800a644:	4801      	ldr	r0, [pc, #4]	@ (800a64c <__malloc_lock+0x8>)
 800a646:	f000 ba9c 	b.w	800ab82 <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	20005084 	.word	0x20005084

0800a650 <__malloc_unlock>:
 800a650:	4801      	ldr	r0, [pc, #4]	@ (800a658 <__malloc_unlock+0x8>)
 800a652:	f000 ba97 	b.w	800ab84 <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	20005084 	.word	0x20005084

0800a65c <std>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	e9c0 3300 	strd	r3, r3, [r0]
 800a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a66a:	6083      	str	r3, [r0, #8]
 800a66c:	8181      	strh	r1, [r0, #12]
 800a66e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a670:	81c2      	strh	r2, [r0, #14]
 800a672:	6183      	str	r3, [r0, #24]
 800a674:	4619      	mov	r1, r3
 800a676:	2208      	movs	r2, #8
 800a678:	305c      	adds	r0, #92	@ 0x5c
 800a67a:	f000 f9f9 	bl	800aa70 <memset>
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <std+0x58>)
 800a680:	6263      	str	r3, [r4, #36]	@ 0x24
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <std+0x5c>)
 800a684:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a686:	4b0d      	ldr	r3, [pc, #52]	@ (800a6bc <std+0x60>)
 800a688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a68a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c0 <std+0x64>)
 800a68c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a68e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <std+0x68>)
 800a690:	6224      	str	r4, [r4, #32]
 800a692:	429c      	cmp	r4, r3
 800a694:	d006      	beq.n	800a6a4 <std+0x48>
 800a696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a69a:	4294      	cmp	r4, r2
 800a69c:	d002      	beq.n	800a6a4 <std+0x48>
 800a69e:	33d0      	adds	r3, #208	@ 0xd0
 800a6a0:	429c      	cmp	r4, r3
 800a6a2:	d105      	bne.n	800a6b0 <std+0x54>
 800a6a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f000 ba68 	b.w	800ab80 <__retarget_lock_init_recursive>
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800a8c1 	.word	0x0800a8c1
 800a6b8:	0800a8e3 	.word	0x0800a8e3
 800a6bc:	0800a91b 	.word	0x0800a91b
 800a6c0:	0800a93f 	.word	0x0800a93f
 800a6c4:	20004f44 	.word	0x20004f44

0800a6c8 <stdio_exit_handler>:
 800a6c8:	4a02      	ldr	r2, [pc, #8]	@ (800a6d4 <stdio_exit_handler+0xc>)
 800a6ca:	4903      	ldr	r1, [pc, #12]	@ (800a6d8 <stdio_exit_handler+0x10>)
 800a6cc:	4803      	ldr	r0, [pc, #12]	@ (800a6dc <stdio_exit_handler+0x14>)
 800a6ce:	f000 b869 	b.w	800a7a4 <_fwalk_sglue>
 800a6d2:	bf00      	nop
 800a6d4:	20004804 	.word	0x20004804
 800a6d8:	0800b2e1 	.word	0x0800b2e1
 800a6dc:	20004814 	.word	0x20004814

0800a6e0 <cleanup_stdio>:
 800a6e0:	6841      	ldr	r1, [r0, #4]
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <cleanup_stdio+0x34>)
 800a6e4:	4299      	cmp	r1, r3
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	d001      	beq.n	800a6f0 <cleanup_stdio+0x10>
 800a6ec:	f000 fdf8 	bl	800b2e0 <_fflush_r>
 800a6f0:	68a1      	ldr	r1, [r4, #8]
 800a6f2:	4b09      	ldr	r3, [pc, #36]	@ (800a718 <cleanup_stdio+0x38>)
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d002      	beq.n	800a6fe <cleanup_stdio+0x1e>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fdf1 	bl	800b2e0 <_fflush_r>
 800a6fe:	68e1      	ldr	r1, [r4, #12]
 800a700:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <cleanup_stdio+0x3c>)
 800a702:	4299      	cmp	r1, r3
 800a704:	d004      	beq.n	800a710 <cleanup_stdio+0x30>
 800a706:	4620      	mov	r0, r4
 800a708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a70c:	f000 bde8 	b.w	800b2e0 <_fflush_r>
 800a710:	bd10      	pop	{r4, pc}
 800a712:	bf00      	nop
 800a714:	20004f44 	.word	0x20004f44
 800a718:	20004fac 	.word	0x20004fac
 800a71c:	20005014 	.word	0x20005014

0800a720 <global_stdio_init.part.0>:
 800a720:	b510      	push	{r4, lr}
 800a722:	4b0b      	ldr	r3, [pc, #44]	@ (800a750 <global_stdio_init.part.0+0x30>)
 800a724:	4c0b      	ldr	r4, [pc, #44]	@ (800a754 <global_stdio_init.part.0+0x34>)
 800a726:	4a0c      	ldr	r2, [pc, #48]	@ (800a758 <global_stdio_init.part.0+0x38>)
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	4620      	mov	r0, r4
 800a72c:	2200      	movs	r2, #0
 800a72e:	2104      	movs	r1, #4
 800a730:	f7ff ff94 	bl	800a65c <std>
 800a734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a738:	2201      	movs	r2, #1
 800a73a:	2109      	movs	r1, #9
 800a73c:	f7ff ff8e 	bl	800a65c <std>
 800a740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a744:	2202      	movs	r2, #2
 800a746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a74a:	2112      	movs	r1, #18
 800a74c:	f7ff bf86 	b.w	800a65c <std>
 800a750:	2000507c 	.word	0x2000507c
 800a754:	20004f44 	.word	0x20004f44
 800a758:	0800a6c9 	.word	0x0800a6c9

0800a75c <__sfp_lock_acquire>:
 800a75c:	4801      	ldr	r0, [pc, #4]	@ (800a764 <__sfp_lock_acquire+0x8>)
 800a75e:	f000 ba10 	b.w	800ab82 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	20005085 	.word	0x20005085

0800a768 <__sfp_lock_release>:
 800a768:	4801      	ldr	r0, [pc, #4]	@ (800a770 <__sfp_lock_release+0x8>)
 800a76a:	f000 ba0b 	b.w	800ab84 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	20005085 	.word	0x20005085

0800a774 <__sinit>:
 800a774:	b510      	push	{r4, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	f7ff fff0 	bl	800a75c <__sfp_lock_acquire>
 800a77c:	6a23      	ldr	r3, [r4, #32]
 800a77e:	b11b      	cbz	r3, 800a788 <__sinit+0x14>
 800a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a784:	f7ff bff0 	b.w	800a768 <__sfp_lock_release>
 800a788:	4b04      	ldr	r3, [pc, #16]	@ (800a79c <__sinit+0x28>)
 800a78a:	6223      	str	r3, [r4, #32]
 800a78c:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <__sinit+0x2c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1f5      	bne.n	800a780 <__sinit+0xc>
 800a794:	f7ff ffc4 	bl	800a720 <global_stdio_init.part.0>
 800a798:	e7f2      	b.n	800a780 <__sinit+0xc>
 800a79a:	bf00      	nop
 800a79c:	0800a6e1 	.word	0x0800a6e1
 800a7a0:	2000507c 	.word	0x2000507c

0800a7a4 <_fwalk_sglue>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4688      	mov	r8, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b8:	d505      	bpl.n	800a7c6 <_fwalk_sglue+0x22>
 800a7ba:	6824      	ldr	r4, [r4, #0]
 800a7bc:	2c00      	cmp	r4, #0
 800a7be:	d1f7      	bne.n	800a7b0 <_fwalk_sglue+0xc>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	89ab      	ldrh	r3, [r5, #12]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d907      	bls.n	800a7dc <_fwalk_sglue+0x38>
 800a7cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	d003      	beq.n	800a7dc <_fwalk_sglue+0x38>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	47c0      	blx	r8
 800a7da:	4306      	orrs	r6, r0
 800a7dc:	3568      	adds	r5, #104	@ 0x68
 800a7de:	e7e9      	b.n	800a7b4 <_fwalk_sglue+0x10>

0800a7e0 <iprintf>:
 800a7e0:	b40f      	push	{r0, r1, r2, r3}
 800a7e2:	b507      	push	{r0, r1, r2, lr}
 800a7e4:	4906      	ldr	r1, [pc, #24]	@ (800a800 <iprintf+0x20>)
 800a7e6:	ab04      	add	r3, sp, #16
 800a7e8:	6808      	ldr	r0, [r1, #0]
 800a7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ee:	6881      	ldr	r1, [r0, #8]
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	f000 fa4b 	bl	800ac8c <_vfiprintf_r>
 800a7f6:	b003      	add	sp, #12
 800a7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7fc:	b004      	add	sp, #16
 800a7fe:	4770      	bx	lr
 800a800:	20004810 	.word	0x20004810

0800a804 <_puts_r>:
 800a804:	6a03      	ldr	r3, [r0, #32]
 800a806:	b570      	push	{r4, r5, r6, lr}
 800a808:	6884      	ldr	r4, [r0, #8]
 800a80a:	4605      	mov	r5, r0
 800a80c:	460e      	mov	r6, r1
 800a80e:	b90b      	cbnz	r3, 800a814 <_puts_r+0x10>
 800a810:	f7ff ffb0 	bl	800a774 <__sinit>
 800a814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d405      	bmi.n	800a826 <_puts_r+0x22>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	0598      	lsls	r0, r3, #22
 800a81e:	d402      	bmi.n	800a826 <_puts_r+0x22>
 800a820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a822:	f000 f9ae 	bl	800ab82 <__retarget_lock_acquire_recursive>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	0719      	lsls	r1, r3, #28
 800a82a:	d502      	bpl.n	800a832 <_puts_r+0x2e>
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d135      	bne.n	800a89e <_puts_r+0x9a>
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f8c5 	bl	800a9c4 <__swsetup_r>
 800a83a:	b380      	cbz	r0, 800a89e <_puts_r+0x9a>
 800a83c:	f04f 35ff 	mov.w	r5, #4294967295
 800a840:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a842:	07da      	lsls	r2, r3, #31
 800a844:	d405      	bmi.n	800a852 <_puts_r+0x4e>
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	059b      	lsls	r3, r3, #22
 800a84a:	d402      	bmi.n	800a852 <_puts_r+0x4e>
 800a84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a84e:	f000 f999 	bl	800ab84 <__retarget_lock_release_recursive>
 800a852:	4628      	mov	r0, r5
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	2b00      	cmp	r3, #0
 800a858:	da04      	bge.n	800a864 <_puts_r+0x60>
 800a85a:	69a2      	ldr	r2, [r4, #24]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	dc17      	bgt.n	800a890 <_puts_r+0x8c>
 800a860:	290a      	cmp	r1, #10
 800a862:	d015      	beq.n	800a890 <_puts_r+0x8c>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	6022      	str	r2, [r4, #0]
 800a86a:	7019      	strb	r1, [r3, #0]
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a872:	3b01      	subs	r3, #1
 800a874:	60a3      	str	r3, [r4, #8]
 800a876:	2900      	cmp	r1, #0
 800a878:	d1ed      	bne.n	800a856 <_puts_r+0x52>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da11      	bge.n	800a8a2 <_puts_r+0x9e>
 800a87e:	4622      	mov	r2, r4
 800a880:	210a      	movs	r1, #10
 800a882:	4628      	mov	r0, r5
 800a884:	f000 f85f 	bl	800a946 <__swbuf_r>
 800a888:	3001      	adds	r0, #1
 800a88a:	d0d7      	beq.n	800a83c <_puts_r+0x38>
 800a88c:	250a      	movs	r5, #10
 800a88e:	e7d7      	b.n	800a840 <_puts_r+0x3c>
 800a890:	4622      	mov	r2, r4
 800a892:	4628      	mov	r0, r5
 800a894:	f000 f857 	bl	800a946 <__swbuf_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	d1e7      	bne.n	800a86c <_puts_r+0x68>
 800a89c:	e7ce      	b.n	800a83c <_puts_r+0x38>
 800a89e:	3e01      	subs	r6, #1
 800a8a0:	e7e4      	b.n	800a86c <_puts_r+0x68>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	6022      	str	r2, [r4, #0]
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e7ee      	b.n	800a88c <_puts_r+0x88>
	...

0800a8b0 <puts>:
 800a8b0:	4b02      	ldr	r3, [pc, #8]	@ (800a8bc <puts+0xc>)
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	f7ff bfa5 	b.w	800a804 <_puts_r>
 800a8ba:	bf00      	nop
 800a8bc:	20004810 	.word	0x20004810

0800a8c0 <__sread>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c8:	f000 f8fc 	bl	800aac4 <_read_r>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	bfab      	itete	ge
 800a8d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d4:	181b      	addge	r3, r3, r0
 800a8d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8da:	bfac      	ite	ge
 800a8dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8de:	81a3      	strhlt	r3, [r4, #12]
 800a8e0:	bd10      	pop	{r4, pc}

0800a8e2 <__swrite>:
 800a8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e6:	461f      	mov	r7, r3
 800a8e8:	898b      	ldrh	r3, [r1, #12]
 800a8ea:	05db      	lsls	r3, r3, #23
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	d505      	bpl.n	800a900 <__swrite+0x1e>
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f000 f8d0 	bl	800aaa0 <_lseek_r>
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	4632      	mov	r2, r6
 800a90e:	463b      	mov	r3, r7
 800a910:	4628      	mov	r0, r5
 800a912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	f000 b8f7 	b.w	800ab08 <_write_r>

0800a91a <__sseek>:
 800a91a:	b510      	push	{r4, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a922:	f000 f8bd 	bl	800aaa0 <_lseek_r>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	bf15      	itete	ne
 800a92c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a92e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a936:	81a3      	strheq	r3, [r4, #12]
 800a938:	bf18      	it	ne
 800a93a:	81a3      	strhne	r3, [r4, #12]
 800a93c:	bd10      	pop	{r4, pc}

0800a93e <__sclose>:
 800a93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a942:	f000 b89d 	b.w	800aa80 <_close_r>

0800a946 <__swbuf_r>:
 800a946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a948:	460e      	mov	r6, r1
 800a94a:	4614      	mov	r4, r2
 800a94c:	4605      	mov	r5, r0
 800a94e:	b118      	cbz	r0, 800a958 <__swbuf_r+0x12>
 800a950:	6a03      	ldr	r3, [r0, #32]
 800a952:	b90b      	cbnz	r3, 800a958 <__swbuf_r+0x12>
 800a954:	f7ff ff0e 	bl	800a774 <__sinit>
 800a958:	69a3      	ldr	r3, [r4, #24]
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	071a      	lsls	r2, r3, #28
 800a960:	d501      	bpl.n	800a966 <__swbuf_r+0x20>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	b943      	cbnz	r3, 800a978 <__swbuf_r+0x32>
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f000 f82b 	bl	800a9c4 <__swsetup_r>
 800a96e:	b118      	cbz	r0, 800a978 <__swbuf_r+0x32>
 800a970:	f04f 37ff 	mov.w	r7, #4294967295
 800a974:	4638      	mov	r0, r7
 800a976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	6922      	ldr	r2, [r4, #16]
 800a97c:	1a98      	subs	r0, r3, r2
 800a97e:	6963      	ldr	r3, [r4, #20]
 800a980:	b2f6      	uxtb	r6, r6
 800a982:	4283      	cmp	r3, r0
 800a984:	4637      	mov	r7, r6
 800a986:	dc05      	bgt.n	800a994 <__swbuf_r+0x4e>
 800a988:	4621      	mov	r1, r4
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 fca8 	bl	800b2e0 <_fflush_r>
 800a990:	2800      	cmp	r0, #0
 800a992:	d1ed      	bne.n	800a970 <__swbuf_r+0x2a>
 800a994:	68a3      	ldr	r3, [r4, #8]
 800a996:	3b01      	subs	r3, #1
 800a998:	60a3      	str	r3, [r4, #8]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	6022      	str	r2, [r4, #0]
 800a9a0:	701e      	strb	r6, [r3, #0]
 800a9a2:	6962      	ldr	r2, [r4, #20]
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d004      	beq.n	800a9b4 <__swbuf_r+0x6e>
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	07db      	lsls	r3, r3, #31
 800a9ae:	d5e1      	bpl.n	800a974 <__swbuf_r+0x2e>
 800a9b0:	2e0a      	cmp	r6, #10
 800a9b2:	d1df      	bne.n	800a974 <__swbuf_r+0x2e>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fc92 	bl	800b2e0 <_fflush_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0d9      	beq.n	800a974 <__swbuf_r+0x2e>
 800a9c0:	e7d6      	b.n	800a970 <__swbuf_r+0x2a>
	...

0800a9c4 <__swsetup_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4b29      	ldr	r3, [pc, #164]	@ (800aa6c <__swsetup_r+0xa8>)
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	6818      	ldr	r0, [r3, #0]
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	b118      	cbz	r0, 800a9d8 <__swsetup_r+0x14>
 800a9d0:	6a03      	ldr	r3, [r0, #32]
 800a9d2:	b90b      	cbnz	r3, 800a9d8 <__swsetup_r+0x14>
 800a9d4:	f7ff fece 	bl	800a774 <__sinit>
 800a9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9dc:	0719      	lsls	r1, r3, #28
 800a9de:	d422      	bmi.n	800aa26 <__swsetup_r+0x62>
 800a9e0:	06da      	lsls	r2, r3, #27
 800a9e2:	d407      	bmi.n	800a9f4 <__swsetup_r+0x30>
 800a9e4:	2209      	movs	r2, #9
 800a9e6:	602a      	str	r2, [r5, #0]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	e033      	b.n	800aa5c <__swsetup_r+0x98>
 800a9f4:	0758      	lsls	r0, r3, #29
 800a9f6:	d512      	bpl.n	800aa1e <__swsetup_r+0x5a>
 800a9f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9fa:	b141      	cbz	r1, 800aa0e <__swsetup_r+0x4a>
 800a9fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d002      	beq.n	800aa0a <__swsetup_r+0x46>
 800aa04:	4628      	mov	r0, r5
 800aa06:	f000 f8cd 	bl	800aba4 <_free_r>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	2300      	movs	r3, #0
 800aa18:	6063      	str	r3, [r4, #4]
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	f043 0308 	orr.w	r3, r3, #8
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	b94b      	cbnz	r3, 800aa3e <__swsetup_r+0x7a>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa34:	d003      	beq.n	800aa3e <__swsetup_r+0x7a>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 fc9f 	bl	800b37c <__smakebuf_r>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	f013 0201 	ands.w	r2, r3, #1
 800aa46:	d00a      	beq.n	800aa5e <__swsetup_r+0x9a>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	60a2      	str	r2, [r4, #8]
 800aa4c:	6962      	ldr	r2, [r4, #20]
 800aa4e:	4252      	negs	r2, r2
 800aa50:	61a2      	str	r2, [r4, #24]
 800aa52:	6922      	ldr	r2, [r4, #16]
 800aa54:	b942      	cbnz	r2, 800aa68 <__swsetup_r+0xa4>
 800aa56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa5a:	d1c5      	bne.n	800a9e8 <__swsetup_r+0x24>
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	0799      	lsls	r1, r3, #30
 800aa60:	bf58      	it	pl
 800aa62:	6962      	ldrpl	r2, [r4, #20]
 800aa64:	60a2      	str	r2, [r4, #8]
 800aa66:	e7f4      	b.n	800aa52 <__swsetup_r+0x8e>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7f7      	b.n	800aa5c <__swsetup_r+0x98>
 800aa6c:	20004810 	.word	0x20004810

0800aa70 <memset>:
 800aa70:	4402      	add	r2, r0
 800aa72:	4603      	mov	r3, r0
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d100      	bne.n	800aa7a <memset+0xa>
 800aa78:	4770      	bx	lr
 800aa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7e:	e7f9      	b.n	800aa74 <memset+0x4>

0800aa80 <_close_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d06      	ldr	r5, [pc, #24]	@ (800aa9c <_close_r+0x1c>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7fb fc68 	bl	8006360 <_close>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_close_r+0x1a>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_close_r+0x1a>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	20005080 	.word	0x20005080

0800aaa0 <_lseek_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d07      	ldr	r5, [pc, #28]	@ (800aac0 <_lseek_r+0x20>)
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	602a      	str	r2, [r5, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f7fb fc62 	bl	8006378 <_lseek>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_lseek_r+0x1e>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_lseek_r+0x1e>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20005080 	.word	0x20005080

0800aac4 <_read_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d07      	ldr	r5, [pc, #28]	@ (800aae4 <_read_r+0x20>)
 800aac8:	4604      	mov	r4, r0
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	602a      	str	r2, [r5, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	f7fb fc28 	bl	8006328 <_read>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_read_r+0x1e>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_read_r+0x1e>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20005080 	.word	0x20005080

0800aae8 <_sbrk_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d06      	ldr	r5, [pc, #24]	@ (800ab04 <_sbrk_r+0x1c>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7fb fc42 	bl	800637c <_sbrk>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_sbrk_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_sbrk_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20005080 	.word	0x20005080

0800ab08 <_write_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	@ (800ab28 <_write_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7fb fc14 	bl	8006344 <_write>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_write_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_write_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20005080 	.word	0x20005080

0800ab2c <__errno>:
 800ab2c:	4b01      	ldr	r3, [pc, #4]	@ (800ab34 <__errno+0x8>)
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20004810 	.word	0x20004810

0800ab38 <__libc_init_array>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ab70 <__libc_init_array+0x38>)
 800ab3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ab74 <__libc_init_array+0x3c>)
 800ab3e:	1b64      	subs	r4, r4, r5
 800ab40:	10a4      	asrs	r4, r4, #2
 800ab42:	2600      	movs	r6, #0
 800ab44:	42a6      	cmp	r6, r4
 800ab46:	d109      	bne.n	800ab5c <__libc_init_array+0x24>
 800ab48:	4d0b      	ldr	r5, [pc, #44]	@ (800ab78 <__libc_init_array+0x40>)
 800ab4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab7c <__libc_init_array+0x44>)
 800ab4c:	f000 fc74 	bl	800b438 <_init>
 800ab50:	1b64      	subs	r4, r4, r5
 800ab52:	10a4      	asrs	r4, r4, #2
 800ab54:	2600      	movs	r6, #0
 800ab56:	42a6      	cmp	r6, r4
 800ab58:	d105      	bne.n	800ab66 <__libc_init_array+0x2e>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab60:	4798      	blx	r3
 800ab62:	3601      	adds	r6, #1
 800ab64:	e7ee      	b.n	800ab44 <__libc_init_array+0xc>
 800ab66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6a:	4798      	blx	r3
 800ab6c:	3601      	adds	r6, #1
 800ab6e:	e7f2      	b.n	800ab56 <__libc_init_array+0x1e>
 800ab70:	0800b5e4 	.word	0x0800b5e4
 800ab74:	0800b5e4 	.word	0x0800b5e4
 800ab78:	0800b5e4 	.word	0x0800b5e4
 800ab7c:	0800b5e8 	.word	0x0800b5e8

0800ab80 <__retarget_lock_init_recursive>:
 800ab80:	4770      	bx	lr

0800ab82 <__retarget_lock_acquire_recursive>:
 800ab82:	4770      	bx	lr

0800ab84 <__retarget_lock_release_recursive>:
 800ab84:	4770      	bx	lr

0800ab86 <memcpy>:
 800ab86:	440a      	add	r2, r1
 800ab88:	4291      	cmp	r1, r2
 800ab8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab8e:	d100      	bne.n	800ab92 <memcpy+0xc>
 800ab90:	4770      	bx	lr
 800ab92:	b510      	push	{r4, lr}
 800ab94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab9c:	4291      	cmp	r1, r2
 800ab9e:	d1f9      	bne.n	800ab94 <memcpy+0xe>
 800aba0:	bd10      	pop	{r4, pc}
	...

0800aba4 <_free_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4605      	mov	r5, r0
 800aba8:	2900      	cmp	r1, #0
 800abaa:	d041      	beq.n	800ac30 <_free_r+0x8c>
 800abac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb0:	1f0c      	subs	r4, r1, #4
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	bfb8      	it	lt
 800abb6:	18e4      	addlt	r4, r4, r3
 800abb8:	f7ff fd44 	bl	800a644 <__malloc_lock>
 800abbc:	4a1d      	ldr	r2, [pc, #116]	@ (800ac34 <_free_r+0x90>)
 800abbe:	6813      	ldr	r3, [r2, #0]
 800abc0:	b933      	cbnz	r3, 800abd0 <_free_r+0x2c>
 800abc2:	6063      	str	r3, [r4, #4]
 800abc4:	6014      	str	r4, [r2, #0]
 800abc6:	4628      	mov	r0, r5
 800abc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abcc:	f7ff bd40 	b.w	800a650 <__malloc_unlock>
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d908      	bls.n	800abe6 <_free_r+0x42>
 800abd4:	6820      	ldr	r0, [r4, #0]
 800abd6:	1821      	adds	r1, r4, r0
 800abd8:	428b      	cmp	r3, r1
 800abda:	bf01      	itttt	eq
 800abdc:	6819      	ldreq	r1, [r3, #0]
 800abde:	685b      	ldreq	r3, [r3, #4]
 800abe0:	1809      	addeq	r1, r1, r0
 800abe2:	6021      	streq	r1, [r4, #0]
 800abe4:	e7ed      	b.n	800abc2 <_free_r+0x1e>
 800abe6:	461a      	mov	r2, r3
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	b10b      	cbz	r3, 800abf0 <_free_r+0x4c>
 800abec:	42a3      	cmp	r3, r4
 800abee:	d9fa      	bls.n	800abe6 <_free_r+0x42>
 800abf0:	6811      	ldr	r1, [r2, #0]
 800abf2:	1850      	adds	r0, r2, r1
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d10b      	bne.n	800ac10 <_free_r+0x6c>
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	4401      	add	r1, r0
 800abfc:	1850      	adds	r0, r2, r1
 800abfe:	4283      	cmp	r3, r0
 800ac00:	6011      	str	r1, [r2, #0]
 800ac02:	d1e0      	bne.n	800abc6 <_free_r+0x22>
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	6053      	str	r3, [r2, #4]
 800ac0a:	4408      	add	r0, r1
 800ac0c:	6010      	str	r0, [r2, #0]
 800ac0e:	e7da      	b.n	800abc6 <_free_r+0x22>
 800ac10:	d902      	bls.n	800ac18 <_free_r+0x74>
 800ac12:	230c      	movs	r3, #12
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	e7d6      	b.n	800abc6 <_free_r+0x22>
 800ac18:	6820      	ldr	r0, [r4, #0]
 800ac1a:	1821      	adds	r1, r4, r0
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	bf04      	itt	eq
 800ac20:	6819      	ldreq	r1, [r3, #0]
 800ac22:	685b      	ldreq	r3, [r3, #4]
 800ac24:	6063      	str	r3, [r4, #4]
 800ac26:	bf04      	itt	eq
 800ac28:	1809      	addeq	r1, r1, r0
 800ac2a:	6021      	streq	r1, [r4, #0]
 800ac2c:	6054      	str	r4, [r2, #4]
 800ac2e:	e7ca      	b.n	800abc6 <_free_r+0x22>
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
 800ac32:	bf00      	nop
 800ac34:	20004f40 	.word	0x20004f40

0800ac38 <__sfputc_r>:
 800ac38:	6893      	ldr	r3, [r2, #8]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	b410      	push	{r4}
 800ac40:	6093      	str	r3, [r2, #8]
 800ac42:	da08      	bge.n	800ac56 <__sfputc_r+0x1e>
 800ac44:	6994      	ldr	r4, [r2, #24]
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	db01      	blt.n	800ac4e <__sfputc_r+0x16>
 800ac4a:	290a      	cmp	r1, #10
 800ac4c:	d103      	bne.n	800ac56 <__sfputc_r+0x1e>
 800ac4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac52:	f7ff be78 	b.w	800a946 <__swbuf_r>
 800ac56:	6813      	ldr	r3, [r2, #0]
 800ac58:	1c58      	adds	r0, r3, #1
 800ac5a:	6010      	str	r0, [r2, #0]
 800ac5c:	7019      	strb	r1, [r3, #0]
 800ac5e:	4608      	mov	r0, r1
 800ac60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <__sfputs_r>:
 800ac66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac68:	4606      	mov	r6, r0
 800ac6a:	460f      	mov	r7, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	18d5      	adds	r5, r2, r3
 800ac70:	42ac      	cmp	r4, r5
 800ac72:	d101      	bne.n	800ac78 <__sfputs_r+0x12>
 800ac74:	2000      	movs	r0, #0
 800ac76:	e007      	b.n	800ac88 <__sfputs_r+0x22>
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	463a      	mov	r2, r7
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7ff ffda 	bl	800ac38 <__sfputc_r>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	d1f3      	bne.n	800ac70 <__sfputs_r+0xa>
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac8c <_vfiprintf_r>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	460d      	mov	r5, r1
 800ac92:	b09d      	sub	sp, #116	@ 0x74
 800ac94:	4614      	mov	r4, r2
 800ac96:	4698      	mov	r8, r3
 800ac98:	4606      	mov	r6, r0
 800ac9a:	b118      	cbz	r0, 800aca4 <_vfiprintf_r+0x18>
 800ac9c:	6a03      	ldr	r3, [r0, #32]
 800ac9e:	b90b      	cbnz	r3, 800aca4 <_vfiprintf_r+0x18>
 800aca0:	f7ff fd68 	bl	800a774 <__sinit>
 800aca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d405      	bmi.n	800acb6 <_vfiprintf_r+0x2a>
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	059a      	lsls	r2, r3, #22
 800acae:	d402      	bmi.n	800acb6 <_vfiprintf_r+0x2a>
 800acb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acb2:	f7ff ff66 	bl	800ab82 <__retarget_lock_acquire_recursive>
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	071b      	lsls	r3, r3, #28
 800acba:	d501      	bpl.n	800acc0 <_vfiprintf_r+0x34>
 800acbc:	692b      	ldr	r3, [r5, #16]
 800acbe:	b99b      	cbnz	r3, 800ace8 <_vfiprintf_r+0x5c>
 800acc0:	4629      	mov	r1, r5
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7ff fe7e 	bl	800a9c4 <__swsetup_r>
 800acc8:	b170      	cbz	r0, 800ace8 <_vfiprintf_r+0x5c>
 800acca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800accc:	07dc      	lsls	r4, r3, #31
 800acce:	d504      	bpl.n	800acda <_vfiprintf_r+0x4e>
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	b01d      	add	sp, #116	@ 0x74
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	0598      	lsls	r0, r3, #22
 800acde:	d4f7      	bmi.n	800acd0 <_vfiprintf_r+0x44>
 800ace0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ace2:	f7ff ff4f 	bl	800ab84 <__retarget_lock_release_recursive>
 800ace6:	e7f3      	b.n	800acd0 <_vfiprintf_r+0x44>
 800ace8:	2300      	movs	r3, #0
 800acea:	9309      	str	r3, [sp, #36]	@ 0x24
 800acec:	2320      	movs	r3, #32
 800acee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf6:	2330      	movs	r3, #48	@ 0x30
 800acf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aea8 <_vfiprintf_r+0x21c>
 800acfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad00:	f04f 0901 	mov.w	r9, #1
 800ad04:	4623      	mov	r3, r4
 800ad06:	469a      	mov	sl, r3
 800ad08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad0c:	b10a      	cbz	r2, 800ad12 <_vfiprintf_r+0x86>
 800ad0e:	2a25      	cmp	r2, #37	@ 0x25
 800ad10:	d1f9      	bne.n	800ad06 <_vfiprintf_r+0x7a>
 800ad12:	ebba 0b04 	subs.w	fp, sl, r4
 800ad16:	d00b      	beq.n	800ad30 <_vfiprintf_r+0xa4>
 800ad18:	465b      	mov	r3, fp
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ffa1 	bl	800ac66 <__sfputs_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	f000 80a7 	beq.w	800ae78 <_vfiprintf_r+0x1ec>
 800ad2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad2c:	445a      	add	r2, fp
 800ad2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad30:	f89a 3000 	ldrb.w	r3, [sl]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 809f 	beq.w	800ae78 <_vfiprintf_r+0x1ec>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad44:	f10a 0a01 	add.w	sl, sl, #1
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad50:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad52:	4654      	mov	r4, sl
 800ad54:	2205      	movs	r2, #5
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4853      	ldr	r0, [pc, #332]	@ (800aea8 <_vfiprintf_r+0x21c>)
 800ad5c:	f7fa fe18 	bl	8005990 <memchr>
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	b9d8      	cbnz	r0, 800ad9c <_vfiprintf_r+0x110>
 800ad64:	06d1      	lsls	r1, r2, #27
 800ad66:	bf44      	itt	mi
 800ad68:	2320      	movmi	r3, #32
 800ad6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad6e:	0713      	lsls	r3, r2, #28
 800ad70:	bf44      	itt	mi
 800ad72:	232b      	movmi	r3, #43	@ 0x2b
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad78:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad7e:	d015      	beq.n	800adac <_vfiprintf_r+0x120>
 800ad80:	9a07      	ldr	r2, [sp, #28]
 800ad82:	4654      	mov	r4, sl
 800ad84:	2000      	movs	r0, #0
 800ad86:	f04f 0c0a 	mov.w	ip, #10
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad90:	3b30      	subs	r3, #48	@ 0x30
 800ad92:	2b09      	cmp	r3, #9
 800ad94:	d94b      	bls.n	800ae2e <_vfiprintf_r+0x1a2>
 800ad96:	b1b0      	cbz	r0, 800adc6 <_vfiprintf_r+0x13a>
 800ad98:	9207      	str	r2, [sp, #28]
 800ad9a:	e014      	b.n	800adc6 <_vfiprintf_r+0x13a>
 800ad9c:	eba0 0308 	sub.w	r3, r0, r8
 800ada0:	fa09 f303 	lsl.w	r3, r9, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	46a2      	mov	sl, r4
 800adaa:	e7d2      	b.n	800ad52 <_vfiprintf_r+0xc6>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	1d19      	adds	r1, r3, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	9103      	str	r1, [sp, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfbb      	ittet	lt
 800adb8:	425b      	neglt	r3, r3
 800adba:	f042 0202 	orrlt.w	r2, r2, #2
 800adbe:	9307      	strge	r3, [sp, #28]
 800adc0:	9307      	strlt	r3, [sp, #28]
 800adc2:	bfb8      	it	lt
 800adc4:	9204      	strlt	r2, [sp, #16]
 800adc6:	7823      	ldrb	r3, [r4, #0]
 800adc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800adca:	d10a      	bne.n	800ade2 <_vfiprintf_r+0x156>
 800adcc:	7863      	ldrb	r3, [r4, #1]
 800adce:	2b2a      	cmp	r3, #42	@ 0x2a
 800add0:	d132      	bne.n	800ae38 <_vfiprintf_r+0x1ac>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	1d1a      	adds	r2, r3, #4
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	9203      	str	r2, [sp, #12]
 800adda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adde:	3402      	adds	r4, #2
 800ade0:	9305      	str	r3, [sp, #20]
 800ade2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aeb8 <_vfiprintf_r+0x22c>
 800ade6:	7821      	ldrb	r1, [r4, #0]
 800ade8:	2203      	movs	r2, #3
 800adea:	4650      	mov	r0, sl
 800adec:	f7fa fdd0 	bl	8005990 <memchr>
 800adf0:	b138      	cbz	r0, 800ae02 <_vfiprintf_r+0x176>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	eba0 000a 	sub.w	r0, r0, sl
 800adf8:	2240      	movs	r2, #64	@ 0x40
 800adfa:	4082      	lsls	r2, r0
 800adfc:	4313      	orrs	r3, r2
 800adfe:	3401      	adds	r4, #1
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae06:	4829      	ldr	r0, [pc, #164]	@ (800aeac <_vfiprintf_r+0x220>)
 800ae08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae0c:	2206      	movs	r2, #6
 800ae0e:	f7fa fdbf 	bl	8005990 <memchr>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d03f      	beq.n	800ae96 <_vfiprintf_r+0x20a>
 800ae16:	4b26      	ldr	r3, [pc, #152]	@ (800aeb0 <_vfiprintf_r+0x224>)
 800ae18:	bb1b      	cbnz	r3, 800ae62 <_vfiprintf_r+0x1d6>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	3307      	adds	r3, #7
 800ae1e:	f023 0307 	bic.w	r3, r3, #7
 800ae22:	3308      	adds	r3, #8
 800ae24:	9303      	str	r3, [sp, #12]
 800ae26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae28:	443b      	add	r3, r7
 800ae2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2c:	e76a      	b.n	800ad04 <_vfiprintf_r+0x78>
 800ae2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae32:	460c      	mov	r4, r1
 800ae34:	2001      	movs	r0, #1
 800ae36:	e7a8      	b.n	800ad8a <_vfiprintf_r+0xfe>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	3401      	adds	r4, #1
 800ae3c:	9305      	str	r3, [sp, #20]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	f04f 0c0a 	mov.w	ip, #10
 800ae44:	4620      	mov	r0, r4
 800ae46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae4a:	3a30      	subs	r2, #48	@ 0x30
 800ae4c:	2a09      	cmp	r2, #9
 800ae4e:	d903      	bls.n	800ae58 <_vfiprintf_r+0x1cc>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0c6      	beq.n	800ade2 <_vfiprintf_r+0x156>
 800ae54:	9105      	str	r1, [sp, #20]
 800ae56:	e7c4      	b.n	800ade2 <_vfiprintf_r+0x156>
 800ae58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7f0      	b.n	800ae44 <_vfiprintf_r+0x1b8>
 800ae62:	ab03      	add	r3, sp, #12
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	462a      	mov	r2, r5
 800ae68:	4b12      	ldr	r3, [pc, #72]	@ (800aeb4 <_vfiprintf_r+0x228>)
 800ae6a:	a904      	add	r1, sp, #16
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f3af 8000 	nop.w
 800ae72:	4607      	mov	r7, r0
 800ae74:	1c78      	adds	r0, r7, #1
 800ae76:	d1d6      	bne.n	800ae26 <_vfiprintf_r+0x19a>
 800ae78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae7a:	07d9      	lsls	r1, r3, #31
 800ae7c:	d405      	bmi.n	800ae8a <_vfiprintf_r+0x1fe>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	059a      	lsls	r2, r3, #22
 800ae82:	d402      	bmi.n	800ae8a <_vfiprintf_r+0x1fe>
 800ae84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae86:	f7ff fe7d 	bl	800ab84 <__retarget_lock_release_recursive>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	065b      	lsls	r3, r3, #25
 800ae8e:	f53f af1f 	bmi.w	800acd0 <_vfiprintf_r+0x44>
 800ae92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae94:	e71e      	b.n	800acd4 <_vfiprintf_r+0x48>
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <_vfiprintf_r+0x228>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4630      	mov	r0, r6
 800aea2:	f000 f879 	bl	800af98 <_printf_i>
 800aea6:	e7e4      	b.n	800ae72 <_vfiprintf_r+0x1e6>
 800aea8:	0800b5a8 	.word	0x0800b5a8
 800aeac:	0800b5b2 	.word	0x0800b5b2
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	0800ac67 	.word	0x0800ac67
 800aeb8:	0800b5ae 	.word	0x0800b5ae

0800aebc <_printf_common>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	4616      	mov	r6, r2
 800aec2:	4698      	mov	r8, r3
 800aec4:	688a      	ldr	r2, [r1, #8]
 800aec6:	690b      	ldr	r3, [r1, #16]
 800aec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aecc:	4293      	cmp	r3, r2
 800aece:	bfb8      	it	lt
 800aed0:	4613      	movlt	r3, r2
 800aed2:	6033      	str	r3, [r6, #0]
 800aed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aed8:	4607      	mov	r7, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b10a      	cbz	r2, 800aee2 <_printf_common+0x26>
 800aede:	3301      	adds	r3, #1
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	0699      	lsls	r1, r3, #26
 800aee6:	bf42      	ittt	mi
 800aee8:	6833      	ldrmi	r3, [r6, #0]
 800aeea:	3302      	addmi	r3, #2
 800aeec:	6033      	strmi	r3, [r6, #0]
 800aeee:	6825      	ldr	r5, [r4, #0]
 800aef0:	f015 0506 	ands.w	r5, r5, #6
 800aef4:	d106      	bne.n	800af04 <_printf_common+0x48>
 800aef6:	f104 0a19 	add.w	sl, r4, #25
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	6832      	ldr	r2, [r6, #0]
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	42ab      	cmp	r3, r5
 800af02:	dc26      	bgt.n	800af52 <_printf_common+0x96>
 800af04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	3b00      	subs	r3, #0
 800af0c:	bf18      	it	ne
 800af0e:	2301      	movne	r3, #1
 800af10:	0692      	lsls	r2, r2, #26
 800af12:	d42b      	bmi.n	800af6c <_printf_common+0xb0>
 800af14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af18:	4641      	mov	r1, r8
 800af1a:	4638      	mov	r0, r7
 800af1c:	47c8      	blx	r9
 800af1e:	3001      	adds	r0, #1
 800af20:	d01e      	beq.n	800af60 <_printf_common+0xa4>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	f003 0306 	and.w	r3, r3, #6
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	bf02      	ittt	eq
 800af2e:	68e5      	ldreq	r5, [r4, #12]
 800af30:	6833      	ldreq	r3, [r6, #0]
 800af32:	1aed      	subeq	r5, r5, r3
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	bf0c      	ite	eq
 800af38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af3c:	2500      	movne	r5, #0
 800af3e:	4293      	cmp	r3, r2
 800af40:	bfc4      	itt	gt
 800af42:	1a9b      	subgt	r3, r3, r2
 800af44:	18ed      	addgt	r5, r5, r3
 800af46:	2600      	movs	r6, #0
 800af48:	341a      	adds	r4, #26
 800af4a:	42b5      	cmp	r5, r6
 800af4c:	d11a      	bne.n	800af84 <_printf_common+0xc8>
 800af4e:	2000      	movs	r0, #0
 800af50:	e008      	b.n	800af64 <_printf_common+0xa8>
 800af52:	2301      	movs	r3, #1
 800af54:	4652      	mov	r2, sl
 800af56:	4641      	mov	r1, r8
 800af58:	4638      	mov	r0, r7
 800af5a:	47c8      	blx	r9
 800af5c:	3001      	adds	r0, #1
 800af5e:	d103      	bne.n	800af68 <_printf_common+0xac>
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af68:	3501      	adds	r5, #1
 800af6a:	e7c6      	b.n	800aefa <_printf_common+0x3e>
 800af6c:	18e1      	adds	r1, r4, r3
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	2030      	movs	r0, #48	@ 0x30
 800af72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af76:	4422      	add	r2, r4
 800af78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af80:	3302      	adds	r3, #2
 800af82:	e7c7      	b.n	800af14 <_printf_common+0x58>
 800af84:	2301      	movs	r3, #1
 800af86:	4622      	mov	r2, r4
 800af88:	4641      	mov	r1, r8
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c8      	blx	r9
 800af8e:	3001      	adds	r0, #1
 800af90:	d0e6      	beq.n	800af60 <_printf_common+0xa4>
 800af92:	3601      	adds	r6, #1
 800af94:	e7d9      	b.n	800af4a <_printf_common+0x8e>
	...

0800af98 <_printf_i>:
 800af98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	7e0f      	ldrb	r7, [r1, #24]
 800af9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afa0:	2f78      	cmp	r7, #120	@ 0x78
 800afa2:	4691      	mov	r9, r2
 800afa4:	4680      	mov	r8, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	469a      	mov	sl, r3
 800afaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afae:	d807      	bhi.n	800afc0 <_printf_i+0x28>
 800afb0:	2f62      	cmp	r7, #98	@ 0x62
 800afb2:	d80a      	bhi.n	800afca <_printf_i+0x32>
 800afb4:	2f00      	cmp	r7, #0
 800afb6:	f000 80d2 	beq.w	800b15e <_printf_i+0x1c6>
 800afba:	2f58      	cmp	r7, #88	@ 0x58
 800afbc:	f000 80b9 	beq.w	800b132 <_printf_i+0x19a>
 800afc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afc8:	e03a      	b.n	800b040 <_printf_i+0xa8>
 800afca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afce:	2b15      	cmp	r3, #21
 800afd0:	d8f6      	bhi.n	800afc0 <_printf_i+0x28>
 800afd2:	a101      	add	r1, pc, #4	@ (adr r1, 800afd8 <_printf_i+0x40>)
 800afd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd8:	0800b031 	.word	0x0800b031
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800afc1 	.word	0x0800afc1
 800afe4:	0800afc1 	.word	0x0800afc1
 800afe8:	0800afc1 	.word	0x0800afc1
 800afec:	0800afc1 	.word	0x0800afc1
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800afc1 	.word	0x0800afc1
 800aff8:	0800afc1 	.word	0x0800afc1
 800affc:	0800afc1 	.word	0x0800afc1
 800b000:	0800afc1 	.word	0x0800afc1
 800b004:	0800b145 	.word	0x0800b145
 800b008:	0800b06f 	.word	0x0800b06f
 800b00c:	0800b0ff 	.word	0x0800b0ff
 800b010:	0800afc1 	.word	0x0800afc1
 800b014:	0800afc1 	.word	0x0800afc1
 800b018:	0800b167 	.word	0x0800b167
 800b01c:	0800afc1 	.word	0x0800afc1
 800b020:	0800b06f 	.word	0x0800b06f
 800b024:	0800afc1 	.word	0x0800afc1
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	0800b107 	.word	0x0800b107
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6032      	str	r2, [r6, #0]
 800b038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b040:	2301      	movs	r3, #1
 800b042:	e09d      	b.n	800b180 <_printf_i+0x1e8>
 800b044:	6833      	ldr	r3, [r6, #0]
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	6031      	str	r1, [r6, #0]
 800b04c:	0606      	lsls	r6, r0, #24
 800b04e:	d501      	bpl.n	800b054 <_printf_i+0xbc>
 800b050:	681d      	ldr	r5, [r3, #0]
 800b052:	e003      	b.n	800b05c <_printf_i+0xc4>
 800b054:	0645      	lsls	r5, r0, #25
 800b056:	d5fb      	bpl.n	800b050 <_printf_i+0xb8>
 800b058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b05c:	2d00      	cmp	r5, #0
 800b05e:	da03      	bge.n	800b068 <_printf_i+0xd0>
 800b060:	232d      	movs	r3, #45	@ 0x2d
 800b062:	426d      	negs	r5, r5
 800b064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b068:	4859      	ldr	r0, [pc, #356]	@ (800b1d0 <_printf_i+0x238>)
 800b06a:	230a      	movs	r3, #10
 800b06c:	e011      	b.n	800b092 <_printf_i+0xfa>
 800b06e:	6821      	ldr	r1, [r4, #0]
 800b070:	6833      	ldr	r3, [r6, #0]
 800b072:	0608      	lsls	r0, r1, #24
 800b074:	f853 5b04 	ldr.w	r5, [r3], #4
 800b078:	d402      	bmi.n	800b080 <_printf_i+0xe8>
 800b07a:	0649      	lsls	r1, r1, #25
 800b07c:	bf48      	it	mi
 800b07e:	b2ad      	uxthmi	r5, r5
 800b080:	2f6f      	cmp	r7, #111	@ 0x6f
 800b082:	4853      	ldr	r0, [pc, #332]	@ (800b1d0 <_printf_i+0x238>)
 800b084:	6033      	str	r3, [r6, #0]
 800b086:	bf14      	ite	ne
 800b088:	230a      	movne	r3, #10
 800b08a:	2308      	moveq	r3, #8
 800b08c:	2100      	movs	r1, #0
 800b08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b092:	6866      	ldr	r6, [r4, #4]
 800b094:	60a6      	str	r6, [r4, #8]
 800b096:	2e00      	cmp	r6, #0
 800b098:	bfa2      	ittt	ge
 800b09a:	6821      	ldrge	r1, [r4, #0]
 800b09c:	f021 0104 	bicge.w	r1, r1, #4
 800b0a0:	6021      	strge	r1, [r4, #0]
 800b0a2:	b90d      	cbnz	r5, 800b0a8 <_printf_i+0x110>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	d04b      	beq.n	800b140 <_printf_i+0x1a8>
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b0b2:	5dc7      	ldrb	r7, [r0, r7]
 800b0b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0b8:	462f      	mov	r7, r5
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	460d      	mov	r5, r1
 800b0be:	d9f4      	bls.n	800b0aa <_printf_i+0x112>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <_printf_i+0x144>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07df      	lsls	r7, r3, #31
 800b0c8:	d508      	bpl.n	800b0dc <_printf_i+0x144>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	bfde      	ittt	le
 800b0d2:	2330      	movle	r3, #48	@ 0x30
 800b0d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0dc:	1b92      	subs	r2, r2, r6
 800b0de:	6122      	str	r2, [r4, #16]
 800b0e0:	f8cd a000 	str.w	sl, [sp]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	aa03      	add	r2, sp, #12
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fee6 	bl	800aebc <_printf_common>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d14a      	bne.n	800b18a <_printf_i+0x1f2>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	b004      	add	sp, #16
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	f043 0320 	orr.w	r3, r3, #32
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	4833      	ldr	r0, [pc, #204]	@ (800b1d4 <_printf_i+0x23c>)
 800b108:	2778      	movs	r7, #120	@ 0x78
 800b10a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	6831      	ldr	r1, [r6, #0]
 800b112:	061f      	lsls	r7, r3, #24
 800b114:	f851 5b04 	ldr.w	r5, [r1], #4
 800b118:	d402      	bmi.n	800b120 <_printf_i+0x188>
 800b11a:	065f      	lsls	r7, r3, #25
 800b11c:	bf48      	it	mi
 800b11e:	b2ad      	uxthmi	r5, r5
 800b120:	6031      	str	r1, [r6, #0]
 800b122:	07d9      	lsls	r1, r3, #31
 800b124:	bf44      	itt	mi
 800b126:	f043 0320 	orrmi.w	r3, r3, #32
 800b12a:	6023      	strmi	r3, [r4, #0]
 800b12c:	b11d      	cbz	r5, 800b136 <_printf_i+0x19e>
 800b12e:	2310      	movs	r3, #16
 800b130:	e7ac      	b.n	800b08c <_printf_i+0xf4>
 800b132:	4827      	ldr	r0, [pc, #156]	@ (800b1d0 <_printf_i+0x238>)
 800b134:	e7e9      	b.n	800b10a <_printf_i+0x172>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	f023 0320 	bic.w	r3, r3, #32
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	e7f6      	b.n	800b12e <_printf_i+0x196>
 800b140:	4616      	mov	r6, r2
 800b142:	e7bd      	b.n	800b0c0 <_printf_i+0x128>
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	6825      	ldr	r5, [r4, #0]
 800b148:	6961      	ldr	r1, [r4, #20]
 800b14a:	1d18      	adds	r0, r3, #4
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	062e      	lsls	r6, r5, #24
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	d501      	bpl.n	800b158 <_printf_i+0x1c0>
 800b154:	6019      	str	r1, [r3, #0]
 800b156:	e002      	b.n	800b15e <_printf_i+0x1c6>
 800b158:	0668      	lsls	r0, r5, #25
 800b15a:	d5fb      	bpl.n	800b154 <_printf_i+0x1bc>
 800b15c:	8019      	strh	r1, [r3, #0]
 800b15e:	2300      	movs	r3, #0
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	4616      	mov	r6, r2
 800b164:	e7bc      	b.n	800b0e0 <_printf_i+0x148>
 800b166:	6833      	ldr	r3, [r6, #0]
 800b168:	1d1a      	adds	r2, r3, #4
 800b16a:	6032      	str	r2, [r6, #0]
 800b16c:	681e      	ldr	r6, [r3, #0]
 800b16e:	6862      	ldr	r2, [r4, #4]
 800b170:	2100      	movs	r1, #0
 800b172:	4630      	mov	r0, r6
 800b174:	f7fa fc0c 	bl	8005990 <memchr>
 800b178:	b108      	cbz	r0, 800b17e <_printf_i+0x1e6>
 800b17a:	1b80      	subs	r0, r0, r6
 800b17c:	6060      	str	r0, [r4, #4]
 800b17e:	6863      	ldr	r3, [r4, #4]
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	2300      	movs	r3, #0
 800b184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b188:	e7aa      	b.n	800b0e0 <_printf_i+0x148>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	4632      	mov	r2, r6
 800b18e:	4649      	mov	r1, r9
 800b190:	4640      	mov	r0, r8
 800b192:	47d0      	blx	sl
 800b194:	3001      	adds	r0, #1
 800b196:	d0ad      	beq.n	800b0f4 <_printf_i+0x15c>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	079b      	lsls	r3, r3, #30
 800b19c:	d413      	bmi.n	800b1c6 <_printf_i+0x22e>
 800b19e:	68e0      	ldr	r0, [r4, #12]
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	4298      	cmp	r0, r3
 800b1a4:	bfb8      	it	lt
 800b1a6:	4618      	movlt	r0, r3
 800b1a8:	e7a6      	b.n	800b0f8 <_printf_i+0x160>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	47d0      	blx	sl
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d09d      	beq.n	800b0f4 <_printf_i+0x15c>
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	68e3      	ldr	r3, [r4, #12]
 800b1bc:	9903      	ldr	r1, [sp, #12]
 800b1be:	1a5b      	subs	r3, r3, r1
 800b1c0:	42ab      	cmp	r3, r5
 800b1c2:	dcf2      	bgt.n	800b1aa <_printf_i+0x212>
 800b1c4:	e7eb      	b.n	800b19e <_printf_i+0x206>
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	f104 0619 	add.w	r6, r4, #25
 800b1cc:	e7f5      	b.n	800b1ba <_printf_i+0x222>
 800b1ce:	bf00      	nop
 800b1d0:	0800b5b9 	.word	0x0800b5b9
 800b1d4:	0800b5ca 	.word	0x0800b5ca

0800b1d8 <__sflush_r>:
 800b1d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	0716      	lsls	r6, r2, #28
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	d454      	bmi.n	800b292 <__sflush_r+0xba>
 800b1e8:	684b      	ldr	r3, [r1, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dc02      	bgt.n	800b1f4 <__sflush_r+0x1c>
 800b1ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dd48      	ble.n	800b286 <__sflush_r+0xae>
 800b1f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	d045      	beq.n	800b286 <__sflush_r+0xae>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b200:	682f      	ldr	r7, [r5, #0]
 800b202:	6a21      	ldr	r1, [r4, #32]
 800b204:	602b      	str	r3, [r5, #0]
 800b206:	d030      	beq.n	800b26a <__sflush_r+0x92>
 800b208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	0759      	lsls	r1, r3, #29
 800b20e:	d505      	bpl.n	800b21c <__sflush_r+0x44>
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	1ad2      	subs	r2, r2, r3
 800b214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b216:	b10b      	cbz	r3, 800b21c <__sflush_r+0x44>
 800b218:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	2300      	movs	r3, #0
 800b21e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b220:	6a21      	ldr	r1, [r4, #32]
 800b222:	4628      	mov	r0, r5
 800b224:	47b0      	blx	r6
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	d106      	bne.n	800b23a <__sflush_r+0x62>
 800b22c:	6829      	ldr	r1, [r5, #0]
 800b22e:	291d      	cmp	r1, #29
 800b230:	d82b      	bhi.n	800b28a <__sflush_r+0xb2>
 800b232:	4a2a      	ldr	r2, [pc, #168]	@ (800b2dc <__sflush_r+0x104>)
 800b234:	410a      	asrs	r2, r1
 800b236:	07d6      	lsls	r6, r2, #31
 800b238:	d427      	bmi.n	800b28a <__sflush_r+0xb2>
 800b23a:	2200      	movs	r2, #0
 800b23c:	6062      	str	r2, [r4, #4]
 800b23e:	04d9      	lsls	r1, r3, #19
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	6022      	str	r2, [r4, #0]
 800b244:	d504      	bpl.n	800b250 <__sflush_r+0x78>
 800b246:	1c42      	adds	r2, r0, #1
 800b248:	d101      	bne.n	800b24e <__sflush_r+0x76>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b903      	cbnz	r3, 800b250 <__sflush_r+0x78>
 800b24e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b252:	602f      	str	r7, [r5, #0]
 800b254:	b1b9      	cbz	r1, 800b286 <__sflush_r+0xae>
 800b256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b25a:	4299      	cmp	r1, r3
 800b25c:	d002      	beq.n	800b264 <__sflush_r+0x8c>
 800b25e:	4628      	mov	r0, r5
 800b260:	f7ff fca0 	bl	800aba4 <_free_r>
 800b264:	2300      	movs	r3, #0
 800b266:	6363      	str	r3, [r4, #52]	@ 0x34
 800b268:	e00d      	b.n	800b286 <__sflush_r+0xae>
 800b26a:	2301      	movs	r3, #1
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b0      	blx	r6
 800b270:	4602      	mov	r2, r0
 800b272:	1c50      	adds	r0, r2, #1
 800b274:	d1c9      	bne.n	800b20a <__sflush_r+0x32>
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0c6      	beq.n	800b20a <__sflush_r+0x32>
 800b27c:	2b1d      	cmp	r3, #29
 800b27e:	d001      	beq.n	800b284 <__sflush_r+0xac>
 800b280:	2b16      	cmp	r3, #22
 800b282:	d11e      	bne.n	800b2c2 <__sflush_r+0xea>
 800b284:	602f      	str	r7, [r5, #0]
 800b286:	2000      	movs	r0, #0
 800b288:	e022      	b.n	800b2d0 <__sflush_r+0xf8>
 800b28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b28e:	b21b      	sxth	r3, r3
 800b290:	e01b      	b.n	800b2ca <__sflush_r+0xf2>
 800b292:	690f      	ldr	r7, [r1, #16]
 800b294:	2f00      	cmp	r7, #0
 800b296:	d0f6      	beq.n	800b286 <__sflush_r+0xae>
 800b298:	0793      	lsls	r3, r2, #30
 800b29a:	680e      	ldr	r6, [r1, #0]
 800b29c:	bf08      	it	eq
 800b29e:	694b      	ldreq	r3, [r1, #20]
 800b2a0:	600f      	str	r7, [r1, #0]
 800b2a2:	bf18      	it	ne
 800b2a4:	2300      	movne	r3, #0
 800b2a6:	eba6 0807 	sub.w	r8, r6, r7
 800b2aa:	608b      	str	r3, [r1, #8]
 800b2ac:	f1b8 0f00 	cmp.w	r8, #0
 800b2b0:	dde9      	ble.n	800b286 <__sflush_r+0xae>
 800b2b2:	6a21      	ldr	r1, [r4, #32]
 800b2b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2b6:	4643      	mov	r3, r8
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	47b0      	blx	r6
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	dc08      	bgt.n	800b2d4 <__sflush_r+0xfc>
 800b2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d4:	4407      	add	r7, r0
 800b2d6:	eba8 0800 	sub.w	r8, r8, r0
 800b2da:	e7e7      	b.n	800b2ac <__sflush_r+0xd4>
 800b2dc:	dfbffffe 	.word	0xdfbffffe

0800b2e0 <_fflush_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	690b      	ldr	r3, [r1, #16]
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	b913      	cbnz	r3, 800b2f0 <_fflush_r+0x10>
 800b2ea:	2500      	movs	r5, #0
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	b118      	cbz	r0, 800b2fa <_fflush_r+0x1a>
 800b2f2:	6a03      	ldr	r3, [r0, #32]
 800b2f4:	b90b      	cbnz	r3, 800b2fa <_fflush_r+0x1a>
 800b2f6:	f7ff fa3d 	bl	800a774 <__sinit>
 800b2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0f3      	beq.n	800b2ea <_fflush_r+0xa>
 800b302:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b304:	07d0      	lsls	r0, r2, #31
 800b306:	d404      	bmi.n	800b312 <_fflush_r+0x32>
 800b308:	0599      	lsls	r1, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_fflush_r+0x32>
 800b30c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b30e:	f7ff fc38 	bl	800ab82 <__retarget_lock_acquire_recursive>
 800b312:	4628      	mov	r0, r5
 800b314:	4621      	mov	r1, r4
 800b316:	f7ff ff5f 	bl	800b1d8 <__sflush_r>
 800b31a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b31c:	07da      	lsls	r2, r3, #31
 800b31e:	4605      	mov	r5, r0
 800b320:	d4e4      	bmi.n	800b2ec <_fflush_r+0xc>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	059b      	lsls	r3, r3, #22
 800b326:	d4e1      	bmi.n	800b2ec <_fflush_r+0xc>
 800b328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32a:	f7ff fc2b 	bl	800ab84 <__retarget_lock_release_recursive>
 800b32e:	e7dd      	b.n	800b2ec <_fflush_r+0xc>

0800b330 <__swhatbuf_r>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b338:	2900      	cmp	r1, #0
 800b33a:	b096      	sub	sp, #88	@ 0x58
 800b33c:	4615      	mov	r5, r2
 800b33e:	461e      	mov	r6, r3
 800b340:	da0d      	bge.n	800b35e <__swhatbuf_r+0x2e>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	bf14      	ite	ne
 800b34e:	2340      	movne	r3, #64	@ 0x40
 800b350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b354:	2000      	movs	r0, #0
 800b356:	6031      	str	r1, [r6, #0]
 800b358:	602b      	str	r3, [r5, #0]
 800b35a:	b016      	add	sp, #88	@ 0x58
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	466a      	mov	r2, sp
 800b360:	f000 f848 	bl	800b3f4 <_fstat_r>
 800b364:	2800      	cmp	r0, #0
 800b366:	dbec      	blt.n	800b342 <__swhatbuf_r+0x12>
 800b368:	9901      	ldr	r1, [sp, #4]
 800b36a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b36e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b372:	4259      	negs	r1, r3
 800b374:	4159      	adcs	r1, r3
 800b376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b37a:	e7eb      	b.n	800b354 <__swhatbuf_r+0x24>

0800b37c <__smakebuf_r>:
 800b37c:	898b      	ldrh	r3, [r1, #12]
 800b37e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b380:	079d      	lsls	r5, r3, #30
 800b382:	4606      	mov	r6, r0
 800b384:	460c      	mov	r4, r1
 800b386:	d507      	bpl.n	800b398 <__smakebuf_r+0x1c>
 800b388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	6123      	str	r3, [r4, #16]
 800b390:	2301      	movs	r3, #1
 800b392:	6163      	str	r3, [r4, #20]
 800b394:	b003      	add	sp, #12
 800b396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b398:	ab01      	add	r3, sp, #4
 800b39a:	466a      	mov	r2, sp
 800b39c:	f7ff ffc8 	bl	800b330 <__swhatbuf_r>
 800b3a0:	9f00      	ldr	r7, [sp, #0]
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f7ff f8cc 	bl	800a544 <_malloc_r>
 800b3ac:	b948      	cbnz	r0, 800b3c2 <__smakebuf_r+0x46>
 800b3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b2:	059a      	lsls	r2, r3, #22
 800b3b4:	d4ee      	bmi.n	800b394 <__smakebuf_r+0x18>
 800b3b6:	f023 0303 	bic.w	r3, r3, #3
 800b3ba:	f043 0302 	orr.w	r3, r3, #2
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	e7e2      	b.n	800b388 <__smakebuf_r+0xc>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	6020      	str	r0, [r4, #0]
 800b3c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3d2:	b15b      	cbz	r3, 800b3ec <__smakebuf_r+0x70>
 800b3d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f000 f81d 	bl	800b418 <_isatty_r>
 800b3de:	b128      	cbz	r0, 800b3ec <__smakebuf_r+0x70>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	f043 0301 	orr.w	r3, r3, #1
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	431d      	orrs	r5, r3
 800b3f0:	81a5      	strh	r5, [r4, #12]
 800b3f2:	e7cf      	b.n	800b394 <__smakebuf_r+0x18>

0800b3f4 <_fstat_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4d07      	ldr	r5, [pc, #28]	@ (800b414 <_fstat_r+0x20>)
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	4611      	mov	r1, r2
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	f7fa ffb1 	bl	8006368 <_fstat>
 800b406:	1c43      	adds	r3, r0, #1
 800b408:	d102      	bne.n	800b410 <_fstat_r+0x1c>
 800b40a:	682b      	ldr	r3, [r5, #0]
 800b40c:	b103      	cbz	r3, 800b410 <_fstat_r+0x1c>
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	bd38      	pop	{r3, r4, r5, pc}
 800b412:	bf00      	nop
 800b414:	20005080 	.word	0x20005080

0800b418 <_isatty_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d06      	ldr	r5, [pc, #24]	@ (800b434 <_isatty_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7fa ffa6 	bl	8006374 <_isatty>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_isatty_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_isatty_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	20005080 	.word	0x20005080

0800b438 <_init>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	bf00      	nop
 800b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43e:	bc08      	pop	{r3}
 800b440:	469e      	mov	lr, r3
 800b442:	4770      	bx	lr

0800b444 <_fini>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr
